[{"uri":"https://plotly.net/reference/plotly-net.html","title":"Plotly.NET","content":"Axis \nCandelstickExtension \nChartExtensions \nChartTemplates \nColors \nDynObj \nGenericChart \nGenericChartExtensions \nHTML \nLigth \nReflectionHelper \nSankeyExtension \nSeq \nStyleParam \nTrace \nTrace3d \nAnnotation \nAnnotationEditOptions \nBins \nBox \nCandle \nCellColor \nChart \nChartDescription \nColorbar \nConfig \nContour \nContours \nCumulative \nDimensions \nDisplayOptions \nDomain \nDynamicObj \nError \nFont \nFrame \nFunnelConnector \nGeo \nGeoProjection \nGeoProjectionRotation \nHoverlabel \nLayout \nLayoutGrid \nLegend \nLine \nLink \nMargin \nMarker \nMeanline \nNode \nPathbar \nRangeSlider \nScene \nSelected \nShape \nStockData \nTableCells \nTableHeader \nTemplate \nToImageButtonOptions \nTrace \nTrace3d \nTreemapTiling \nUnSelected \nWaterfallConnector"},{"uri":"https://plotly.net/reference/plotly-net-interactive.html","title":"Plotly.NET.Interactive","content":"FormatterKernelExtension"},{"uri":"https://plotly.net/reference/plotly-net-axis.html","title":"Axis","content":"Axis \n\n Module containing plotly axis \n \nAxis.AngularAxis \nAngularAxis \nAxis.LinearAxis \nLinearAxis \nAxis.RadialAxis \nRadialAxis"},{"uri":"https://plotly.net/reference/plotly-net-axis-angularaxis.html","title":"AngularAxis","content":"AngularAxis \n\n Angularaxis type inherits from dynamic object\n \nAngularAxis.( .ctor ) \n( .ctor ) \nAngularAxis.init \ninit"},{"uri":"https://plotly.net/reference/plotly-net-axis-angularaxis.html#( .ctor )","title":"AngularAxis.( .ctor )","content":"AngularAxis.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-axis-angularaxis.html#init","title":"AngularAxis.init","content":"AngularAxis.init \ninit \n\n Init Angularaxis type\n"},{"uri":"https://plotly.net/reference/plotly-net-axis-linearaxis.html","title":"LinearAxis","content":"LinearAxis \n\n LinearAxis type inherits from dynamic object\n \nLinearAxis.( .ctor ) \n( .ctor ) \nLinearAxis.init \ninit \nLinearAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-axis-linearaxis.html#( .ctor )","title":"LinearAxis.( .ctor )","content":"LinearAxis.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-axis-linearaxis.html#init","title":"LinearAxis.init","content":"LinearAxis.init \ninit \n\n Init LinearAxis type\n"},{"uri":"https://plotly.net/reference/plotly-net-axis-linearaxis.html#style","title":"LinearAxis.style","content":"LinearAxis.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-axis-radialaxis.html","title":"RadialAxis","content":"RadialAxis \n\n Radialaxis type inherits from dynamic object\n \nRadialAxis.( .ctor ) \n( .ctor ) \nRadialAxis.init \ninit"},{"uri":"https://plotly.net/reference/plotly-net-axis-radialaxis.html#( .ctor )","title":"RadialAxis.( .ctor )","content":"RadialAxis.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-axis-radialaxis.html#init","title":"RadialAxis.init","content":"RadialAxis.init \ninit \n\n Init Radialaxis type\n"},{"uri":"https://plotly.net/reference/plotly-net-candelstickextension.html","title":"CandelstickExtension","content":"CandelstickExtension \n \nCandelstickExtension.Candelstick \nCandelstick"},{"uri":"https://plotly.net/reference/plotly-net-candelstickextension.html#Candelstick","title":"CandelstickExtension.Candelstick","content":"CandelstickExtension.Candelstick \nCandelstick \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html","title":"ChartExtensions","content":"ChartExtensions \n\n Extensions methods for Charts supporting the fluent pipeline style \u0027Chart.WithXYZ(...)\u0027.\n \nChartExtensions.withTraceName \nwithTraceName \nChartExtensions.withAxisAnchor \nwithAxisAnchor \nChartExtensions.withAxisAnchor \nwithAxisAnchor \nChartExtensions.withMarker \nwithMarker \nChartExtensions.withMarkerStyle \nwithMarkerStyle \nChartExtensions.withLine \nwithLine \nChartExtensions.withLineStyle \nwithLineStyle \nChartExtensions.withXError \nwithXError \nChartExtensions.withXErrorStyle \nwithXErrorStyle \nChartExtensions.withYError \nwithYError \nChartExtensions.withYErrorStyle \nwithYErrorStyle \nChartExtensions.withZError \nwithZError \nChartExtensions.withZErrorStyle \nwithZErrorStyle \nChartExtensions.withX_Axis \nwithX_Axis \nChartExtensions.withX_AxisStyle \nwithX_AxisStyle \nChartExtensions.withX_AxisRangeSlider \nwithX_AxisRangeSlider \nChartExtensions.withY_Axis \nwithY_Axis \nChartExtensions.withY_AxisStyle \nwithY_AxisStyle \nChartExtensions.withZ_Axis \nwithZ_Axis \nChartExtensions.withZ_AxisStyle \nwithZ_AxisStyle \nChartExtensions.withColorBar \nwithColorBar \nChartExtensions.withColorBarStyle \nwithColorBarStyle \nChartExtensions.withLayout \nwithLayout \nChartExtensions.withLayoutGrid \nwithLayoutGrid \nChartExtensions.withLegend \nwithLegend \nChartExtensions.withMap \nwithMap \nChartExtensions.withMapStyle \nwithMapStyle \nChartExtensions.withMapProjection \nwithMapProjection \nChartExtensions.withLayoutGridStyle \nwithLayoutGridStyle \nChartExtensions.withConfig \nwithConfig \nChartExtensions.withAnnotations \nwithAnnotations \nChartExtensions.withTitle \nwithTitle \nChartExtensions.withLegend \nwithLegend \nChartExtensions.withSize \nwithSize \nChartExtensions.withMargin \nwithMargin \nChartExtensions.withMarginSize \nwithMarginSize \nChartExtensions.withTemplate \nwithTemplate \nChartExtensions.withShape \nwithShape \nChartExtensions.withShapes \nwithShapes \nChartExtensions.Combine \nCombine \nChartExtensions.Grid \nGrid \nChartExtensions.SingleStack \nSingleStack \nChartExtensions.Stack \nStack \nChartExtensions.WithDescription \nWithDescription \nChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \nChartExtensions.WithHeadTags \nWithHeadTags \nChartExtensions.WithMathTex \nWithMathTex \nChartExtensions.SaveHtmlAs \nSaveHtmlAs \nChartExtensions.Show \nShow \nChartExtensions.ShowAsImage \nShowAsImage"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withTraceName","title":"ChartExtensions.withTraceName","content":"ChartExtensions.withTraceName \nwithTraceName \n\n Set the name related properties of a trace\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withAxisAnchor","title":"ChartExtensions.withAxisAnchor","content":"ChartExtensions.withAxisAnchor \nwithAxisAnchor \n\n Set the axis anchor id the trace is belonging to\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withAxisAnchor","title":"ChartExtensions.withAxisAnchor","content":"ChartExtensions.withAxisAnchor \nwithAxisAnchor \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withMarker","title":"ChartExtensions.withMarker","content":"ChartExtensions.withMarker \nwithMarker \n\n Apply styling to the Marker(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withMarkerStyle","title":"ChartExtensions.withMarkerStyle","content":"ChartExtensions.withMarkerStyle \nwithMarkerStyle \n\n Apply styling to the Marker(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withLine","title":"ChartExtensions.withLine","content":"ChartExtensions.withLine \nwithLine \n\n Apply styling to the Line(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withLineStyle","title":"ChartExtensions.withLineStyle","content":"ChartExtensions.withLineStyle \nwithLineStyle \n\n Apply styling to the Line(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withXError","title":"ChartExtensions.withXError","content":"ChartExtensions.withXError \nwithXError \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withXErrorStyle","title":"ChartExtensions.withXErrorStyle","content":"ChartExtensions.withXErrorStyle \nwithXErrorStyle \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withYError","title":"ChartExtensions.withYError","content":"ChartExtensions.withYError \nwithYError \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withYErrorStyle","title":"ChartExtensions.withYErrorStyle","content":"ChartExtensions.withYErrorStyle \nwithYErrorStyle \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withZError","title":"ChartExtensions.withZError","content":"ChartExtensions.withZError \nwithZError \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withZErrorStyle","title":"ChartExtensions.withZErrorStyle","content":"ChartExtensions.withZErrorStyle \nwithZErrorStyle \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withX_Axis","title":"ChartExtensions.withX_Axis","content":"ChartExtensions.withX_Axis \nwithX_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withX_AxisStyle","title":"ChartExtensions.withX_AxisStyle","content":"ChartExtensions.withX_AxisStyle \nwithX_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withX_AxisRangeSlider","title":"ChartExtensions.withX_AxisRangeSlider","content":"ChartExtensions.withX_AxisRangeSlider \nwithX_AxisRangeSlider \n\n Sets the range slider for the xAxis\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withY_Axis","title":"ChartExtensions.withY_Axis","content":"ChartExtensions.withY_Axis \nwithY_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withY_AxisStyle","title":"ChartExtensions.withY_AxisStyle","content":"ChartExtensions.withY_AxisStyle \nwithY_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withZ_Axis","title":"ChartExtensions.withZ_Axis","content":"ChartExtensions.withZ_Axis \nwithZ_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withZ_AxisStyle","title":"ChartExtensions.withZ_AxisStyle","content":"ChartExtensions.withZ_AxisStyle \nwithZ_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withColorBar","title":"ChartExtensions.withColorBar","content":"ChartExtensions.withColorBar \nwithColorBar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withColorBarStyle","title":"ChartExtensions.withColorBarStyle","content":"ChartExtensions.withColorBarStyle \nwithColorBarStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withLayout","title":"ChartExtensions.withLayout","content":"ChartExtensions.withLayout \nwithLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withLayoutGrid","title":"ChartExtensions.withLayoutGrid","content":"ChartExtensions.withLayoutGrid \nwithLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withLegend","title":"ChartExtensions.withLegend","content":"ChartExtensions.withLegend \nwithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withMap","title":"ChartExtensions.withMap","content":"ChartExtensions.withMap \nwithMap \n\n Sets a map for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withMapStyle","title":"ChartExtensions.withMapStyle","content":"ChartExtensions.withMapStyle \nwithMapStyle \n\n Sets the map style for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n\n Parameters      :\n\n FitBounds       : Determines if and how this subplot\u0027s view settings are auto-computed to fit trace data\n\n Resolution      : Sets the resolution of the base layers\n\n Scope           : Set the scope of the map.\n\n Projection      : Determines the type of projection used to display the map\n\n Center          : Sets the (lon,lat) coordinates of the map\u0027s center. By default, the map\u0027s longitude center lies at the middle of the longitude range for scoped projection and above \u0060projection.rotation.lon\u0060 otherwise. For all projection types, the map\u0027s latitude center lies at the middle of the latitude range by default.\n\n Visible         : Wether or not the base layers are visible\n\n Domain          : The domain of this geo subplot\n\n ShowCoastLine   : Sets whether or not the coastlines are drawn.\n\n CoastLineColor  : Sets the coastline color.\n\n CoastLineWidth  : Sets the coastline stroke width (in px).\n\n ShowLand        : Sets whether or not land masses are filled in color.\n\n LandColor       : Sets the land mass color.\n\n ShowOcean       : Sets whether or not oceans are filled in color.\n\n OceanColor      : Sets the ocean color\n\n ShowLakes       : Sets whether or not lakes are drawn.\n\n LakeColor       : Sets the color of the lakes.\n\n ShowRivers      : Sets whether or not rivers are drawn.\n\n RiverColor      : Sets color of the rivers.\n\n RiverWidth      : Sets the stroke width (in px) of the rivers.\n\n ShowCountries   : Sets whether or not country boundaries are drawn.\n\n CountryColor    : Sets line color of the country boundaries.\n\n CountryWidth    : Sets line width (in px) of the country boundaries.\n\n ShowSubunits    : Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.\n\n SubunitColor    : Sets the color of the subunits boundaries.\n\n SubunitWidth    : Sets the stroke width (in px) of the subunits boundaries.\n\n ShowFrame       : Sets whether or not a frame is drawn around the map.\n\n FrameColor      : Sets the color the frame.\n\n FrameWidth      : Sets the stroke width (in px) of the frame.\n\n BgColor         : Set the background color of the map\n\n LatAxis         : Sets the latitudinal axis for this geo trace\n\n LonAxis         : Sets the longitudinal axis for this geo trace\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withMapProjection","title":"ChartExtensions.withMapProjection","content":"ChartExtensions.withMapProjection \nwithMapProjection \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withLayoutGridStyle","title":"ChartExtensions.withLayoutGridStyle","content":"ChartExtensions.withLayoutGridStyle \nwithLayoutGridStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withConfig","title":"ChartExtensions.withConfig","content":"ChartExtensions.withConfig \nwithConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withAnnotations","title":"ChartExtensions.withAnnotations","content":"ChartExtensions.withAnnotations \nwithAnnotations \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withTitle","title":"ChartExtensions.withTitle","content":"ChartExtensions.withTitle \nwithTitle \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withLegend","title":"ChartExtensions.withLegend","content":"ChartExtensions.withLegend \nwithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withSize","title":"ChartExtensions.withSize","content":"ChartExtensions.withSize \nwithSize \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withMargin","title":"ChartExtensions.withMargin","content":"ChartExtensions.withMargin \nwithMargin \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withMarginSize","title":"ChartExtensions.withMarginSize","content":"ChartExtensions.withMarginSize \nwithMarginSize \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withTemplate","title":"ChartExtensions.withTemplate","content":"ChartExtensions.withTemplate \nwithTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withShape","title":"ChartExtensions.withShape","content":"ChartExtensions.withShape \nwithShape \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#withShapes","title":"ChartExtensions.withShapes","content":"ChartExtensions.withShapes \nwithShapes \n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#Combine","title":"ChartExtensions.Combine","content":"ChartExtensions.Combine \nCombine \n\n Create a combined chart with the given charts merged\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#Grid","title":"ChartExtensions.Grid","content":"ChartExtensions.Grid \nGrid \n\nCreates a Grid containing the given plots as subplots with the dimensions of the input (amount of columns equal to the largest inner sequence).\n\nParameters:\n\nsharedAxes   : Wether the subplots share one xAxis per column and one yAxis per row or not. (default:TopToBottom)\n\nrowOrder     : the order in which the rows of the grid will be rendered (default:false)\n \nxGap         : The space between columns of the grid relative to the x dimension of the grid\n\nyGap         : The space between rows of the grid relative to the y dimension of the grid\n\nUse Chart.withLayoutGridStyle to further style the grid object contained in the returned chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#SingleStack","title":"ChartExtensions.SingleStack","content":"ChartExtensions.SingleStack \nSingleStack \n\nCreates a chart stack from the input charts by stacking them on top of each other starting from the first chart.\n\nParameters:\n\nsharedAxis   : wether the stack has a shared x axis (default:true)\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#Stack","title":"ChartExtensions.Stack","content":"ChartExtensions.Stack \nStack \n\n Create a combined chart with the given charts merged\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#WithDescription","title":"ChartExtensions.WithDescription","content":"ChartExtensions.WithDescription \nWithDescription \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#WithAdditionalHeadTags","title":"ChartExtensions.WithAdditionalHeadTags","content":"ChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \n\n Adds the given additional html tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#WithHeadTags","title":"ChartExtensions.WithHeadTags","content":"ChartExtensions.WithHeadTags \nWithHeadTags \n\n Sets the given additional head tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#WithMathTex","title":"ChartExtensions.WithMathTex","content":"ChartExtensions.WithMathTex \nWithMathTex \n\n Adds the necessary script tags to render tex strings to the chart\u0027s DisplayOptions\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#SaveHtmlAs","title":"ChartExtensions.SaveHtmlAs","content":"ChartExtensions.SaveHtmlAs \nSaveHtmlAs \n\n Save chart as html single page\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#Show","title":"ChartExtensions.Show","content":"ChartExtensions.Show \nShow \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-chartextensions.html#ShowAsImage","title":"ChartExtensions.ShowAsImage","content":"ChartExtensions.ShowAsImage \nShowAsImage \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html","title":"ChartTemplates","content":"ChartTemplates \n \nChartTemplates.ColorWays \nColorWays \nChartTemplates.light \nlight \nChartTemplates.lightMirrored \nlightMirrored \nChartTemplates.dark \ndark \nChartTemplates.darkMirrored \ndarkMirrored \nChartTemplates.fslab \nfslab \nChartTemplates.transparent \ntransparent \nChartTemplates.transparentMirrored \ntransparentMirrored"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#light","title":"ChartTemplates.light","content":"ChartTemplates.light \nlight \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#lightMirrored","title":"ChartTemplates.lightMirrored","content":"ChartTemplates.lightMirrored \nlightMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#dark","title":"ChartTemplates.dark","content":"ChartTemplates.dark \ndark \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#darkMirrored","title":"ChartTemplates.darkMirrored","content":"ChartTemplates.darkMirrored \ndarkMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#fslab","title":"ChartTemplates.fslab","content":"ChartTemplates.fslab \nfslab \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#transparent","title":"ChartTemplates.transparent","content":"ChartTemplates.transparent \ntransparent \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#transparentMirrored","title":"ChartTemplates.transparentMirrored","content":"ChartTemplates.transparentMirrored \ntransparentMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html","title":"ColorWays","content":"ColorWays \n\n A colorway is an array of colors that contains the default colors for traces\n \nColorWays.plotly \nplotly \nColorWays.fslab \nfslab"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html#plotly","title":"ColorWays.plotly","content":"ColorWays.plotly \nplotly \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html#fslab","title":"ColorWays.fslab","content":"ColorWays.fslab \nfslab \n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html","title":"Colors","content":"Colors \n\n Represents an ARGB (alpha, red, green, blue) color\n \nColors.Table \nTable \nColors.Color \nColor \nColors.ColorComponent \nColorComponent \nColors.getValueFromCC \ngetValueFromCC \nColors.maxRGB \nmaxRGB \nColors.minRGB \nminRGB \nColors.fromArgb \nfromArgb \nColors.fromRgb \nfromRgb \nColors.getHue \ngetHue \nColors.getSaturation \ngetSaturation \nColors.toArgb \ntoArgb \nColors.toHex \ntoHex \nColors.fromHex \nfromHex \nColors.toWebColor \ntoWebColor \nColors.fromWebColor \nfromWebColor \nColors.toString \ntoString"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#getValueFromCC","title":"Colors.getValueFromCC","content":"Colors.getValueFromCC \ngetValueFromCC \n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#maxRGB","title":"Colors.maxRGB","content":"Colors.maxRGB \nmaxRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#minRGB","title":"Colors.minRGB","content":"Colors.minRGB \nminRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#fromArgb","title":"Colors.fromArgb","content":"Colors.fromArgb \nfromArgb \n\n Creates a Color structure from the four ARGB component (alpha, red, green, and blue) values.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#fromRgb","title":"Colors.fromRgb","content":"Colors.fromRgb \nfromRgb \n\n Creates a Color structure from the specified color values (red, green, and blue).\n The alpha value is implicitly 255 (fully opaque). \n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#getHue","title":"Colors.getHue","content":"Colors.getHue \ngetHue \n\n Gets the hue-saturation-brightness (HSB) hue value, in degrees, for this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#getSaturation","title":"Colors.getSaturation","content":"Colors.getSaturation \ngetSaturation \n\n Gets the hue-saturation-brightness (HSB) saturation value for this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#toArgb","title":"Colors.toArgb","content":"Colors.toArgb \ntoArgb \n\n Gets the 32-bit ARGB value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#toHex","title":"Colors.toHex","content":"Colors.toHex \ntoHex \n\n Gets the hex representataion (FFFFFF) of a color (with valid prefix \u00220xFFFFFF\u0022)\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#fromHex","title":"Colors.fromHex","content":"Colors.fromHex \nfromHex \n\n Gets color from hex representataion (FFFFFF) or (0xFFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#toWebColor","title":"Colors.toWebColor","content":"Colors.toWebColor \ntoWebColor \n\n Gets the web color representataion (#FFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#fromWebColor","title":"Colors.fromWebColor","content":"Colors.fromWebColor \nfromWebColor \n\n Gets color from web color (#FFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-colors.html#toString","title":"Colors.toString","content":"Colors.toString \ntoString \n\n Converts this Color structure to a human-readable string.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table.html","title":"Table","content":"Table \n \nTable.Office \nOffice \nTable.StatisticalGraphics24 \nStatisticalGraphics24 \nTable.black \nblack \nTable.blackLite \nblackLite \nTable.white \nwhite"},{"uri":"https://plotly.net/reference/plotly-net-colors-table.html#black","title":"Table.black","content":"Table.black \nblack \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table.html#blackLite","title":"Table.blackLite","content":"Table.blackLite \nblackLite \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table.html#white","title":"Table.white","content":"Table.white \nwhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html","title":"Office","content":"Office \n\n Color palette from Microsoft office 2016\n \nOffice.blue \nblue \nOffice.lightBlue \nlightBlue \nOffice.darkBlue \ndarkBlue \nOffice.red \nred \nOffice.lightRed \nlightRed \nOffice.orange \norange \nOffice.lightOrange \nlightOrange \nOffice.yellow \nyellow \nOffice.lightYellow \nlightYellow \nOffice.darkYellow \ndarkYellow \nOffice.green \ngreen \nOffice.lightGreen \nlightGreen \nOffice.darkGreen \ndarkGreen \nOffice.grey \ngrey \nOffice.lightGrey \nlightGrey"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#blue","title":"Office.blue","content":"Office.blue \nblue \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#lightBlue","title":"Office.lightBlue","content":"Office.lightBlue \nlightBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#darkBlue","title":"Office.darkBlue","content":"Office.darkBlue \ndarkBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#red","title":"Office.red","content":"Office.red \nred \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#lightRed","title":"Office.lightRed","content":"Office.lightRed \nlightRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#orange","title":"Office.orange","content":"Office.orange \norange \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#lightOrange","title":"Office.lightOrange","content":"Office.lightOrange \nlightOrange \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#yellow","title":"Office.yellow","content":"Office.yellow \nyellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#lightYellow","title":"Office.lightYellow","content":"Office.lightYellow \nlightYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#darkYellow","title":"Office.darkYellow","content":"Office.darkYellow \ndarkYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#green","title":"Office.green","content":"Office.green \ngreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#lightGreen","title":"Office.lightGreen","content":"Office.lightGreen \nlightGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#darkGreen","title":"Office.darkGreen","content":"Office.darkGreen \ndarkGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#grey","title":"Office.grey","content":"Office.grey \ngrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-office.html#lightGrey","title":"Office.lightGrey","content":"Office.lightGrey \nlightGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-statisticalgraphics24.html","title":"StatisticalGraphics24","content":"StatisticalGraphics24 \n \nStatisticalGraphics24.a \na"},{"uri":"https://plotly.net/reference/plotly-net-colors-table-statisticalgraphics24.html#a","title":"StatisticalGraphics24.a","content":"StatisticalGraphics24.a \na \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-color.html","title":"Color","content":"Color \n\n Color structure\n \nColor.A \nA \nColor.R \nR \nColor.G \nG \nColor.B \nB"},{"uri":"https://plotly.net/reference/plotly-net-colors-color.html#A","title":"Color.A","content":"Color.A \nA \n\n The alpha component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors-color.html#R","title":"Color.R","content":"Color.R \nR \n\n The red component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors-color.html#G","title":"Color.G","content":"Color.G \nG \n\n The green component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors-color.html#B","title":"Color.B","content":"Color.B \nB \n\n The blue component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-colors-colorcomponent.html","title":"ColorComponent","content":"ColorComponent \n\n Color component ARGB\n \nColorComponent.A \nA \nColorComponent.R \nR \nColorComponent.G \nG \nColorComponent.B \nB"},{"uri":"https://plotly.net/reference/plotly-net-colors-colorcomponent.html#A","title":"ColorComponent.A","content":"ColorComponent.A \nA \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-colorcomponent.html#R","title":"ColorComponent.R","content":"ColorComponent.R \nR \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-colorcomponent.html#G","title":"ColorComponent.G","content":"ColorComponent.G \nG \n"},{"uri":"https://plotly.net/reference/plotly-net-colors-colorcomponent.html#B","title":"ColorComponent.B","content":"ColorComponent.B \nB \n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html","title":"DynObj","content":"DynObj \n \nDynObj.ofDict \nofDict \nDynObj.ofSeq \nofSeq \nDynObj.ofList \nofList \nDynObj.ofArray \nofArray \nDynObj.combine \ncombine \nDynObj.setValue \nsetValue \nDynObj.setValueOpt \nsetValueOpt \nDynObj.setValueOptBy \nsetValueOptBy \nDynObj.tryGetValue \ntryGetValue \nDynObj.remove \nremove"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#ofDict","title":"DynObj.ofDict","content":"DynObj.ofDict \nofDict \n\n New DynamicObj of Dictionary\n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#ofSeq","title":"DynObj.ofSeq","content":"DynObj.ofSeq \nofSeq \n\n New DynamicObj of a sequence of key value\n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#ofList","title":"DynObj.ofList","content":"DynObj.ofList \nofList \n\n New DynamicObj of a list of key value\n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#ofArray","title":"DynObj.ofArray","content":"DynObj.ofArray \nofArray \n\n New DynamicObj of an array of key value\n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#combine","title":"DynObj.combine","content":"DynObj.combine \ncombine \n\n Merges two DynamicObj (Warning: In case of dublicate property names the second member override the first)\n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#setValue","title":"DynObj.setValue","content":"DynObj.setValue \nsetValue \n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#setValueOpt","title":"DynObj.setValueOpt","content":"DynObj.setValueOpt \nsetValueOpt \n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#setValueOptBy","title":"DynObj.setValueOptBy","content":"DynObj.setValueOptBy \nsetValueOptBy \n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#tryGetValue","title":"DynObj.tryGetValue","content":"DynObj.tryGetValue \ntryGetValue \n"},{"uri":"https://plotly.net/reference/plotly-net-dynobj.html#remove","title":"DynObj.remove","content":"DynObj.remove \nremove \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html","title":"GenericChart","content":"GenericChart \n\n Module to represent a GenericChart\n \nGenericChart.Figure \nFigure \nGenericChart.GenericChart \nGenericChart \nGenericChart.toFigure \ntoFigure \nGenericChart.fromFigure \nfromFigure \nGenericChart.getTraces \ngetTraces \nGenericChart.getLayout \ngetLayout \nGenericChart.setLayout \nsetLayout \nGenericChart.addLayout \naddLayout \nGenericChart.tryGetLayoutSize \ntryGetLayoutSize \nGenericChart.getConfig \ngetConfig \nGenericChart.setConfig \nsetConfig \nGenericChart.getDisplayOptions \ngetDisplayOptions \nGenericChart.setDisplayOptions \nsetDisplayOptions \nGenericChart.combine \ncombine \nGenericChart.toChartHTML \ntoChartHTML \nGenericChart.toChartHtmlWithSize \ntoChartHtmlWithSize \nGenericChart.toEmbeddedHTML \ntoEmbeddedHTML \nGenericChart.toChartImage \ntoChartImage \nGenericChart.toEmbeddedImage \ntoEmbeddedImage \nGenericChart.mapTrace \nmapTrace \nGenericChart.mapiTrace \nmapiTrace \nGenericChart.countTrace \ncountTrace \nGenericChart.existsTrace \nexistsTrace \nGenericChart.ofTraceObject \nofTraceObject \nGenericChart.ofTraceObjects \nofTraceObjects \nGenericChart.mapLayout \nmapLayout \nGenericChart.mapDisplayOptions \nmapDisplayOptions"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toFigure","title":"GenericChart.toFigure","content":"GenericChart.toFigure \ntoFigure \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#fromFigure","title":"GenericChart.fromFigure","content":"GenericChart.fromFigure \nfromFigure \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getTraces","title":"GenericChart.getTraces","content":"GenericChart.getTraces \ngetTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getLayout","title":"GenericChart.getLayout","content":"GenericChart.getLayout \ngetLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setLayout","title":"GenericChart.setLayout","content":"GenericChart.setLayout \nsetLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#addLayout","title":"GenericChart.addLayout","content":"GenericChart.addLayout \naddLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#tryGetLayoutSize","title":"GenericChart.tryGetLayoutSize","content":"GenericChart.tryGetLayoutSize \ntryGetLayoutSize \n\n Returns a tuple containing the width and height of a GenericChart\u0027s layout if the property is set, otherwise returns None\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getConfig","title":"GenericChart.getConfig","content":"GenericChart.getConfig \ngetConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setConfig","title":"GenericChart.setConfig","content":"GenericChart.setConfig \nsetConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getDisplayOptions","title":"GenericChart.getDisplayOptions","content":"GenericChart.getDisplayOptions \ngetDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setDisplayOptions","title":"GenericChart.setDisplayOptions","content":"GenericChart.setDisplayOptions \nsetDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#combine","title":"GenericChart.combine","content":"GenericChart.combine \ncombine \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartHTML","title":"GenericChart.toChartHTML","content":"GenericChart.toChartHTML \ntoChartHTML \n\n Converts a GenericChart to it HTML representation. The div layer has a default size of 600 if not specified otherwise.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartHtmlWithSize","title":"GenericChart.toChartHtmlWithSize","content":"GenericChart.toChartHtmlWithSize \ntoChartHtmlWithSize \n\n Converts a GenericChart to it HTML representation and set the size of the div\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toEmbeddedHTML","title":"GenericChart.toEmbeddedHTML","content":"GenericChart.toEmbeddedHTML \ntoEmbeddedHTML \n\n Converts a GenericChart to it HTML representation and embeds it into a html page.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartImage","title":"GenericChart.toChartImage","content":"GenericChart.toChartImage \ntoChartImage \n\n Converts a GenericChart to its Image representation\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toEmbeddedImage","title":"GenericChart.toEmbeddedImage","content":"GenericChart.toEmbeddedImage \ntoEmbeddedImage \n\n Converts a GenericChart to an image and embeds it into a html page\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapTrace","title":"GenericChart.mapTrace","content":"GenericChart.mapTrace \nmapTrace \n\n Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapiTrace","title":"GenericChart.mapiTrace","content":"GenericChart.mapiTrace \nmapiTrace \n\n Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.\n The integer index passed to the function indicates the index (from 0) of element being transformed.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#countTrace","title":"GenericChart.countTrace","content":"GenericChart.countTrace \ncountTrace \n\n Returns the number of traces within the GenericChart\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#existsTrace","title":"GenericChart.existsTrace","content":"GenericChart.existsTrace \nexistsTrace \n\n Returns true if the given chart contains a trace for which the predicate function returns true\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#ofTraceObject","title":"GenericChart.ofTraceObject","content":"GenericChart.ofTraceObject \nofTraceObject \n\n Converts from a trace object and a layout object into GenericChart\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#ofTraceObjects","title":"GenericChart.ofTraceObjects","content":"GenericChart.ofTraceObjects \nofTraceObjects \n\n Converts from a list of trace objects and a layout object into GenericChart\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapLayout","title":"GenericChart.mapLayout","content":"GenericChart.mapLayout \nmapLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapDisplayOptions","title":"GenericChart.mapDisplayOptions","content":"GenericChart.mapDisplayOptions \nmapDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html","title":"Figure","content":"Figure \n \nFigure.create \ncreate \nFigure.Data \nData \nFigure.Layout \nLayout \nFigure.Frames \nFrames"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#create","title":"Figure.create","content":"Figure.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Data","title":"Figure.Data","content":"Figure.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Layout","title":"Figure.Layout","content":"Figure.Layout \nLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Frames","title":"Figure.Frames","content":"Figure.Frames \nFrames \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html","title":"GenericChart","content":"GenericChart \n \nGenericChart.Chart \nChart \nGenericChart.MultiChart \nMultiChart"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html#Chart","title":"GenericChart.Chart","content":"GenericChart.Chart \nChart \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html#MultiChart","title":"GenericChart.MultiChart","content":"GenericChart.MultiChart \nMultiChart \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html","title":"GenericChartExtensions","content":"GenericChartExtensions \n\nExtension methods for providing a Plotly.NET fluent interface pattern for C#\n \nGenericChartExtensions.WithTraceName \nWithTraceName \nGenericChartExtensions.WithAxisAnchor \nWithAxisAnchor \nGenericChartExtensions.WithMarker \nWithMarker \nGenericChartExtensions.WithMarkerStyle \nWithMarkerStyle \nGenericChartExtensions.WithLine \nWithLine \nGenericChartExtensions.WithLineStyle \nWithLineStyle \nGenericChartExtensions.WithXError \nWithXError \nGenericChartExtensions.WithXErrorStyle \nWithXErrorStyle \nGenericChartExtensions.WithYError \nWithYError \nGenericChartExtensions.WithYErrorStyle \nWithYErrorStyle \nGenericChartExtensions.WithZError \nWithZError \nGenericChartExtensions.WithZErrorStyle \nWithZErrorStyle \nGenericChartExtensions.WithX_Axis \nWithX_Axis \nGenericChartExtensions.WithX_AxisStyle \nWithX_AxisStyle \nGenericChartExtensions.WithX_AxisRangeSlider \nWithX_AxisRangeSlider \nGenericChartExtensions.WithY_Axis \nWithY_Axis \nGenericChartExtensions.WithY_AxisStyle \nWithY_AxisStyle \nGenericChartExtensions.WithZ_Axis \nWithZ_Axis \nGenericChartExtensions.WithZ_AxisStyle \nWithZ_AxisStyle \nGenericChartExtensions.withColorBar \nwithColorBar \nGenericChartExtensions.WithColorBarStyle \nWithColorBarStyle \nGenericChartExtensions.WithLayout \nWithLayout \nGenericChartExtensions.WithLayoutGrid \nWithLayoutGrid \nGenericChartExtensions.WithLegend \nWithLegend \nGenericChartExtensions.WithMap \nWithMap \nGenericChartExtensions.WithMapStyle \nWithMapStyle \nGenericChartExtensions.WithMapProjection \nWithMapProjection \nGenericChartExtensions.WithLayoutGridStyle \nWithLayoutGridStyle \nGenericChartExtensions.WithConfig \nWithConfig \nGenericChartExtensions.WithAnnotations \nWithAnnotations \nGenericChartExtensions.WithTitle \nWithTitle \nGenericChartExtensions.WithLegend \nWithLegend \nGenericChartExtensions.WithSize \nWithSize \nGenericChartExtensions.WithMargin \nWithMargin \nGenericChartExtensions.WithMarginSize \nWithMarginSize \nGenericChartExtensions.WithTemplate \nWithTemplate \nGenericChartExtensions.WithShape \nWithShape \nGenericChartExtensions.WithShapes \nWithShapes \nGenericChartExtensions.WithDescription \nWithDescription \nGenericChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \nGenericChartExtensions.WithHeadTags \nWithHeadTags \nGenericChartExtensions.WithMathTex \nWithMathTex \nGenericChartExtensions.SaveHtmlAs \nSaveHtmlAs \nGenericChartExtensions.Show \nShow \nGenericChartExtensions.ShowAsImage \nShowAsImage"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTraceName","title":"GenericChartExtensions.WithTraceName","content":"GenericChartExtensions.WithTraceName \nWithTraceName \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAxisAnchor","title":"GenericChartExtensions.WithAxisAnchor","content":"GenericChartExtensions.WithAxisAnchor \nWithAxisAnchor \n\n Set the axis anchor id the trace is belonging to\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarker","title":"GenericChartExtensions.WithMarker","content":"GenericChartExtensions.WithMarker \nWithMarker \n\n Apply styling to the Marker(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarkerStyle","title":"GenericChartExtensions.WithMarkerStyle","content":"GenericChartExtensions.WithMarkerStyle \nWithMarkerStyle \n\n Apply styling to the Marker(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLine","title":"GenericChartExtensions.WithLine","content":"GenericChartExtensions.WithLine \nWithLine \n\n Apply styling to the Line(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLineStyle","title":"GenericChartExtensions.WithLineStyle","content":"GenericChartExtensions.WithLineStyle \nWithLineStyle \n\n Apply styling to the Line(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXError","title":"GenericChartExtensions.WithXError","content":"GenericChartExtensions.WithXError \nWithXError \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXErrorStyle","title":"GenericChartExtensions.WithXErrorStyle","content":"GenericChartExtensions.WithXErrorStyle \nWithXErrorStyle \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYError","title":"GenericChartExtensions.WithYError","content":"GenericChartExtensions.WithYError \nWithYError \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYErrorStyle","title":"GenericChartExtensions.WithYErrorStyle","content":"GenericChartExtensions.WithYErrorStyle \nWithYErrorStyle \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZError","title":"GenericChartExtensions.WithZError","content":"GenericChartExtensions.WithZError \nWithZError \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZErrorStyle","title":"GenericChartExtensions.WithZErrorStyle","content":"GenericChartExtensions.WithZErrorStyle \nWithZErrorStyle \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithX_Axis","title":"GenericChartExtensions.WithX_Axis","content":"GenericChartExtensions.WithX_Axis \nWithX_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithX_AxisStyle","title":"GenericChartExtensions.WithX_AxisStyle","content":"GenericChartExtensions.WithX_AxisStyle \nWithX_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithX_AxisRangeSlider","title":"GenericChartExtensions.WithX_AxisRangeSlider","content":"GenericChartExtensions.WithX_AxisRangeSlider \nWithX_AxisRangeSlider \n\n Sets the range slider for the xAxis\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithY_Axis","title":"GenericChartExtensions.WithY_Axis","content":"GenericChartExtensions.WithY_Axis \nWithY_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithY_AxisStyle","title":"GenericChartExtensions.WithY_AxisStyle","content":"GenericChartExtensions.WithY_AxisStyle \nWithY_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZ_Axis","title":"GenericChartExtensions.WithZ_Axis","content":"GenericChartExtensions.WithZ_Axis \nWithZ_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZ_AxisStyle","title":"GenericChartExtensions.WithZ_AxisStyle","content":"GenericChartExtensions.WithZ_AxisStyle \nWithZ_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#withColorBar","title":"GenericChartExtensions.withColorBar","content":"GenericChartExtensions.withColorBar \nwithColorBar \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithColorBarStyle","title":"GenericChartExtensions.WithColorBarStyle","content":"GenericChartExtensions.WithColorBarStyle \nWithColorBarStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayout","title":"GenericChartExtensions.WithLayout","content":"GenericChartExtensions.WithLayout \nWithLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutGrid","title":"GenericChartExtensions.WithLayoutGrid","content":"GenericChartExtensions.WithLayoutGrid \nWithLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLegend","title":"GenericChartExtensions.WithLegend","content":"GenericChartExtensions.WithLegend \nWithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMap","title":"GenericChartExtensions.WithMap","content":"GenericChartExtensions.WithMap \nWithMap \n\n Sets a map for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMapStyle","title":"GenericChartExtensions.WithMapStyle","content":"GenericChartExtensions.WithMapStyle \nWithMapStyle \n\n Sets the map style for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n\n Parameters      :\n\n FitBounds       : Determines if and how this subplot\u0027s view settings are auto-computed to fit trace data\n\n Resolution      : Sets the resolution of the base layers\n\n Scope           : Set the scope of the map.\n\n Projection      : Determines the type of projection used to display the map\n\n Center          : Sets the (lon,lat) coordinates of the map\u0027s center. By default, the map\u0027s longitude center lies at the middle of the longitude range for scoped projection and above \u0060projection.rotation.lon\u0060 otherwise. For all projection types, the map\u0027s latitude center lies at the middle of the latitude range by default.\n\n Visible         : Wether or not the base layers are visible\n\n Domain          : The domain of this geo subplot\n\n ShowCoastLine   : Sets whether or not the coastlines are drawn.\n\n CoastLineColor  : Sets the coastline color.\n\n CoastLineWidth  : Sets the coastline stroke width (in px).\n\n ShowLand        : Sets whether or not land masses are filled in color.\n\n LandColor       : Sets the land mass color.\n\n ShowOcean       : Sets whether or not oceans are filled in color.\n\n OceanColor      : Sets the ocean color\n\n ShowLakes       : Sets whether or not lakes are drawn.\n\n LakeColor       : Sets the color of the lakes.\n\n ShowRivers      : Sets whether or not rivers are drawn.\n\n RiverColor      : Sets color of the rivers.\n\n RiverWidth      : Sets the stroke width (in px) of the rivers.\n\n ShowCountries   : Sets whether or not country boundaries are drawn.\n\n CountryColor    : Sets line color of the country boundaries.\n\n CountryWidth    : Sets line width (in px) of the country boundaries.\n\n ShowSubunits    : Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.\n\n SubunitColor    : Sets the color of the subunits boundaries.\n\n SubunitWidth    : Sets the stroke width (in px) of the subunits boundaries.\n\n ShowFrame       : Sets whether or not a frame is drawn around the map.\n\n FrameColor      : Sets the color the frame.\n\n FrameWidth      : Sets the stroke width (in px) of the frame.\n\n BgColor         : Set the background color of the map\n\n LatAxis         : Sets the latitudinal axis for this geo trace\n\n LonAxis         : Sets the longitudinal axis for this geo trace\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMapProjection","title":"GenericChartExtensions.WithMapProjection","content":"GenericChartExtensions.WithMapProjection \nWithMapProjection \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutGridStyle","title":"GenericChartExtensions.WithLayoutGridStyle","content":"GenericChartExtensions.WithLayoutGridStyle \nWithLayoutGridStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithConfig","title":"GenericChartExtensions.WithConfig","content":"GenericChartExtensions.WithConfig \nWithConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAnnotations","title":"GenericChartExtensions.WithAnnotations","content":"GenericChartExtensions.WithAnnotations \nWithAnnotations \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTitle","title":"GenericChartExtensions.WithTitle","content":"GenericChartExtensions.WithTitle \nWithTitle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLegend","title":"GenericChartExtensions.WithLegend","content":"GenericChartExtensions.WithLegend \nWithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithSize","title":"GenericChartExtensions.WithSize","content":"GenericChartExtensions.WithSize \nWithSize \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMargin","title":"GenericChartExtensions.WithMargin","content":"GenericChartExtensions.WithMargin \nWithMargin \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarginSize","title":"GenericChartExtensions.WithMarginSize","content":"GenericChartExtensions.WithMarginSize \nWithMarginSize \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTemplate","title":"GenericChartExtensions.WithTemplate","content":"GenericChartExtensions.WithTemplate \nWithTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithShape","title":"GenericChartExtensions.WithShape","content":"GenericChartExtensions.WithShape \nWithShape \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithShapes","title":"GenericChartExtensions.WithShapes","content":"GenericChartExtensions.WithShapes \nWithShapes \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithDescription","title":"GenericChartExtensions.WithDescription","content":"GenericChartExtensions.WithDescription \nWithDescription \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAdditionalHeadTags","title":"GenericChartExtensions.WithAdditionalHeadTags","content":"GenericChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \n\n Adds the given additional script tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithHeadTags","title":"GenericChartExtensions.WithHeadTags","content":"GenericChartExtensions.WithHeadTags \nWithHeadTags \n\n Sets the given additional script tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMathTex","title":"GenericChartExtensions.WithMathTex","content":"GenericChartExtensions.WithMathTex \nWithMathTex \n\n Adds the necessary script tags to render tex strings to the chart\u0027s DisplayOptions\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#SaveHtmlAs","title":"GenericChartExtensions.SaveHtmlAs","content":"GenericChartExtensions.SaveHtmlAs \nSaveHtmlAs \n\n Save chart as html single page\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#Show","title":"GenericChartExtensions.Show","content":"GenericChartExtensions.Show \nShow \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#ShowAsImage","title":"GenericChartExtensions.ShowAsImage","content":"GenericChartExtensions.ShowAsImage \nShowAsImage \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-html.html","title":"HTML","content":"HTML \n\n HTML template for Plotly.js\n \nHTML.doc \ndoc \nHTML.chart \nchart \nHTML.staticChart \nstaticChart"},{"uri":"https://plotly.net/reference/plotly-net-html.html#doc","title":"HTML.doc","content":"HTML.doc \ndoc \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html#chart","title":"HTML.chart","content":"HTML.chart \nchart \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html#staticChart","title":"HTML.staticChart","content":"HTML.staticChart \nstaticChart \n"},{"uri":"https://plotly.net/reference/plotly-net-ligth.html","title":"Ligth","content":"Ligth \n\n Module containing plotly light modulation for 3d \n \nLigth.Lighting \nLighting \nLigth.Lightposition \nLightposition"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lighting.html","title":"Lighting","content":"Lighting \n\n Lighting type inherits from dynamic object\n \nLighting.( .ctor ) \n( .ctor ) \nLighting.init \ninit \nLighting.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lighting.html#( .ctor )","title":"Lighting.( .ctor )","content":"Lighting.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lighting.html#init","title":"Lighting.init","content":"Lighting.init \ninit \n\n Initialized Lighting object\n"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lighting.html#style","title":"Lighting.style","content":"Lighting.style \nstyle \n\n Applies the styles to Lighting()\n"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lightposition.html","title":"Lightposition","content":"Lightposition \n\n Lighting type inherits from dynamic object\n \nLightposition.( .ctor ) \n( .ctor ) \nLightposition.init \ninit \nLightposition.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lightposition.html#( .ctor )","title":"Lightposition.( .ctor )","content":"Lightposition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lightposition.html#init","title":"Lightposition.init","content":"Lightposition.init \ninit \n\n Initialized Lightposition object\n"},{"uri":"https://plotly.net/reference/plotly-net-ligth-lightposition.html#style","title":"Lightposition.style","content":"Lightposition.style \nstyle \n\n Applies the styles to Lightposition()\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html","title":"ReflectionHelper","content":"ReflectionHelper \n \nReflectionHelper.getPublicProperties \ngetPublicProperties \nReflectionHelper.buildApply \nbuildApply \nReflectionHelper.optBuildApply \noptBuildApply \nReflectionHelper.optApply \noptApply \nReflectionHelper.tryGetPropertyName \ntryGetPropertyName \nReflectionHelper.tryGetPropertyInfo \ntryGetPropertyInfo \nReflectionHelper.trySetPropertyValue \ntrySetPropertyValue \nReflectionHelper.tryGetPropertyValue \ntryGetPropertyValue \nReflectionHelper.tryGetPropertyValueAs \ntryGetPropertyValueAs \nReflectionHelper.tryUpdatePropertyValueFromName \ntryUpdatePropertyValueFromName \nReflectionHelper.tryUpdatePropertyValue \ntryUpdatePropertyValue \nReflectionHelper.updatePropertyValueAndIgnore \nupdatePropertyValueAndIgnore \nReflectionHelper.removeProperty \nremoveProperty"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#getPublicProperties","title":"ReflectionHelper.getPublicProperties","content":"ReflectionHelper.getPublicProperties \ngetPublicProperties \n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#buildApply","title":"ReflectionHelper.buildApply","content":"ReflectionHelper.buildApply \nbuildApply \n\n Creates an instance of the Object according to applyStyle and applies the function..\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#optBuildApply","title":"ReflectionHelper.optBuildApply","content":"ReflectionHelper.optBuildApply \noptBuildApply \n\n Applies \u0027applyStyle\u0027 to item option. If None it creates a new instance.\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#optApply","title":"ReflectionHelper.optApply","content":"ReflectionHelper.optApply \noptApply \n\n Applies Some \u0027applyStyle\u0027 to item. If None it returns \u0027item\u0027 unchanged.\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#tryGetPropertyName","title":"ReflectionHelper.tryGetPropertyName","content":"ReflectionHelper.tryGetPropertyName \ntryGetPropertyName \n\n Returns the proptery name from quotation expression\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#tryGetPropertyInfo","title":"ReflectionHelper.tryGetPropertyInfo","content":"ReflectionHelper.tryGetPropertyInfo \ntryGetPropertyInfo \n\n Try to get the PropertyInfo by name using reflection\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#trySetPropertyValue","title":"ReflectionHelper.trySetPropertyValue","content":"ReflectionHelper.trySetPropertyValue \ntrySetPropertyValue \n\n Sets property value using reflection\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#tryGetPropertyValue","title":"ReflectionHelper.tryGetPropertyValue","content":"ReflectionHelper.tryGetPropertyValue \ntryGetPropertyValue \n\n Gets property value as option using reflection\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#tryGetPropertyValueAs","title":"ReflectionHelper.tryGetPropertyValueAs","content":"ReflectionHelper.tryGetPropertyValueAs \ntryGetPropertyValueAs \n\n Gets property value as \u0027a option using reflection. Cast to \u0027a\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#tryUpdatePropertyValueFromName","title":"ReflectionHelper.tryUpdatePropertyValueFromName","content":"ReflectionHelper.tryUpdatePropertyValueFromName \ntryUpdatePropertyValueFromName \n\n Updates property value by given function\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#tryUpdatePropertyValue","title":"ReflectionHelper.tryUpdatePropertyValue","content":"ReflectionHelper.tryUpdatePropertyValue \ntryUpdatePropertyValue \n\n Updates property value by given function\n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#updatePropertyValueAndIgnore","title":"ReflectionHelper.updatePropertyValueAndIgnore","content":"ReflectionHelper.updatePropertyValueAndIgnore \nupdatePropertyValueAndIgnore \n"},{"uri":"https://plotly.net/reference/plotly-net-reflectionhelper.html#removeProperty","title":"ReflectionHelper.removeProperty","content":"ReflectionHelper.removeProperty \nremoveProperty \n\n Removes property \n"},{"uri":"https://plotly.net/reference/plotly-net-sankeyextension.html","title":"SankeyExtension","content":"SankeyExtension \n \nSankeyExtension.Sankey \nSankey \nSankeyExtension.Sankey \nSankey"},{"uri":"https://plotly.net/reference/plotly-net-sankeyextension.html#Sankey","title":"SankeyExtension.Sankey","content":"SankeyExtension.Sankey \nSankey \n"},{"uri":"https://plotly.net/reference/plotly-net-sankeyextension.html#Sankey","title":"SankeyExtension.Sankey","content":"SankeyExtension.Sankey \nSankey \n"},{"uri":"https://plotly.net/reference/plotly-net-seq.html","title":"Seq","content":"Seq \n \nSeq.unzip \nunzip \nSeq.unzip3 \nunzip3"},{"uri":"https://plotly.net/reference/plotly-net-seq.html#unzip","title":"Seq.unzip","content":"Seq.unzip \nunzip \n\n Splits a sequence of pairs into two sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-seq.html#unzip3","title":"Seq.unzip3","content":"Seq.unzip3 \nunzip3 \n\n Splits a sequence of triples into three sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam.html","title":"StyleParam","content":"StyleParam \n \nStyleParam.ModeUtils \nModeUtils \nStyleParam.Align \nAlign \nStyleParam.ArrowHead \nArrowHead \nStyleParam.AutoRange \nAutoRange \nStyleParam.AxisAnchorId \nAxisAnchorId \nStyleParam.AxisId \nAxisId \nStyleParam.AxisType \nAxisType \nStyleParam.Barmode \nBarmode \nStyleParam.BoxMean \nBoxMean \nStyleParam.Boxpoints \nBoxpoints \nStyleParam.BranchValues \nBranchValues \nStyleParam.Calendar \nCalendar \nStyleParam.CategoryOrder \nCategoryOrder \nStyleParam.Colorscale \nColorscale \nStyleParam.ConnectorMode \nConnectorMode \nStyleParam.CumulativeDirection \nCumulativeDirection \nStyleParam.Currentbin \nCurrentbin \nStyleParam.Delaunayaxis \nDelaunayaxis \nStyleParam.Direction \nDirection \nStyleParam.Dragmode \nDragmode \nStyleParam.DrawingStyle \nDrawingStyle \nStyleParam.ExponentFormat \nExponentFormat \nStyleParam.Fill \nFill \nStyleParam.FontFamily \nFontFamily \nStyleParam.GeoFitBounds \nGeoFitBounds \nStyleParam.GeoProjectionType \nGeoProjectionType \nStyleParam.GeoResolution \nGeoResolution \nStyleParam.GeoScope \nGeoScope \nStyleParam.GroupNorm \nGroupNorm \nStyleParam.HistFunc \nHistFunc \nStyleParam.HistNorm \nHistNorm \nStyleParam.HorizontalAlign \nHorizontalAlign \nStyleParam.Hovermode \nHovermode \nStyleParam.ImageFormat \nImageFormat \nStyleParam.Jitterpoints \nJitterpoints \nStyleParam.Layer \nLayer \nStyleParam.LayoutGridPattern \nLayoutGridPattern \nStyleParam.LayoutGridRowOrder \nLayoutGridRowOrder \nStyleParam.LayoutGridXSide \nLayoutGridXSide \nStyleParam.LayoutGridYSide \nLayoutGridYSide \nStyleParam.LegendXAnchorPosition \nLegendXAnchorPosition \nStyleParam.LegendYAnchorPosition \nLegendYAnchorPosition \nStyleParam.LocationFormat \nLocationFormat \nStyleParam.Mirror \nMirror \nStyleParam.Mode \nMode \nStyleParam.Orientation \nOrientation \nStyleParam.QuartileMethod \nQuartileMethod \nStyleParam.Range \nRange \nStyleParam.RangeMode \nRangeMode \nStyleParam.Shape \nShape \nStyleParam.ShapeType \nShapeType \nStyleParam.ShowExponent \nShowExponent \nStyleParam.ShowTickOption \nShowTickOption \nStyleParam.Side \nSide \nStyleParam.SizeMode \nSizeMode \nStyleParam.SmoothAlg \nSmoothAlg \nStyleParam.Symbol \nSymbol \nStyleParam.SymbolStyle \nSymbolStyle \nStyleParam.TextInfo \nTextInfo \nStyleParam.TextInfoPosition \nTextInfoPosition \nStyleParam.TextPosition \nTextPosition \nStyleParam.TickMode \nTickMode \nStyleParam.TickOptions \nTickOptions \nStyleParam.TraceItemClickOptions \nTraceItemClickOptions \nStyleParam.TraceItemSizing \nTraceItemSizing \nStyleParam.TraceOrder \nTraceOrder \nStyleParam.TreemapEdgeShape \nTreemapEdgeShape \nStyleParam.TreemapTilingPacking \nTreemapTilingPacking \nStyleParam.UnitMode \nUnitMode \nStyleParam.VerticalAlign \nVerticalAlign \nStyleParam.Visible \nVisible \nStyleParam.WaterfallMeasure \nWaterfallMeasure"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html","title":"ModeUtils","content":"ModeUtils \n\n Functions to manipulate StyleParam Mode\n \nModeUtils.showText \nshowText \nModeUtils.showMarker \nshowMarker \nModeUtils.showLines \nshowLines"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showText","title":"ModeUtils.showText","content":"ModeUtils.showText \nshowText \n\n Takes the current mode and adds the Text flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showMarker","title":"ModeUtils.showMarker","content":"ModeUtils.showMarker \nshowMarker \n\n Takes the current mode and adds the Markers flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showLines","title":"ModeUtils.showLines","content":"ModeUtils.showLines \nshowLines \n\n Takes the current mode and adds the Lines flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html","title":"Align","content":"Align \n\n Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\n \nAlign.toString \ntoString \nAlign.convert \nconvert \nAlign.Auto \nAuto \nAlign.Left \nLeft \nAlign.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#toString","title":"Align.toString","content":"Align.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#convert","title":"Align.convert","content":"Align.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Auto","title":"Align.Auto","content":"Align.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Left","title":"Align.Left","content":"Align.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Right","title":"Align.Right","content":"Align.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html","title":"ArrowHead","content":"ArrowHead \n \nArrowHead.toEnum \ntoEnum \nArrowHead.convert \nconvert \nArrowHead.TriangleShort \nTriangleShort \nArrowHead.TriangleTall \nTriangleTall \nArrowHead.Barbed \nBarbed \nArrowHead.SimpleShort \nSimpleShort \nArrowHead.SimpleTall \nSimpleTall \nArrowHead.Cirle \nCirle \nArrowHead.Square \nSquare \nArrowHead.LineOnly \nLineOnly"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#toEnum","title":"ArrowHead.toEnum","content":"ArrowHead.toEnum \ntoEnum \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#convert","title":"ArrowHead.convert","content":"ArrowHead.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#TriangleShort","title":"ArrowHead.TriangleShort","content":"ArrowHead.TriangleShort \nTriangleShort \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#TriangleTall","title":"ArrowHead.TriangleTall","content":"ArrowHead.TriangleTall \nTriangleTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Barbed","title":"ArrowHead.Barbed","content":"ArrowHead.Barbed \nBarbed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#SimpleShort","title":"ArrowHead.SimpleShort","content":"ArrowHead.SimpleShort \nSimpleShort \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#SimpleTall","title":"ArrowHead.SimpleTall","content":"ArrowHead.SimpleTall \nSimpleTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Cirle","title":"ArrowHead.Cirle","content":"ArrowHead.Cirle \nCirle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Square","title":"ArrowHead.Square","content":"ArrowHead.Square \nSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#LineOnly","title":"ArrowHead.LineOnly","content":"ArrowHead.LineOnly \nLineOnly \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html","title":"AutoRange","content":"AutoRange \n\n Determines whether or not the range of this axis is computed in relation to the input data. See \u0060rangemode\u0060 for more info. If \u0060range\u0060 is provided, then \u0060autorange\u0060 is set to \u0022false\u0022.\n \nAutoRange.toString \ntoString \nAutoRange.convert \nconvert \nAutoRange.True \nTrue \nAutoRange.False \nFalse \nAutoRange.Reversed \nReversed"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#toString","title":"AutoRange.toString","content":"AutoRange.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#convert","title":"AutoRange.convert","content":"AutoRange.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#True","title":"AutoRange.True","content":"AutoRange.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#False","title":"AutoRange.False","content":"AutoRange.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#Reversed","title":"AutoRange.Reversed","content":"AutoRange.Reversed \nReversed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisanchorid.html","title":"AxisAnchorId","content":"AxisAnchorId \n \nAxisAnchorId.toString \ntoString \nAxisAnchorId.convert \nconvert \nAxisAnchorId.X \nX \nAxisAnchorId.Y \nY \nAxisAnchorId.Z \nZ \nAxisAnchorId.Free \nFree"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisanchorid.html#toString","title":"AxisAnchorId.toString","content":"AxisAnchorId.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisanchorid.html#convert","title":"AxisAnchorId.convert","content":"AxisAnchorId.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisanchorid.html#X","title":"AxisAnchorId.X","content":"AxisAnchorId.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisanchorid.html#Y","title":"AxisAnchorId.Y","content":"AxisAnchorId.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisanchorid.html#Z","title":"AxisAnchorId.Z","content":"AxisAnchorId.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisanchorid.html#Free","title":"AxisAnchorId.Free","content":"AxisAnchorId.Free \nFree \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisid.html","title":"AxisId","content":"AxisId \n \nAxisId.toString \ntoString \nAxisId.convert \nconvert \nAxisId.X \nX \nAxisId.Y \nY \nAxisId.Z \nZ"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisid.html#toString","title":"AxisId.toString","content":"AxisId.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisid.html#convert","title":"AxisId.convert","content":"AxisId.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisid.html#X","title":"AxisId.X","content":"AxisId.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisid.html#Y","title":"AxisId.Y","content":"AxisId.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisid.html#Z","title":"AxisId.Z","content":"AxisId.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html","title":"AxisType","content":"AxisType \n\n Sets the axis type. By default (Auto), plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\n \nAxisType.toString \ntoString \nAxisType.convert \nconvert \nAxisType.Auto \nAuto \nAxisType.Linear \nLinear \nAxisType.Log \nLog \nAxisType.Date \nDate \nAxisType.Category \nCategory"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#toString","title":"AxisType.toString","content":"AxisType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#convert","title":"AxisType.convert","content":"AxisType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Auto","title":"AxisType.Auto","content":"AxisType.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Linear","title":"AxisType.Linear","content":"AxisType.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Log","title":"AxisType.Log","content":"AxisType.Log \nLog \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Date","title":"AxisType.Date","content":"AxisType.Date \nDate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Category","title":"AxisType.Category","content":"AxisType.Category \nCategory \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html","title":"Barmode","content":"Barmode \n\n For bar and histogram plots only. This sets how multiple bar objects are plotted together. In other words, this defines how bars at the same location\n appear on the plot. If set to \u0027stack\u0027 the bars are stacked on top of one another. If set to \u0027group\u0027, the bars are plotted next to one another, centered \n around the shared location. If set to \u0027overlay\u0027, the bars are simply plotted over one another, you may need to set the opacity to see this.\n \nBarmode.toString \ntoString \nBarmode.convert \nconvert \nBarmode.Stack \nStack \nBarmode.Group \nGroup \nBarmode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#toString","title":"Barmode.toString","content":"Barmode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#convert","title":"Barmode.convert","content":"Barmode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Stack","title":"Barmode.Stack","content":"Barmode.Stack \nStack \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Group","title":"Barmode.Group","content":"Barmode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Overlay","title":"Barmode.Overlay","content":"Barmode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html","title":"BoxMean","content":"BoxMean \n \nBoxMean.convert \nconvert \nBoxMean.True \nTrue \nBoxMean.False \nFalse \nBoxMean.SD \nSD"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#convert","title":"BoxMean.convert","content":"BoxMean.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#True","title":"BoxMean.True","content":"BoxMean.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#False","title":"BoxMean.False","content":"BoxMean.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#SD","title":"BoxMean.SD","content":"BoxMean.SD \nSD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html","title":"Boxpoints","content":"Boxpoints \n \nBoxpoints.convert \nconvert \nBoxpoints.Outliers \nOutliers \nBoxpoints.All \nAll \nBoxpoints.Suspectedoutliers \nSuspectedoutliers \nBoxpoints.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#convert","title":"Boxpoints.convert","content":"Boxpoints.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#Outliers","title":"Boxpoints.Outliers","content":"Boxpoints.Outliers \nOutliers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#All","title":"Boxpoints.All","content":"Boxpoints.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#Suspectedoutliers","title":"Boxpoints.Suspectedoutliers","content":"Boxpoints.Suspectedoutliers \nSuspectedoutliers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#False","title":"Boxpoints.False","content":"Boxpoints.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html","title":"BranchValues","content":"BranchValues \n \nBranchValues.toString \ntoString \nBranchValues.convert \nconvert \nBranchValues.Remainder \nRemainder \nBranchValues.Total \nTotal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#toString","title":"BranchValues.toString","content":"BranchValues.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#convert","title":"BranchValues.convert","content":"BranchValues.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Remainder","title":"BranchValues.Remainder","content":"BranchValues.Remainder \nRemainder \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Total","title":"BranchValues.Total","content":"BranchValues.Total \nTotal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html","title":"Calendar","content":"Calendar \n\n Sets the calendar system to use with \u0060x y z\u0060 date data. Default: \u0022gregorian\u0022\n \nCalendar.toString \ntoString \nCalendar.convert \nconvert \nCalendar.Gregorian \nGregorian \nCalendar.Chinese \nChinese \nCalendar.Coptic \nCoptic \nCalendar.Discworld \nDiscworld \nCalendar.Ethiopian \nEthiopian \nCalendar.Hebrew \nHebrew \nCalendar.Islamic \nIslamic \nCalendar.Julian \nJulian \nCalendar.Mayan \nMayan \nCalendar.Nanakshahi \nNanakshahi \nCalendar.Nepali \nNepali \nCalendar.Persian \nPersian \nCalendar.Jalali \nJalali \nCalendar.Taiwan \nTaiwan \nCalendar.Thai \nThai \nCalendar.Ummalqura \nUmmalqura"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#toString","title":"Calendar.toString","content":"Calendar.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#convert","title":"Calendar.convert","content":"Calendar.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Gregorian","title":"Calendar.Gregorian","content":"Calendar.Gregorian \nGregorian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Chinese","title":"Calendar.Chinese","content":"Calendar.Chinese \nChinese \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Coptic","title":"Calendar.Coptic","content":"Calendar.Coptic \nCoptic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Discworld","title":"Calendar.Discworld","content":"Calendar.Discworld \nDiscworld \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Ethiopian","title":"Calendar.Ethiopian","content":"Calendar.Ethiopian \nEthiopian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Hebrew","title":"Calendar.Hebrew","content":"Calendar.Hebrew \nHebrew \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Islamic","title":"Calendar.Islamic","content":"Calendar.Islamic \nIslamic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Julian","title":"Calendar.Julian","content":"Calendar.Julian \nJulian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Mayan","title":"Calendar.Mayan","content":"Calendar.Mayan \nMayan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Nanakshahi","title":"Calendar.Nanakshahi","content":"Calendar.Nanakshahi \nNanakshahi \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Nepali","title":"Calendar.Nepali","content":"Calendar.Nepali \nNepali \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Persian","title":"Calendar.Persian","content":"Calendar.Persian \nPersian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Jalali","title":"Calendar.Jalali","content":"Calendar.Jalali \nJalali \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Taiwan","title":"Calendar.Taiwan","content":"Calendar.Taiwan \nTaiwan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Thai","title":"Calendar.Thai","content":"Calendar.Thai \nThai \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Ummalqura","title":"Calendar.Ummalqura","content":"Calendar.Ummalqura \nUmmalqura \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html","title":"CategoryOrder","content":"CategoryOrder \n\n Specifies the ordering logic for the case of categorical variables. By default, plotly uses \u0022trace\u0022, which specifies the order that is present in the data supplied. Set \u0060categoryorder\u0060 to \u0022category ascending\u0022 or \u0022category descending\u0022 if order should be determined by the alphanumerical order of the category names. Set \u0060categoryorder\u0060 to \u0022array\u0022 to derive the ordering from the attribute \u0060categoryarray\u0060. \n If a category is not found in the \u0060categoryarray\u0060 array, the sorting behavior for that attribute will be identical to the \u0022trace\u0022 mode. The unspecified categories will follow the categories in \u0060categoryarray\u0060.\n \nCategoryOrder.toString \ntoString \nCategoryOrder.convert \nconvert \nCategoryOrder.Trace \nTrace \nCategoryOrder.Ascending \nAscending \nCategoryOrder.Descending \nDescending \nCategoryOrder.Array \nArray"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#toString","title":"CategoryOrder.toString","content":"CategoryOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#convert","title":"CategoryOrder.convert","content":"CategoryOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Trace","title":"CategoryOrder.Trace","content":"CategoryOrder.Trace \nTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Ascending","title":"CategoryOrder.Ascending","content":"CategoryOrder.Ascending \nAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Descending","title":"CategoryOrder.Descending","content":"CategoryOrder.Descending \nDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Array","title":"CategoryOrder.Array","content":"CategoryOrder.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html","title":"Colorscale","content":"Colorscale \n\n The colorscale must be a collection containing a mapping of a normalized value (between 0.0 and 1.0) to it\u0027s color. At minimum, a mapping for the lowest (0.0) and highest (1.0) values are required. \n \nColorscale.convert \nconvert \nColorscale.Custom \nCustom \nColorscale.RdBu \nRdBu \nColorscale.Earth \nEarth \nColorscale.Blackbody \nBlackbody \nColorscale.YIOrRd \nYIOrRd \nColorscale.YIGnBu \nYIGnBu \nColorscale.Bluered \nBluered \nColorscale.Portland \nPortland \nColorscale.Electric \nElectric \nColorscale.Jet \nJet \nColorscale.Hot \nHot \nColorscale.Greys \nGreys \nColorscale.Greens \nGreens \nColorscale.Picnic \nPicnic"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#convert","title":"Colorscale.convert","content":"Colorscale.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Custom","title":"Colorscale.Custom","content":"Colorscale.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#RdBu","title":"Colorscale.RdBu","content":"Colorscale.RdBu \nRdBu \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Earth","title":"Colorscale.Earth","content":"Colorscale.Earth \nEarth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Blackbody","title":"Colorscale.Blackbody","content":"Colorscale.Blackbody \nBlackbody \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#YIOrRd","title":"Colorscale.YIOrRd","content":"Colorscale.YIOrRd \nYIOrRd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#YIGnBu","title":"Colorscale.YIGnBu","content":"Colorscale.YIGnBu \nYIGnBu \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Bluered","title":"Colorscale.Bluered","content":"Colorscale.Bluered \nBluered \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Portland","title":"Colorscale.Portland","content":"Colorscale.Portland \nPortland \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Electric","title":"Colorscale.Electric","content":"Colorscale.Electric \nElectric \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Jet","title":"Colorscale.Jet","content":"Colorscale.Jet \nJet \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Hot","title":"Colorscale.Hot","content":"Colorscale.Hot \nHot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Greys","title":"Colorscale.Greys","content":"Colorscale.Greys \nGreys \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Greens","title":"Colorscale.Greens","content":"Colorscale.Greens \nGreens \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Picnic","title":"Colorscale.Picnic","content":"Colorscale.Picnic \nPicnic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html","title":"ConnectorMode","content":"ConnectorMode \n\nThe shape of connector lines in Waterfall charts.\n \nConnectorMode.toString \ntoString \nConnectorMode.convert \nconvert \nConnectorMode.Spanning \nSpanning \nConnectorMode.Between \nBetween"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#toString","title":"ConnectorMode.toString","content":"ConnectorMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#convert","title":"ConnectorMode.convert","content":"ConnectorMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Spanning","title":"ConnectorMode.Spanning","content":"ConnectorMode.Spanning \nSpanning \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Between","title":"ConnectorMode.Between","content":"ConnectorMode.Between \nBetween \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html","title":"CumulativeDirection","content":"CumulativeDirection \n\n Only applies if cumulative is enabled. If \u0022increasing\u0022 (default) we sum all prior bins, so the result increases from left to right.\n If \u0022decreasing\u0022 we sum later bins so the result decreases from left to right.  default: \u0022increasing\u0022\n \nCumulativeDirection.toString \ntoString \nCumulativeDirection.convert \nconvert \nCumulativeDirection.Increasing \nIncreasing \nCumulativeDirection.Decreasing \nDecreasing"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#toString","title":"CumulativeDirection.toString","content":"CumulativeDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#convert","title":"CumulativeDirection.convert","content":"CumulativeDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Increasing","title":"CumulativeDirection.Increasing","content":"CumulativeDirection.Increasing \nIncreasing \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Decreasing","title":"CumulativeDirection.Decreasing","content":"CumulativeDirection.Decreasing \nDecreasing \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html","title":"Currentbin","content":"Currentbin \n\n Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in \n the current cumulative value. \u0022include\u0022 is the default for compatibility with various other tools, however it introduces\n a half-bin bias to the results. \u0022exclude\u0022 makes the opposite half-bin bias, and \u0022half\u0022 removes it.\n \nCurrentbin.toString \ntoString \nCurrentbin.convert \nconvert \nCurrentbin.Include \nInclude \nCurrentbin.Exclude \nExclude \nCurrentbin.Half \nHalf"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#toString","title":"Currentbin.toString","content":"Currentbin.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#convert","title":"Currentbin.convert","content":"Currentbin.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Include","title":"Currentbin.Include","content":"Currentbin.Include \nInclude \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Exclude","title":"Currentbin.Exclude","content":"Currentbin.Exclude \nExclude \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Half","title":"Currentbin.Half","content":"Currentbin.Half \nHalf \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html","title":"Delaunayaxis","content":"Delaunayaxis \n\n Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation.\n It has an effect if \u0060i\u0060, \u0060j\u0060, \u0060k\u0060 are not provided and \u0060alphahull\u0060 is set to indicate Delaunay triangulation. \n Default is \u0022z\u0022\n \nDelaunayaxis.toString \ntoString \nDelaunayaxis.convert \nconvert \nDelaunayaxis.X \nX \nDelaunayaxis.Y \nY \nDelaunayaxis.Z \nZ"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#toString","title":"Delaunayaxis.toString","content":"Delaunayaxis.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#convert","title":"Delaunayaxis.convert","content":"Delaunayaxis.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#X","title":"Delaunayaxis.X","content":"Delaunayaxis.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Y","title":"Delaunayaxis.Y","content":"Delaunayaxis.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Z","title":"Delaunayaxis.Z","content":"Delaunayaxis.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html","title":"Direction","content":"Direction \n\n Specifies the direction at which succeeding sectors follow one another.\n \nDirection.toString \ntoString \nDirection.convert \nconvert \nDirection.Clockwise \nClockwise \nDirection.CounterClockwise \nCounterClockwise"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#toString","title":"Direction.toString","content":"Direction.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#convert","title":"Direction.convert","content":"Direction.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#Clockwise","title":"Direction.Clockwise","content":"Direction.Clockwise \nClockwise \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#CounterClockwise","title":"Direction.CounterClockwise","content":"Direction.CounterClockwise \nCounterClockwise \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html","title":"Dragmode","content":"Dragmode \n\n Sets this figure\u0027s behavior when a user preforms a mouse \u0027drag\u0027 in the plot area. When set to \u0027zoom\u0027, a portion of the plot will be highlighted,\n when the viewer exits the drag, this highlighted section will be zoomed in on. When set to \u0027pan\u0027, data in the plot will move along with the viewers\n dragging motions. A user can always depress the \u0027shift\u0027 key to access the whatever functionality has not been set as the default. In 3D plots, the \n default drag mode is \u0027rotate\u0027 which rotates the scene.\n \nDragmode.toString \ntoString \nDragmode.convert \nconvert \nDragmode.Zoom \nZoom \nDragmode.Pan \nPan \nDragmode.Rotate \nRotate"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#toString","title":"Dragmode.toString","content":"Dragmode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#convert","title":"Dragmode.convert","content":"Dragmode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Zoom","title":"Dragmode.Zoom","content":"Dragmode.Zoom \nZoom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Pan","title":"Dragmode.Pan","content":"Dragmode.Pan \nPan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Rotate","title":"Dragmode.Rotate","content":"Dragmode.Rotate \nRotate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html","title":"DrawingStyle","content":"DrawingStyle \n\n Dash: Sets the drawing style of the lines segments in this trace.\n Sets the style of the lines. Set to a dash string type or a dash length in px.\n \nDrawingStyle.toString \ntoString \nDrawingStyle.convert \nconvert \nDrawingStyle.Solid \nSolid \nDrawingStyle.Dash \nDash \nDrawingStyle.Dot \nDot \nDrawingStyle.DashDot \nDashDot \nDrawingStyle.User \nUser"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#toString","title":"DrawingStyle.toString","content":"DrawingStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#convert","title":"DrawingStyle.convert","content":"DrawingStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Solid","title":"DrawingStyle.Solid","content":"DrawingStyle.Solid \nSolid \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Dash","title":"DrawingStyle.Dash","content":"DrawingStyle.Dash \nDash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Dot","title":"DrawingStyle.Dot","content":"DrawingStyle.Dot \nDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#DashDot","title":"DrawingStyle.DashDot","content":"DrawingStyle.DashDot \nDashDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#User","title":"DrawingStyle.User","content":"DrawingStyle.User \nUser \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html","title":"ExponentFormat","content":"ExponentFormat \n\n Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \u0022none\u0022, it appears as 1,000,000,000. If \u0022e\u0022, 1e\u002B9. If \u0022E\u0022, 1E\u002B9. \n If \u0022power\u0022, 1x10^9 (with 9 in a super script). If \u0022SI\u0022, 1G. If \u0022B\u0022, 1B.\n \nExponentFormat.toString \ntoString \nExponentFormat.convert \nconvert \nExponentFormat.B \nB \nExponentFormat.SI \nSI \nExponentFormat.Power \nPower \nExponentFormat.Ecapital \nEcapital \nExponentFormat.E \nE \nExponentFormat.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#toString","title":"ExponentFormat.toString","content":"ExponentFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#convert","title":"ExponentFormat.convert","content":"ExponentFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#B","title":"ExponentFormat.B","content":"ExponentFormat.B \nB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#SI","title":"ExponentFormat.SI","content":"ExponentFormat.SI \nSI \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Power","title":"ExponentFormat.Power","content":"ExponentFormat.Power \nPower \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Ecapital","title":"ExponentFormat.Ecapital","content":"ExponentFormat.Ecapital \nEcapital \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#E","title":"ExponentFormat.E","content":"ExponentFormat.E \nE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#None","title":"ExponentFormat.None","content":"ExponentFormat.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html","title":"Fill","content":"Fill \n\n Sets the area to fill with a solid color. (default: \u0022none\u0022 )\n \nFill.toString \ntoString \nFill.convert \nconvert \nFill.None \nNone \nFill.ToZero_y \nToZero_y \nFill.ToZero_x \nToZero_x \nFill.ToNext_y \nToNext_y \nFill.ToNext_x \nToNext_x \nFill.ToSelf \nToSelf \nFill.ToNext \nToNext"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#toString","title":"Fill.toString","content":"Fill.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#convert","title":"Fill.convert","content":"Fill.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#None","title":"Fill.None","content":"Fill.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToZero_y","title":"Fill.ToZero_y","content":"Fill.ToZero_y \nToZero_y \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToZero_x","title":"Fill.ToZero_x","content":"Fill.ToZero_x \nToZero_x \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext_y","title":"Fill.ToNext_y","content":"Fill.ToNext_y \nToNext_y \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext_x","title":"Fill.ToNext_x","content":"Fill.ToNext_x \nToNext_x \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToSelf","title":"Fill.ToSelf","content":"Fill.ToSelf \nToSelf \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext","title":"Fill.ToNext","content":"Fill.ToNext \nToNext \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html","title":"FontFamily","content":"FontFamily \n\n Names of installed font families\n \nFontFamily.toString \ntoString \nFontFamily.convert \nconvert \nFontFamily.Arial \nArial \nFontFamily.Balto \nBalto \nFontFamily.Courier_New \nCourier_New \nFontFamily.Consolas \nConsolas \nFontFamily.Droid_Sans \nDroid_Sans \nFontFamily.Droid_Serif \nDroid_Serif \nFontFamily.Droid_Sans_Mono \nDroid_Sans_Mono \nFontFamily.Gravitas_One \nGravitas_One \nFontFamily.Old_Standard_TT \nOld_Standard_TT \nFontFamily.Open_Sans \nOpen_Sans \nFontFamily.Overpass \nOverpass \nFontFamily.PT_Sans_Narrow \nPT_Sans_Narrow \nFontFamily.Raleway \nRaleway \nFontFamily.Times_New_Roman \nTimes_New_Roman"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#toString","title":"FontFamily.toString","content":"FontFamily.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#convert","title":"FontFamily.convert","content":"FontFamily.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Arial","title":"FontFamily.Arial","content":"FontFamily.Arial \nArial \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Balto","title":"FontFamily.Balto","content":"FontFamily.Balto \nBalto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Courier_New","title":"FontFamily.Courier_New","content":"FontFamily.Courier_New \nCourier_New \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Consolas","title":"FontFamily.Consolas","content":"FontFamily.Consolas \nConsolas \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Sans","title":"FontFamily.Droid_Sans","content":"FontFamily.Droid_Sans \nDroid_Sans \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Serif","title":"FontFamily.Droid_Serif","content":"FontFamily.Droid_Serif \nDroid_Serif \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Sans_Mono","title":"FontFamily.Droid_Sans_Mono","content":"FontFamily.Droid_Sans_Mono \nDroid_Sans_Mono \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Gravitas_One","title":"FontFamily.Gravitas_One","content":"FontFamily.Gravitas_One \nGravitas_One \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Old_Standard_TT","title":"FontFamily.Old_Standard_TT","content":"FontFamily.Old_Standard_TT \nOld_Standard_TT \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Open_Sans","title":"FontFamily.Open_Sans","content":"FontFamily.Open_Sans \nOpen_Sans \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Overpass","title":"FontFamily.Overpass","content":"FontFamily.Overpass \nOverpass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#PT_Sans_Narrow","title":"FontFamily.PT_Sans_Narrow","content":"FontFamily.PT_Sans_Narrow \nPT_Sans_Narrow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Raleway","title":"FontFamily.Raleway","content":"FontFamily.Raleway \nRaleway \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Times_New_Roman","title":"FontFamily.Times_New_Roman","content":"FontFamily.Times_New_Roman \nTimes_New_Roman \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html","title":"GeoFitBounds","content":"GeoFitBounds \n\nUsed for the Layout.geo field. Determines if this subplot\u0027s view settings are auto-computed to fit trace data. On scoped maps, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060 and \u0060center.lat\u0060 getting auto-filled. On maps with a non-clipped projection, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060, \u0060center.lat\u0060, and \u0060projection.rotation.lon\u0060 getting auto-filled. On maps with a clipped projection, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060, \u0060center.lat\u0060, \u0060projection.rotation.lon\u0060, \u0060projection.rotation.lat\u0060, \u0060lonaxis.range\u0060 and \u0060lonaxis.range\u0060 getting auto-filled. If \u0022locations\u0022, only the trace\u0027s visible locations are considered in the \u0060fitbounds\u0060 computations. If \u0022geojson\u0022, the entire trace input \u0060geojson\u0060 (if provided) is considered in the \u0060fitbounds\u0060 computations, Defaults to \u0022false\u0022.\n \nGeoFitBounds.toString \ntoString \nGeoFitBounds.convert \nconvert \nGeoFitBounds.False \nFalse \nGeoFitBounds.Locations \nLocations \nGeoFitBounds.GeoJson \nGeoJson"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#toString","title":"GeoFitBounds.toString","content":"GeoFitBounds.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#convert","title":"GeoFitBounds.convert","content":"GeoFitBounds.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#False","title":"GeoFitBounds.False","content":"GeoFitBounds.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#Locations","title":"GeoFitBounds.Locations","content":"GeoFitBounds.Locations \nLocations \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#GeoJson","title":"GeoFitBounds.GeoJson","content":"GeoFitBounds.GeoJson \nGeoJson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html","title":"GeoProjectionType","content":"GeoProjectionType \n \nGeoProjectionType.toString \ntoString \nGeoProjectionType.convert \nconvert \nGeoProjectionType.EquiRectangular \nEquiRectangular \nGeoProjectionType.Mercator \nMercator \nGeoProjectionType.Orthographic \nOrthographic \nGeoProjectionType.NaturalEarth \nNaturalEarth \nGeoProjectionType.Kavrayskiy7 \nKavrayskiy7 \nGeoProjectionType.Miller \nMiller \nGeoProjectionType.Robinson \nRobinson \nGeoProjectionType.Eckert4 \nEckert4 \nGeoProjectionType.AzimuthalEqualArea \nAzimuthalEqualArea \nGeoProjectionType.AzimuthalEquidistant \nAzimuthalEquidistant \nGeoProjectionType.ConicEqualArea \nConicEqualArea \nGeoProjectionType.ConicConformal \nConicConformal \nGeoProjectionType.ConicEquidistant \nConicEquidistant \nGeoProjectionType.Gnomonic \nGnomonic \nGeoProjectionType.Stereographic \nStereographic \nGeoProjectionType.Mollweide \nMollweide \nGeoProjectionType.Hammer \nHammer \nGeoProjectionType.TransverseMercator \nTransverseMercator \nGeoProjectionType.AlbersUSA \nAlbersUSA \nGeoProjectionType.WinkelTripel \nWinkelTripel \nGeoProjectionType.Aitoff \nAitoff \nGeoProjectionType.Sinusoidal \nSinusoidal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#toString","title":"GeoProjectionType.toString","content":"GeoProjectionType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#convert","title":"GeoProjectionType.convert","content":"GeoProjectionType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#EquiRectangular","title":"GeoProjectionType.EquiRectangular","content":"GeoProjectionType.EquiRectangular \nEquiRectangular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Mercator","title":"GeoProjectionType.Mercator","content":"GeoProjectionType.Mercator \nMercator \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Orthographic","title":"GeoProjectionType.Orthographic","content":"GeoProjectionType.Orthographic \nOrthographic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#NaturalEarth","title":"GeoProjectionType.NaturalEarth","content":"GeoProjectionType.NaturalEarth \nNaturalEarth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Kavrayskiy7","title":"GeoProjectionType.Kavrayskiy7","content":"GeoProjectionType.Kavrayskiy7 \nKavrayskiy7 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Miller","title":"GeoProjectionType.Miller","content":"GeoProjectionType.Miller \nMiller \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Robinson","title":"GeoProjectionType.Robinson","content":"GeoProjectionType.Robinson \nRobinson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Eckert4","title":"GeoProjectionType.Eckert4","content":"GeoProjectionType.Eckert4 \nEckert4 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AzimuthalEqualArea","title":"GeoProjectionType.AzimuthalEqualArea","content":"GeoProjectionType.AzimuthalEqualArea \nAzimuthalEqualArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AzimuthalEquidistant","title":"GeoProjectionType.AzimuthalEquidistant","content":"GeoProjectionType.AzimuthalEquidistant \nAzimuthalEquidistant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicEqualArea","title":"GeoProjectionType.ConicEqualArea","content":"GeoProjectionType.ConicEqualArea \nConicEqualArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicConformal","title":"GeoProjectionType.ConicConformal","content":"GeoProjectionType.ConicConformal \nConicConformal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicEquidistant","title":"GeoProjectionType.ConicEquidistant","content":"GeoProjectionType.ConicEquidistant \nConicEquidistant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Gnomonic","title":"GeoProjectionType.Gnomonic","content":"GeoProjectionType.Gnomonic \nGnomonic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Stereographic","title":"GeoProjectionType.Stereographic","content":"GeoProjectionType.Stereographic \nStereographic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Mollweide","title":"GeoProjectionType.Mollweide","content":"GeoProjectionType.Mollweide \nMollweide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Hammer","title":"GeoProjectionType.Hammer","content":"GeoProjectionType.Hammer \nHammer \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#TransverseMercator","title":"GeoProjectionType.TransverseMercator","content":"GeoProjectionType.TransverseMercator \nTransverseMercator \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AlbersUSA","title":"GeoProjectionType.AlbersUSA","content":"GeoProjectionType.AlbersUSA \nAlbersUSA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#WinkelTripel","title":"GeoProjectionType.WinkelTripel","content":"GeoProjectionType.WinkelTripel \nWinkelTripel \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Aitoff","title":"GeoProjectionType.Aitoff","content":"GeoProjectionType.Aitoff \nAitoff \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Sinusoidal","title":"GeoProjectionType.Sinusoidal","content":"GeoProjectionType.Sinusoidal \nSinusoidal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html","title":"GeoResolution","content":"GeoResolution \n\nUsed for the Layout.geo field. Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.\n \nGeoResolution.toString \ntoString \nGeoResolution.convert \nconvert \nGeoResolution.R110 \nR110 \nGeoResolution.R50 \nR50"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#toString","title":"GeoResolution.toString","content":"GeoResolution.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#convert","title":"GeoResolution.convert","content":"GeoResolution.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#R110","title":"GeoResolution.R110","content":"GeoResolution.R110 \nR110 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#R50","title":"GeoResolution.R50","content":"GeoResolution.R50 \nR50 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html","title":"GeoScope","content":"GeoScope \n \nGeoScope.toString \ntoString \nGeoScope.convert \nconvert \nGeoScope.World \nWorld \nGeoScope.Usa \nUsa \nGeoScope.Europe \nEurope \nGeoScope.Asia \nAsia \nGeoScope.Africa \nAfrica \nGeoScope.NorthAmerica \nNorthAmerica \nGeoScope.SouthAmerica \nSouthAmerica"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#toString","title":"GeoScope.toString","content":"GeoScope.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#convert","title":"GeoScope.convert","content":"GeoScope.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#World","title":"GeoScope.World","content":"GeoScope.World \nWorld \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Usa","title":"GeoScope.Usa","content":"GeoScope.Usa \nUsa \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Europe","title":"GeoScope.Europe","content":"GeoScope.Europe \nEurope \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Asia","title":"GeoScope.Asia","content":"GeoScope.Asia \nAsia \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Africa","title":"GeoScope.Africa","content":"GeoScope.Africa \nAfrica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#NorthAmerica","title":"GeoScope.NorthAmerica","content":"GeoScope.NorthAmerica \nNorthAmerica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#SouthAmerica","title":"GeoScope.SouthAmerica","content":"GeoScope.SouthAmerica \nSouthAmerica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html","title":"GroupNorm","content":"GroupNorm \n \nGroupNorm.toString \ntoString \nGroupNorm.convert \nconvert \nGroupNorm.None \nNone \nGroupNorm.Fraction \nFraction \nGroupNorm.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#toString","title":"GroupNorm.toString","content":"GroupNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#convert","title":"GroupNorm.convert","content":"GroupNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#None","title":"GroupNorm.None","content":"GroupNorm.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Fraction","title":"GroupNorm.Fraction","content":"GroupNorm.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Percent","title":"GroupNorm.Percent","content":"GroupNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html","title":"HistFunc","content":"HistFunc \n\n Sets the binning function used for this histogram trace. The default value is \u0027count\u0027 where the histogram values are computed \n by counting the number of values lying inside each bin. With \u0027histfunc\u0027 set to \u0027sum\u0027, \u0027avg\u0027, \u0027min\u0027 or \u0027max\u0027, the histogram values \n are computed using the sum, the average, the minimum or the \u0027maximum\u0027 of the values lying inside each bin respectively.\n default: Count    \n \nHistFunc.toString \ntoString \nHistFunc.convert \nconvert \nHistFunc.Count \nCount \nHistFunc.Sum \nSum \nHistFunc.Avg \nAvg \nHistFunc.Min \nMin \nHistFunc.Max \nMax"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#toString","title":"HistFunc.toString","content":"HistFunc.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#convert","title":"HistFunc.convert","content":"HistFunc.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Count","title":"HistFunc.Count","content":"HistFunc.Count \nCount \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Sum","title":"HistFunc.Sum","content":"HistFunc.Sum \nSum \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Avg","title":"HistFunc.Avg","content":"HistFunc.Avg \nAvg \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Min","title":"HistFunc.Min","content":"HistFunc.Min \nMin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Max","title":"HistFunc.Max","content":"HistFunc.Max \nMax \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html","title":"HistNorm","content":"HistNorm \n\n Sets the type of normalization for this histogram trace. By default (\u0027histnorm\u0027 set to \u0027\u0027) the height of each bar \n displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin.\n If set to \u0027percent\u0027, the height of each bar displays the percentage of total occurrences found within the corresponding bin. \n If set to \u0027probability\u0027, the height of each bar displays the probability that an event will fall into the corresponding bin. \n If set to \u0027density\u0027, the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin \n interval such that summing the area of all bins will yield the total number of occurrences. If set to \u0027probability density\u0027, \n the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by \n the size of the bin interval such that summing the area of all bins will yield 1.\n default: None  \n \nHistNorm.toString \ntoString \nHistNorm.convert \nconvert \nHistNorm.None \nNone \nHistNorm.Percent \nPercent \nHistNorm.Probability \nProbability \nHistNorm.Density \nDensity \nHistNorm.ProbabilityDensity \nProbabilityDensity"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#toString","title":"HistNorm.toString","content":"HistNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#convert","title":"HistNorm.convert","content":"HistNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#None","title":"HistNorm.None","content":"HistNorm.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Percent","title":"HistNorm.Percent","content":"HistNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Probability","title":"HistNorm.Probability","content":"HistNorm.Probability \nProbability \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Density","title":"HistNorm.Density","content":"HistNorm.Density \nDensity \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#ProbabilityDensity","title":"HistNorm.ProbabilityDensity","content":"HistNorm.ProbabilityDensity \nProbabilityDensity \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html","title":"HorizontalAlign","content":"HorizontalAlign \n \nHorizontalAlign.toString \ntoString \nHorizontalAlign.convert \nconvert \nHorizontalAlign.Left \nLeft \nHorizontalAlign.Center \nCenter \nHorizontalAlign.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#toString","title":"HorizontalAlign.toString","content":"HorizontalAlign.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#convert","title":"HorizontalAlign.convert","content":"HorizontalAlign.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Left","title":"HorizontalAlign.Left","content":"HorizontalAlign.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Center","title":"HorizontalAlign.Center","content":"HorizontalAlign.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Right","title":"HorizontalAlign.Right","content":"HorizontalAlign.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html","title":"Hovermode","content":"Hovermode \n\n Sets this figure\u0027s behavior when a user hovers over it. When set to \u0027x\u0027, all data sharing the same \u0027x\u0027 coordinate will be shown on screen\n with corresponding trace labels. When set to \u0027y\u0027 all data sharing the same \u0027y\u0027 coordinates will be shown on the screen with corresponding\n trace labels. When set to \u0027closest\u0027, information about the data point closest to where the viewer is hovering will appear.\n \nHovermode.toString \ntoString \nHovermode.convert \nconvert \nHovermode.Closest \nClosest \nHovermode.X \nX \nHovermode.Y \nY"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#toString","title":"Hovermode.toString","content":"Hovermode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#convert","title":"Hovermode.convert","content":"Hovermode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Closest","title":"Hovermode.Closest","content":"Hovermode.Closest \nClosest \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#X","title":"Hovermode.X","content":"Hovermode.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Y","title":"Hovermode.Y","content":"Hovermode.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html","title":"ImageFormat","content":"ImageFormat \n \nImageFormat.toString \ntoString \nImageFormat.convert \nconvert \nImageFormat.SVG \nSVG \nImageFormat.PNG \nPNG \nImageFormat.JPEG \nJPEG"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#toString","title":"ImageFormat.toString","content":"ImageFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#convert","title":"ImageFormat.convert","content":"ImageFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#SVG","title":"ImageFormat.SVG","content":"ImageFormat.SVG \nSVG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#PNG","title":"ImageFormat.PNG","content":"ImageFormat.PNG \nPNG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#JPEG","title":"ImageFormat.JPEG","content":"ImageFormat.JPEG \nJPEG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-jitterpoints.html","title":"Jitterpoints","content":"Jitterpoints \n \nJitterpoints.convert \nconvert"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-jitterpoints.html#convert","title":"Jitterpoints.convert","content":"Jitterpoints.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html","title":"Layer","content":"Layer \n\n Specifies whether shapes are drawn below or above traces. Default is Above\n \nLayer.toString \ntoString \nLayer.convert \nconvert \nLayer.Below \nBelow \nLayer.Above \nAbove"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#toString","title":"Layer.toString","content":"Layer.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#convert","title":"Layer.convert","content":"Layer.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Below","title":"Layer.Below","content":"Layer.Below \nBelow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Above","title":"Layer.Above","content":"Layer.Above \nAbove \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html","title":"LayoutGridPattern","content":"LayoutGridPattern \n\n Pattern to use for autogenerating Axis Ids when not specifically specifying subplot axes IDs in LayoutGrids\n \nLayoutGridPattern.toString \ntoString \nLayoutGridPattern.convert \nconvert \nLayoutGridPattern.Independent \nIndependent \nLayoutGridPattern.Coupled \nCoupled"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#toString","title":"LayoutGridPattern.toString","content":"LayoutGridPattern.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#convert","title":"LayoutGridPattern.convert","content":"LayoutGridPattern.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Independent","title":"LayoutGridPattern.Independent","content":"LayoutGridPattern.Independent \nIndependent \n\n Uses a new xy pair for each cell, left-to-right across each row then iterating rows according to \u0060roworder\u0060\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Coupled","title":"LayoutGridPattern.Coupled","content":"LayoutGridPattern.Coupled \nCoupled \n\n Gives one x axis per column and one y axis per row\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html","title":"LayoutGridRowOrder","content":"LayoutGridRowOrder \n\n Determines wether the rows of a LayoutGrid are enumerated from the top or the bottom.\n \nLayoutGridRowOrder.toString \ntoString \nLayoutGridRowOrder.convert \nconvert \nLayoutGridRowOrder.TopToBottom \nTopToBottom \nLayoutGridRowOrder.BottomToTop \nBottomToTop"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#toString","title":"LayoutGridRowOrder.toString","content":"LayoutGridRowOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#convert","title":"LayoutGridRowOrder.convert","content":"LayoutGridRowOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#TopToBottom","title":"LayoutGridRowOrder.TopToBottom","content":"LayoutGridRowOrder.TopToBottom \nTopToBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#BottomToTop","title":"LayoutGridRowOrder.BottomToTop","content":"LayoutGridRowOrder.BottomToTop \nBottomToTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html","title":"LayoutGridXSide","content":"LayoutGridXSide \n\n Sets where the x axis labels and titles go on a layout grid.\n \nLayoutGridXSide.toString \ntoString \nLayoutGridXSide.convert \nconvert \nLayoutGridXSide.Bottom \nBottom \nLayoutGridXSide.BottomPlot \nBottomPlot \nLayoutGridXSide.Top \nTop \nLayoutGridXSide.TopPlot \nTopPlot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#toString","title":"LayoutGridXSide.toString","content":"LayoutGridXSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#convert","title":"LayoutGridXSide.convert","content":"LayoutGridXSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Bottom","title":"LayoutGridXSide.Bottom","content":"LayoutGridXSide.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#BottomPlot","title":"LayoutGridXSide.BottomPlot","content":"LayoutGridXSide.BottomPlot \nBottomPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Top","title":"LayoutGridXSide.Top","content":"LayoutGridXSide.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#TopPlot","title":"LayoutGridXSide.TopPlot","content":"LayoutGridXSide.TopPlot \nTopPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html","title":"LayoutGridYSide","content":"LayoutGridYSide \n\n Sets where the y axis labels and titles go on a layout grid.\n \nLayoutGridYSide.toString \ntoString \nLayoutGridYSide.convert \nconvert \nLayoutGridYSide.Left \nLeft \nLayoutGridYSide.LeftPlot \nLeftPlot \nLayoutGridYSide.Right \nRight \nLayoutGridYSide.RightPlot \nRightPlot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#toString","title":"LayoutGridYSide.toString","content":"LayoutGridYSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#convert","title":"LayoutGridYSide.convert","content":"LayoutGridYSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Left","title":"LayoutGridYSide.Left","content":"LayoutGridYSide.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#LeftPlot","title":"LayoutGridYSide.LeftPlot","content":"LayoutGridYSide.LeftPlot \nLeftPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Right","title":"LayoutGridYSide.Right","content":"LayoutGridYSide.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#RightPlot","title":"LayoutGridYSide.RightPlot","content":"LayoutGridYSide.RightPlot \nRightPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendxanchorposition.html","title":"LegendXAnchorPosition","content":"LegendXAnchorPosition \n \nLegendXAnchorPosition.toString \ntoString \nLegendXAnchorPosition.convert \nconvert \nLegendXAnchorPosition.Auto \nAuto \nLegendXAnchorPosition.Left \nLeft \nLegendXAnchorPosition.Center \nCenter \nLegendXAnchorPosition.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendxanchorposition.html#toString","title":"LegendXAnchorPosition.toString","content":"LegendXAnchorPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendxanchorposition.html#convert","title":"LegendXAnchorPosition.convert","content":"LegendXAnchorPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendxanchorposition.html#Auto","title":"LegendXAnchorPosition.Auto","content":"LegendXAnchorPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendxanchorposition.html#Left","title":"LegendXAnchorPosition.Left","content":"LegendXAnchorPosition.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendxanchorposition.html#Center","title":"LegendXAnchorPosition.Center","content":"LegendXAnchorPosition.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendxanchorposition.html#Right","title":"LegendXAnchorPosition.Right","content":"LegendXAnchorPosition.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendyanchorposition.html","title":"LegendYAnchorPosition","content":"LegendYAnchorPosition \n \nLegendYAnchorPosition.toString \ntoString \nLegendYAnchorPosition.convert \nconvert \nLegendYAnchorPosition.Auto \nAuto \nLegendYAnchorPosition.Top \nTop \nLegendYAnchorPosition.Middle \nMiddle \nLegendYAnchorPosition.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendyanchorposition.html#toString","title":"LegendYAnchorPosition.toString","content":"LegendYAnchorPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendyanchorposition.html#convert","title":"LegendYAnchorPosition.convert","content":"LegendYAnchorPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendyanchorposition.html#Auto","title":"LegendYAnchorPosition.Auto","content":"LegendYAnchorPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendyanchorposition.html#Top","title":"LegendYAnchorPosition.Top","content":"LegendYAnchorPosition.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendyanchorposition.html#Middle","title":"LegendYAnchorPosition.Middle","content":"LegendYAnchorPosition.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-legendyanchorposition.html#Bottom","title":"LegendYAnchorPosition.Bottom","content":"LegendYAnchorPosition.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html","title":"LocationFormat","content":"LocationFormat \n\n Determines the set of locations used to match entries in \u0060locations\u0060 to regions on the map. Default: ISO-3\n \nLocationFormat.toString \ntoString \nLocationFormat.convert \nconvert \nLocationFormat.CountryNames \nCountryNames \nLocationFormat.ISO_3 \nISO_3 \nLocationFormat.USA_states \nUSA_states"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#toString","title":"LocationFormat.toString","content":"LocationFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#convert","title":"LocationFormat.convert","content":"LocationFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#CountryNames","title":"LocationFormat.CountryNames","content":"LocationFormat.CountryNames \nCountryNames \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#ISO_3","title":"LocationFormat.ISO_3","content":"LocationFormat.ISO_3 \nISO_3 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#USA_states","title":"LocationFormat.USA_states","content":"LocationFormat.USA_states \nUSA_states \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html","title":"Mirror","content":"Mirror \n\n Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \u0022true\u0022, the axis lines are mirrored. \n If \u0022ticks\u0022, the axis lines and ticks are mirrored. If \u0022false\u0022, mirroring is disable. If \u0022all\u0022, axis lines are mirrored on all shared-axes subplots. If \u0022allticks\u0022, axis lines and ticks are mirrored on all shared-axes subplots.\n \nMirror.toString \ntoString \nMirror.convert \nconvert \nMirror.True \nTrue \nMirror.Ticks \nTicks \nMirror.False \nFalse \nMirror.All \nAll \nMirror.AllTicks \nAllTicks"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#toString","title":"Mirror.toString","content":"Mirror.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#convert","title":"Mirror.convert","content":"Mirror.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#True","title":"Mirror.True","content":"Mirror.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#Ticks","title":"Mirror.Ticks","content":"Mirror.Ticks \nTicks \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#False","title":"Mirror.False","content":"Mirror.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#All","title":"Mirror.All","content":"Mirror.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#AllTicks","title":"Mirror.AllTicks","content":"Mirror.AllTicks \nAllTicks \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html","title":"Mode","content":"Mode \n \nMode.toString \ntoString \nMode.convert \nconvert \nMode.None \nNone \nMode.Lines \nLines \nMode.Lines_Markers \nLines_Markers \nMode.Lines_Text \nLines_Text \nMode.Lines_Markers_Text \nLines_Markers_Text \nMode.Markers \nMarkers \nMode.Markers_Text \nMarkers_Text \nMode.Text \nText"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#toString","title":"Mode.toString","content":"Mode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#convert","title":"Mode.convert","content":"Mode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#None","title":"Mode.None","content":"Mode.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines","title":"Mode.Lines","content":"Mode.Lines \nLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Markers","title":"Mode.Lines_Markers","content":"Mode.Lines_Markers \nLines_Markers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Text","title":"Mode.Lines_Text","content":"Mode.Lines_Text \nLines_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Markers_Text","title":"Mode.Lines_Markers_Text","content":"Mode.Lines_Markers_Text \nLines_Markers_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Markers","title":"Mode.Markers","content":"Mode.Markers \nMarkers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Markers_Text","title":"Mode.Markers_Text","content":"Mode.Markers_Text \nMarkers_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Text","title":"Mode.Text","content":"Mode.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html","title":"Orientation","content":"Orientation \n \nOrientation.toString \ntoString \nOrientation.convert \nconvert \nOrientation.Horizontal \nHorizontal \nOrientation.Vertical \nVertical"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#toString","title":"Orientation.toString","content":"Orientation.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#convert","title":"Orientation.convert","content":"Orientation.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Horizontal","title":"Orientation.Horizontal","content":"Orientation.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Vertical","title":"Orientation.Vertical","content":"Orientation.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html","title":"QuartileMethod","content":"QuartileMethod \n\n Sets the method used to compute the sample\u0027s Q1 and Q3 quartiles\n \nQuartileMethod.toString \ntoString \nQuartileMethod.convert \nconvert \nQuartileMethod.Linear \nLinear \nQuartileMethod.Exclusive \nExclusive \nQuartileMethod.Inclusive \nInclusive"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#toString","title":"QuartileMethod.toString","content":"QuartileMethod.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#convert","title":"QuartileMethod.convert","content":"QuartileMethod.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Linear","title":"QuartileMethod.Linear","content":"QuartileMethod.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Exclusive","title":"QuartileMethod.Exclusive","content":"QuartileMethod.Exclusive \nExclusive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Inclusive","title":"QuartileMethod.Inclusive","content":"QuartileMethod.Inclusive \nInclusive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html","title":"Range","content":"Range \n\n Defines a Range between min and max value \n \nRange.convert \nconvert \nRange.MinMax \nMinMax \nRange.Values \nValues"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#convert","title":"Range.convert","content":"Range.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#MinMax","title":"Range.MinMax","content":"Range.MinMax \nMinMax \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#Values","title":"Range.Values","content":"Range.Values \nValues \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html","title":"RangeMode","content":"RangeMode \n\n If \u0022normal\u0022, the range is computed in relation to the extrema of the input data. If \u0022tozero\u0022\u0060, the range extends to 0, regardless of the input data If \u0022nonnegative\u0022, the range is non-negative, regardless of the input data.\n \nRangeMode.toString \ntoString \nRangeMode.convert \nconvert \nRangeMode.Normal \nNormal \nRangeMode.ToZero \nToZero \nRangeMode.NonNegative \nNonNegative"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#toString","title":"RangeMode.toString","content":"RangeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#convert","title":"RangeMode.convert","content":"RangeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#Normal","title":"RangeMode.Normal","content":"RangeMode.Normal \nNormal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#ToZero","title":"RangeMode.ToZero","content":"RangeMode.ToZero \nToZero \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#NonNegative","title":"RangeMode.NonNegative","content":"RangeMode.NonNegative \nNonNegative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html","title":"Shape","content":"Shape \n\n Determines the line shape. With \u0022spline\u0022 the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\n \nShape.toString \ntoString \nShape.convert \nconvert \nShape.Linear \nLinear \nShape.Spline \nSpline \nShape.Hv \nHv \nShape.Vh \nVh \nShape.Hvh \nHvh \nShape.Vhv \nVhv"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#toString","title":"Shape.toString","content":"Shape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#convert","title":"Shape.convert","content":"Shape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Linear","title":"Shape.Linear","content":"Shape.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Spline","title":"Shape.Spline","content":"Shape.Spline \nSpline \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Hv","title":"Shape.Hv","content":"Shape.Hv \nHv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Vh","title":"Shape.Vh","content":"Shape.Vh \nVh \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Hvh","title":"Shape.Hvh","content":"Shape.Hvh \nHvh \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Vhv","title":"Shape.Vhv","content":"Shape.Vhv \nVhv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html","title":"ShapeType","content":"ShapeType \n\n Specifies the shape type to be drawn. If \u0022line\u0022, a line is drawn from (\u0060x0\u0060,\u0060y0\u0060) to (\u0060x1\u0060,\u0060y1\u0060) If \u0022circle\u0022, a circle is drawn from ((\u0060x0\u0060\u002B\u0060x1\u0060)/2, (\u0060y0\u0060\u002B\u0060y1\u0060)/2))\n with radius (|(\u0060x0\u0060\u002B\u0060x1\u0060)/2 - \u0060x0\u0060|, |(\u0060y0\u0060\u002B\u0060y1\u0060)/2 -\u0060y0\u0060)|) If \u0022rect\u0022, a rectangle is drawn linking (\u0060x0\u0060,\u0060y0\u0060), (\u0060x1\u0060,\u0060y0\u0060), (\u0060x1\u0060,\u0060y1\u0060), (\u0060x0\u0060,\u0060y1\u0060), (\u0060x0\u0060,\u0060y0\u0060)\n If \u0022path\u0022, draw a custom SVG path using \u0060path\u0060.          \n \nShapeType.toString \ntoString \nShapeType.convert \nconvert \nShapeType.Circle \nCircle \nShapeType.Rectangle \nRectangle \nShapeType.SvgPath \nSvgPath \nShapeType.Line \nLine"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#toString","title":"ShapeType.toString","content":"ShapeType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#convert","title":"ShapeType.convert","content":"ShapeType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Circle","title":"ShapeType.Circle","content":"ShapeType.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Rectangle","title":"ShapeType.Rectangle","content":"ShapeType.Rectangle \nRectangle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#SvgPath","title":"ShapeType.SvgPath","content":"ShapeType.SvgPath \nSvgPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Line","title":"ShapeType.Line","content":"ShapeType.Line \nLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html","title":"ShowExponent","content":"ShowExponent \n\n If \u0022all\u0022, all exponents are shown besides their significands. If \u0022first\u0022, only the exponent of the first tick is shown. If \u0022last\u0022, only the exponent of the last tick is shown. If \u0022none\u0022, no exponents appear.\n \nShowExponent.toString \ntoString \nShowExponent.convert \nconvert \nShowExponent.All \nAll \nShowExponent.First \nFirst \nShowExponent.Last \nLast \nShowExponent.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#toString","title":"ShowExponent.toString","content":"ShowExponent.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#convert","title":"ShowExponent.convert","content":"ShowExponent.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#All","title":"ShowExponent.All","content":"ShowExponent.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#First","title":"ShowExponent.First","content":"ShowExponent.First \nFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#Last","title":"ShowExponent.Last","content":"ShowExponent.Last \nLast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#None","title":"ShowExponent.None","content":"ShowExponent.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html","title":"ShowTickOption","content":"ShowTickOption \n\n If \u0022all\u0022, all tick labels are displayed with a prefix. If \u0022first\u0022, only the first tick is displayed with a prefix. If \u0022last\u0022, only the last tick is displayed with a suffix. If \u0022none\u0022, tick prefixes are hidden.\n \nShowTickOption.toString \ntoString \nShowTickOption.convert \nconvert \nShowTickOption.All \nAll \nShowTickOption.First \nFirst \nShowTickOption.Last \nLast \nShowTickOption.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#toString","title":"ShowTickOption.toString","content":"ShowTickOption.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#convert","title":"ShowTickOption.convert","content":"ShowTickOption.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#All","title":"ShowTickOption.All","content":"ShowTickOption.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#First","title":"ShowTickOption.First","content":"ShowTickOption.First \nFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#Last","title":"ShowTickOption.Last","content":"ShowTickOption.Last \nLast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#None","title":"ShowTickOption.None","content":"ShowTickOption.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html","title":"Side","content":"Side \n \nSide.toString \ntoString \nSide.convert \nconvert \nSide.Top \nTop \nSide.Bottom \nBottom \nSide.Left \nLeft \nSide.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#toString","title":"Side.toString","content":"Side.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#convert","title":"Side.convert","content":"Side.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Top","title":"Side.Top","content":"Side.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Bottom","title":"Side.Bottom","content":"Side.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Left","title":"Side.Left","content":"Side.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Right","title":"Side.Right","content":"Side.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sizemode.html","title":"SizeMode","content":"SizeMode \n \nSizeMode.toString \ntoString \nSizeMode.convert \nconvert \nSizeMode.Diameter \nDiameter \nSizeMode.Area \nArea"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sizemode.html#toString","title":"SizeMode.toString","content":"SizeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sizemode.html#convert","title":"SizeMode.convert","content":"SizeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sizemode.html#Diameter","title":"SizeMode.Diameter","content":"SizeMode.Diameter \nDiameter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sizemode.html#Area","title":"SizeMode.Area","content":"SizeMode.Area \nArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html","title":"SmoothAlg","content":"SmoothAlg \n\n Choose between algorithms (\u0027best\u0027 or \u0027fast\u0027) to smooth data linked to \u0027z\u0027. The default value is false corresponding to no smoothing.\n \nSmoothAlg.convert \nconvert \nSmoothAlg.False \nFalse \nSmoothAlg.Best \nBest \nSmoothAlg.Fast \nFast"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#convert","title":"SmoothAlg.convert","content":"SmoothAlg.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#False","title":"SmoothAlg.False","content":"SmoothAlg.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Best","title":"SmoothAlg.Best","content":"SmoothAlg.Best \nBest \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Fast","title":"SmoothAlg.Fast","content":"SmoothAlg.Fast \nFast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html","title":"Symbol","content":"Symbol \n \nSymbol.Circle \nCircle \nSymbol.Square \nSquare \nSymbol.Diamond \nDiamond \nSymbol.Cross \nCross \nSymbol.X \nX \nSymbol.TriangleUp \nTriangleUp \nSymbol.TriangleDown \nTriangleDown \nSymbol.TriangleLeft \nTriangleLeft \nSymbol.TriangleRight \nTriangleRight \nSymbol.TriangleNE \nTriangleNE \nSymbol.TriangleSE \nTriangleSE \nSymbol.TriangleSW \nTriangleSW \nSymbol.TriangleNW \nTriangleNW \nSymbol.Pentagon \nPentagon \nSymbol.Hexagon \nHexagon \nSymbol.Hexagon2 \nHexagon2 \nSymbol.Octagon \nOctagon \nSymbol.Star \nStar \nSymbol.Hexagram \nHexagram \nSymbol.StarTriangleUp \nStarTriangleUp \nSymbol.StarTriangleDown \nStarTriangleDown \nSymbol.StarSquare \nStarSquare \nSymbol.StarDiamond \nStarDiamond \nSymbol.DiamondTall \nDiamondTall \nSymbol.DiamondWide \nDiamondWide \nSymbol.Hourglass \nHourglass \nSymbol.Bowtie \nBowtie \nSymbol.CircleCross \nCircleCross \nSymbol.CircleX \nCircleX \nSymbol.SquareCross \nSquareCross \nSymbol.SquareX \nSquareX \nSymbol.DiamondCross \nDiamondCross \nSymbol.DiamondX \nDiamondX \nSymbol.CrossThin \nCrossThin \nSymbol.XThin \nXThin \nSymbol.Asterisk \nAsterisk \nSymbol.Hash \nHash \nSymbol.YUp \nYUp \nSymbol.YDown \nYDown \nSymbol.YLeft \nYLeft \nSymbol.YRight \nYRight \nSymbol.LineEW \nLineEW \nSymbol.LineNS \nLineNS \nSymbol.LineNE \nLineNE \nSymbol.LineNW \nLineNW"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Circle","title":"Symbol.Circle","content":"Symbol.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Square","title":"Symbol.Square","content":"Symbol.Square \nSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Diamond","title":"Symbol.Diamond","content":"Symbol.Diamond \nDiamond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Cross","title":"Symbol.Cross","content":"Symbol.Cross \nCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#X","title":"Symbol.X","content":"Symbol.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleUp","title":"Symbol.TriangleUp","content":"Symbol.TriangleUp \nTriangleUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleDown","title":"Symbol.TriangleDown","content":"Symbol.TriangleDown \nTriangleDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleLeft","title":"Symbol.TriangleLeft","content":"Symbol.TriangleLeft \nTriangleLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleRight","title":"Symbol.TriangleRight","content":"Symbol.TriangleRight \nTriangleRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleNE","title":"Symbol.TriangleNE","content":"Symbol.TriangleNE \nTriangleNE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleSE","title":"Symbol.TriangleSE","content":"Symbol.TriangleSE \nTriangleSE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleSW","title":"Symbol.TriangleSW","content":"Symbol.TriangleSW \nTriangleSW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#TriangleNW","title":"Symbol.TriangleNW","content":"Symbol.TriangleNW \nTriangleNW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Pentagon","title":"Symbol.Pentagon","content":"Symbol.Pentagon \nPentagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Hexagon","title":"Symbol.Hexagon","content":"Symbol.Hexagon \nHexagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Hexagon2","title":"Symbol.Hexagon2","content":"Symbol.Hexagon2 \nHexagon2 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Octagon","title":"Symbol.Octagon","content":"Symbol.Octagon \nOctagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Star","title":"Symbol.Star","content":"Symbol.Star \nStar \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Hexagram","title":"Symbol.Hexagram","content":"Symbol.Hexagram \nHexagram \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#StarTriangleUp","title":"Symbol.StarTriangleUp","content":"Symbol.StarTriangleUp \nStarTriangleUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#StarTriangleDown","title":"Symbol.StarTriangleDown","content":"Symbol.StarTriangleDown \nStarTriangleDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#StarSquare","title":"Symbol.StarSquare","content":"Symbol.StarSquare \nStarSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#StarDiamond","title":"Symbol.StarDiamond","content":"Symbol.StarDiamond \nStarDiamond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#DiamondTall","title":"Symbol.DiamondTall","content":"Symbol.DiamondTall \nDiamondTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#DiamondWide","title":"Symbol.DiamondWide","content":"Symbol.DiamondWide \nDiamondWide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Hourglass","title":"Symbol.Hourglass","content":"Symbol.Hourglass \nHourglass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Bowtie","title":"Symbol.Bowtie","content":"Symbol.Bowtie \nBowtie \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#CircleCross","title":"Symbol.CircleCross","content":"Symbol.CircleCross \nCircleCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#CircleX","title":"Symbol.CircleX","content":"Symbol.CircleX \nCircleX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#SquareCross","title":"Symbol.SquareCross","content":"Symbol.SquareCross \nSquareCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#SquareX","title":"Symbol.SquareX","content":"Symbol.SquareX \nSquareX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#DiamondCross","title":"Symbol.DiamondCross","content":"Symbol.DiamondCross \nDiamondCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#DiamondX","title":"Symbol.DiamondX","content":"Symbol.DiamondX \nDiamondX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#CrossThin","title":"Symbol.CrossThin","content":"Symbol.CrossThin \nCrossThin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#XThin","title":"Symbol.XThin","content":"Symbol.XThin \nXThin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Asterisk","title":"Symbol.Asterisk","content":"Symbol.Asterisk \nAsterisk \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#Hash","title":"Symbol.Hash","content":"Symbol.Hash \nHash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#YUp","title":"Symbol.YUp","content":"Symbol.YUp \nYUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#YDown","title":"Symbol.YDown","content":"Symbol.YDown \nYDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#YLeft","title":"Symbol.YLeft","content":"Symbol.YLeft \nYLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#YRight","title":"Symbol.YRight","content":"Symbol.YRight \nYRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#LineEW","title":"Symbol.LineEW","content":"Symbol.LineEW \nLineEW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#LineNS","title":"Symbol.LineNS","content":"Symbol.LineNS \nLineNS \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#LineNE","title":"Symbol.LineNE","content":"Symbol.LineNE \nLineNE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbol.html#LineNW","title":"Symbol.LineNW","content":"Symbol.LineNW \nLineNW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html","title":"SymbolStyle","content":"SymbolStyle \n \nSymbolStyle.toString \ntoString \nSymbolStyle.convert \nconvert \nSymbolStyle.Open \nOpen \nSymbolStyle.Dot \nDot \nSymbolStyle.OpenDot \nOpenDot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#toString","title":"SymbolStyle.toString","content":"SymbolStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#convert","title":"SymbolStyle.convert","content":"SymbolStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Open","title":"SymbolStyle.Open","content":"SymbolStyle.Open \nOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Dot","title":"SymbolStyle.Dot","content":"SymbolStyle.Dot \nDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#OpenDot","title":"SymbolStyle.OpenDot","content":"SymbolStyle.OpenDot \nOpenDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html","title":"TextInfo","content":"TextInfo \n\n Determines which trace information appear on the graph and  on hove (HoverInfo)\n \nTextInfo.toConcatString \ntoConcatString \nTextInfo.toString \ntoString \nTextInfo.convert \nconvert \nTextInfo.All \nAll \nTextInfo.None \nNone \nTextInfo.Label \nLabel \nTextInfo.Text \nText \nTextInfo.Value \nValue \nTextInfo.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#toConcatString","title":"TextInfo.toConcatString","content":"TextInfo.toConcatString \ntoConcatString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#toString","title":"TextInfo.toString","content":"TextInfo.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#convert","title":"TextInfo.convert","content":"TextInfo.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#All","title":"TextInfo.All","content":"TextInfo.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#None","title":"TextInfo.None","content":"TextInfo.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Label","title":"TextInfo.Label","content":"TextInfo.Label \nLabel \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Text","title":"TextInfo.Text","content":"TextInfo.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Value","title":"TextInfo.Value","content":"TextInfo.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Percent","title":"TextInfo.Percent","content":"TextInfo.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfoposition.html","title":"TextInfoPosition","content":"TextInfoPosition \n\n Specifies the location of the \u0060textinfo\u0060.\n \nTextInfoPosition.toString \ntoString \nTextInfoPosition.convert \nconvert \nTextInfoPosition.Auto \nAuto \nTextInfoPosition.Inside \nInside \nTextInfoPosition.Outside \nOutside \nTextInfoPosition.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfoposition.html#toString","title":"TextInfoPosition.toString","content":"TextInfoPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfoposition.html#convert","title":"TextInfoPosition.convert","content":"TextInfoPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfoposition.html#Auto","title":"TextInfoPosition.Auto","content":"TextInfoPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfoposition.html#Inside","title":"TextInfoPosition.Inside","content":"TextInfoPosition.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfoposition.html#Outside","title":"TextInfoPosition.Outside","content":"TextInfoPosition.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfoposition.html#None","title":"TextInfoPosition.None","content":"TextInfoPosition.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html","title":"TextPosition","content":"TextPosition \n\n Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates. (default: MiddleCenter)\n \nTextPosition.toString \ntoString \nTextPosition.convert \nconvert \nTextPosition.TopLeft \nTopLeft \nTextPosition.TopCenter \nTopCenter \nTextPosition.TopRight \nTopRight \nTextPosition.MiddleLeft \nMiddleLeft \nTextPosition.MiddleCenter \nMiddleCenter \nTextPosition.MiddleRight \nMiddleRight \nTextPosition.BottomLeft \nBottomLeft \nTextPosition.BottomCenter \nBottomCenter \nTextPosition.BottomRight \nBottomRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#toString","title":"TextPosition.toString","content":"TextPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#convert","title":"TextPosition.convert","content":"TextPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopLeft","title":"TextPosition.TopLeft","content":"TextPosition.TopLeft \nTopLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopCenter","title":"TextPosition.TopCenter","content":"TextPosition.TopCenter \nTopCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopRight","title":"TextPosition.TopRight","content":"TextPosition.TopRight \nTopRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleLeft","title":"TextPosition.MiddleLeft","content":"TextPosition.MiddleLeft \nMiddleLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleCenter","title":"TextPosition.MiddleCenter","content":"TextPosition.MiddleCenter \nMiddleCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleRight","title":"TextPosition.MiddleRight","content":"TextPosition.MiddleRight \nMiddleRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomLeft","title":"TextPosition.BottomLeft","content":"TextPosition.BottomLeft \nBottomLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomCenter","title":"TextPosition.BottomCenter","content":"TextPosition.BottomCenter \nBottomCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomRight","title":"TextPosition.BottomRight","content":"TextPosition.BottomRight \nBottomRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html","title":"TickMode","content":"TickMode \n\n Sets the tick mode for this axis. If \u0022auto\u0022, the number of ticks is set via \u0060nticks\u0060. If \u0022linear\u0022, the placement of the ticks is determined by a starting position \u0060tick0\u0060 and a tick step \u0060dtick\u0060 (\u0022linear\u0022 is the default value if \u0060tick0\u0060 and \u0060dtick\u0060 are provided). \n If \u0022array\u0022, the placement of the ticks is set via \u0060tickvals\u0060 and the tick text is \u0060ticktext\u0060. (\u0022array\u0022 is the default value if \u0060tickvals\u0060 is provided).\n \nTickMode.toString \ntoString \nTickMode.convert \nconvert \nTickMode.Auto \nAuto \nTickMode.Linear \nLinear \nTickMode.Array \nArray"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#toString","title":"TickMode.toString","content":"TickMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#convert","title":"TickMode.convert","content":"TickMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Auto","title":"TickMode.Auto","content":"TickMode.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Linear","title":"TickMode.Linear","content":"TickMode.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Array","title":"TickMode.Array","content":"TickMode.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html","title":"TickOptions","content":"TickOptions \n\n Determines whether ticks are drawn or not. If \u0022\u0022, this axis\u0027 ticks are not drawn. If \u0022outside\u0022 (\u0022inside\u0022), this axis\u0027 are drawn outside (inside) the axis lines.\n \nTickOptions.toString \ntoString \nTickOptions.convert \nconvert \nTickOptions.Outside \nOutside \nTickOptions.Inside \nInside \nTickOptions.Empty \nEmpty"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#toString","title":"TickOptions.toString","content":"TickOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#convert","title":"TickOptions.convert","content":"TickOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Outside","title":"TickOptions.Outside","content":"TickOptions.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Inside","title":"TickOptions.Inside","content":"TickOptions.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Empty","title":"TickOptions.Empty","content":"TickOptions.Empty \nEmpty \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html","title":"TraceItemClickOptions","content":"TraceItemClickOptions \n \nTraceItemClickOptions.toString \ntoString \nTraceItemClickOptions.convert \nconvert \nTraceItemClickOptions.Toggle \nToggle \nTraceItemClickOptions.ToggleOthers \nToggleOthers \nTraceItemClickOptions.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#toString","title":"TraceItemClickOptions.toString","content":"TraceItemClickOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#convert","title":"TraceItemClickOptions.convert","content":"TraceItemClickOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#Toggle","title":"TraceItemClickOptions.Toggle","content":"TraceItemClickOptions.Toggle \nToggle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#ToggleOthers","title":"TraceItemClickOptions.ToggleOthers","content":"TraceItemClickOptions.ToggleOthers \nToggleOthers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#False","title":"TraceItemClickOptions.False","content":"TraceItemClickOptions.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html","title":"TraceItemSizing","content":"TraceItemSizing \n \nTraceItemSizing.toString \ntoString \nTraceItemSizing.convert \nconvert \nTraceItemSizing.Trace \nTrace \nTraceItemSizing.Constant \nConstant"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#toString","title":"TraceItemSizing.toString","content":"TraceItemSizing.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#convert","title":"TraceItemSizing.convert","content":"TraceItemSizing.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Trace","title":"TraceItemSizing.Trace","content":"TraceItemSizing.Trace \nTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Constant","title":"TraceItemSizing.Constant","content":"TraceItemSizing.Constant \nConstant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html","title":"TraceOrder","content":"TraceOrder \n \nTraceOrder.toString \ntoString \nTraceOrder.convert \nconvert \nTraceOrder.Normal \nNormal \nTraceOrder.Reversed \nReversed \nTraceOrder.Grouped \nGrouped \nTraceOrder.ReversedGrouped \nReversedGrouped"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#toString","title":"TraceOrder.toString","content":"TraceOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#convert","title":"TraceOrder.convert","content":"TraceOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Normal","title":"TraceOrder.Normal","content":"TraceOrder.Normal \nNormal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Reversed","title":"TraceOrder.Reversed","content":"TraceOrder.Reversed \nReversed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Grouped","title":"TraceOrder.Grouped","content":"TraceOrder.Grouped \nGrouped \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#ReversedGrouped","title":"TraceOrder.ReversedGrouped","content":"TraceOrder.ReversedGrouped \nReversedGrouped \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html","title":"TreemapEdgeShape","content":"TreemapEdgeShape \n \nTreemapEdgeShape.toString \ntoString \nTreemapEdgeShape.convert \nconvert \nTreemapEdgeShape.ArrowRight \nArrowRight \nTreemapEdgeShape.ArrowLeft \nArrowLeft \nTreemapEdgeShape.Straight \nStraight \nTreemapEdgeShape.Slash \nSlash \nTreemapEdgeShape.BackSlash \nBackSlash"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html#toString","title":"TreemapEdgeShape.toString","content":"TreemapEdgeShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html#convert","title":"TreemapEdgeShape.convert","content":"TreemapEdgeShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html#ArrowRight","title":"TreemapEdgeShape.ArrowRight","content":"TreemapEdgeShape.ArrowRight \nArrowRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html#ArrowLeft","title":"TreemapEdgeShape.ArrowLeft","content":"TreemapEdgeShape.ArrowLeft \nArrowLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html#Straight","title":"TreemapEdgeShape.Straight","content":"TreemapEdgeShape.Straight \nStraight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html#Slash","title":"TreemapEdgeShape.Slash","content":"TreemapEdgeShape.Slash \nSlash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemapedgeshape.html#BackSlash","title":"TreemapEdgeShape.BackSlash","content":"TreemapEdgeShape.BackSlash \nBackSlash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html","title":"TreemapTilingPacking","content":"TreemapTilingPacking \n \nTreemapTilingPacking.toString \ntoString \nTreemapTilingPacking.convert \nconvert \nTreemapTilingPacking.Squarify \nSquarify \nTreemapTilingPacking.Binary \nBinary \nTreemapTilingPacking.Dice \nDice \nTreemapTilingPacking.Slice \nSlice \nTreemapTilingPacking.SliceDice \nSliceDice"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#toString","title":"TreemapTilingPacking.toString","content":"TreemapTilingPacking.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#convert","title":"TreemapTilingPacking.convert","content":"TreemapTilingPacking.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Squarify","title":"TreemapTilingPacking.Squarify","content":"TreemapTilingPacking.Squarify \nSquarify \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Binary","title":"TreemapTilingPacking.Binary","content":"TreemapTilingPacking.Binary \nBinary \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Dice","title":"TreemapTilingPacking.Dice","content":"TreemapTilingPacking.Dice \nDice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Slice","title":"TreemapTilingPacking.Slice","content":"TreemapTilingPacking.Slice \nSlice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#SliceDice","title":"TreemapTilingPacking.SliceDice","content":"TreemapTilingPacking.SliceDice \nSliceDice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html","title":"UnitMode","content":"UnitMode \n \nUnitMode.toString \ntoString \nUnitMode.convert \nconvert \nUnitMode.Fraction \nFraction \nUnitMode.Pixels \nPixels"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#toString","title":"UnitMode.toString","content":"UnitMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#convert","title":"UnitMode.convert","content":"UnitMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Fraction","title":"UnitMode.Fraction","content":"UnitMode.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Pixels","title":"UnitMode.Pixels","content":"UnitMode.Pixels \nPixels \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html","title":"VerticalAlign","content":"VerticalAlign \n \nVerticalAlign.toString \ntoString \nVerticalAlign.convert \nconvert \nVerticalAlign.Top \nTop \nVerticalAlign.Middle \nMiddle \nVerticalAlign.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#toString","title":"VerticalAlign.toString","content":"VerticalAlign.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#convert","title":"VerticalAlign.convert","content":"VerticalAlign.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Top","title":"VerticalAlign.Top","content":"VerticalAlign.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Middle","title":"VerticalAlign.Middle","content":"VerticalAlign.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Bottom","title":"VerticalAlign.Bottom","content":"VerticalAlign.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html","title":"Visible","content":"Visible \n\n Determines whether or not this trace is visible. If \u0022legendonly\u0022, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\n \nVisible.toString \ntoString \nVisible.convert \nconvert \nVisible.True \nTrue \nVisible.False \nFalse \nVisible.LegendOnly \nLegendOnly"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#toString","title":"Visible.toString","content":"Visible.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#convert","title":"Visible.convert","content":"Visible.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#True","title":"Visible.True","content":"Visible.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#False","title":"Visible.False","content":"Visible.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#LegendOnly","title":"Visible.LegendOnly","content":"Visible.LegendOnly \nLegendOnly \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html","title":"WaterfallMeasure","content":"WaterfallMeasure \n\nHow to compute differences between bars in Waterfall Charts\n \nWaterfallMeasure.toString \ntoString \nWaterfallMeasure.convert \nconvert \nWaterfallMeasure.Relative \nRelative \nWaterfallMeasure.Total \nTotal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#toString","title":"WaterfallMeasure.toString","content":"WaterfallMeasure.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#convert","title":"WaterfallMeasure.convert","content":"WaterfallMeasure.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Relative","title":"WaterfallMeasure.Relative","content":"WaterfallMeasure.Relative \nRelative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Total","title":"WaterfallMeasure.Total","content":"WaterfallMeasure.Total \nTotal \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html","title":"Trace","content":"Trace \n \nTrace.initScatter \ninitScatter \nTrace.initScatterGL \ninitScatterGL \nTrace.initBar \ninitBar \nTrace.initPie \ninitPie \nTrace.initHeatmap \ninitHeatmap \nTrace.initHeatmapGL \ninitHeatmapGL \nTrace.initImage \ninitImage \nTrace.initContour \ninitContour \nTrace.initTable \ninitTable \nTrace.initBoxPlot \ninitBoxPlot \nTrace.initViolin \ninitViolin \nTrace.initHistogram \ninitHistogram \nTrace.initHistogram2d \ninitHistogram2d \nTrace.initHistogram2dContour \ninitHistogram2dContour \nTrace.initOHLC \ninitOHLC \nTrace.initCandlestick \ninitCandlestick \nTrace.initWaterfall \ninitWaterfall \nTrace.initFunnel \ninitFunnel \nTrace.initFunnelArea \ninitFunnelArea \nTrace.initIndicator \ninitIndicator \nTrace.initScatterGeo \ninitScatterGeo \nTrace.initChoroplethMap \ninitChoroplethMap \nTrace.initScatterMapbox \ninitScatterMapbox \nTrace.initChoroplethMapbox \ninitChoroplethMapbox \nTrace.initDensityMapbox \ninitDensityMapbox \nTrace.initScatterPolar \ninitScatterPolar \nTrace.initScatterPolarGL \ninitScatterPolarGL \nTrace.initBarPolar \ninitBarPolar \nTrace.initScatterTernary \ninitScatterTernary \nTrace.initSunburst \ninitSunburst \nTrace.initTreemap \ninitTreemap \nTrace.initSankey \ninitSankey \nTrace.initSplom \ninitSplom \nTrace.initParallelCoord \ninitParallelCoord \nTrace.initParallelCategories \ninitParallelCategories \nTrace.initCarpet \ninitCarpet \nTrace.initScatterCarpet \ninitScatterCarpet \nTrace.initContourCarpet \ninitContourCarpet \nTrace.initWindRose \ninitWindRose"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatter","title":"Trace.initScatter","content":"Trace.initScatter \ninitScatter \n\ninitializes a trace of type \u0022scatter\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatterGL","title":"Trace.initScatterGL","content":"Trace.initScatterGL \ninitScatterGL \n\ninitializes a trace of type \u0022scattergl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initBar","title":"Trace.initBar","content":"Trace.initBar \ninitBar \n\ninitializes a trace of type \u0022bar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initPie","title":"Trace.initPie","content":"Trace.initPie \ninitPie \n\ninitializes a trace of type \u0022pie\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initHeatmap","title":"Trace.initHeatmap","content":"Trace.initHeatmap \ninitHeatmap \n\ninitializes a trace of type \u0022heatmap\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initHeatmapGL","title":"Trace.initHeatmapGL","content":"Trace.initHeatmapGL \ninitHeatmapGL \n\ninitializes a trace of type \u0022heatmapgl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initImage","title":"Trace.initImage","content":"Trace.initImage \ninitImage \n\ninitializes a trace of type \u0022image\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initContour","title":"Trace.initContour","content":"Trace.initContour \ninitContour \n\ninitializes a trace of type \u0022contour\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initTable","title":"Trace.initTable","content":"Trace.initTable \ninitTable \n\ninitializes a trace of type \u0022Table\u0022 applying the given trace styling function\n Init trace for table\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initBoxPlot","title":"Trace.initBoxPlot","content":"Trace.initBoxPlot \ninitBoxPlot \n\ninitializes a trace of type \u0022box\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initViolin","title":"Trace.initViolin","content":"Trace.initViolin \ninitViolin \n\ninitializes a trace of type \u0022violin\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initHistogram","title":"Trace.initHistogram","content":"Trace.initHistogram \ninitHistogram \n\ninitializes a trace of type \u0022histogram\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initHistogram2d","title":"Trace.initHistogram2d","content":"Trace.initHistogram2d \ninitHistogram2d \n\ninitializes a trace of type \u0022histogram2d\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initHistogram2dContour","title":"Trace.initHistogram2dContour","content":"Trace.initHistogram2dContour \ninitHistogram2dContour \n\ninitializes a trace of type \u0022histogram2dcontour\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initOHLC","title":"Trace.initOHLC","content":"Trace.initOHLC \ninitOHLC \n\ninitializes a trace of type \u0022ohlc\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initCandlestick","title":"Trace.initCandlestick","content":"Trace.initCandlestick \ninitCandlestick \n\ninitializes a trace of type \u0022candlestick\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initWaterfall","title":"Trace.initWaterfall","content":"Trace.initWaterfall \ninitWaterfall \n\ninitializes a trace of type \u0022waterfall\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initFunnel","title":"Trace.initFunnel","content":"Trace.initFunnel \ninitFunnel \n\ninitializes a trace of type \u0022funnel\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initFunnelArea","title":"Trace.initFunnelArea","content":"Trace.initFunnelArea \ninitFunnelArea \n\ninitializes a trace of type \u0022funnelarea\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initIndicator","title":"Trace.initIndicator","content":"Trace.initIndicator \ninitIndicator \n\ninitializes a trace of type \u0022indicator\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatterGeo","title":"Trace.initScatterGeo","content":"Trace.initScatterGeo \ninitScatterGeo \n\ninitializes a trace of type \u0022scattergeo\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initChoroplethMap","title":"Trace.initChoroplethMap","content":"Trace.initChoroplethMap \ninitChoroplethMap \n\ninitializes a trace of type \u0022choropleth\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatterMapbox","title":"Trace.initScatterMapbox","content":"Trace.initScatterMapbox \ninitScatterMapbox \n\ninitializes a trace of type \u0022scattermapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initChoroplethMapbox","title":"Trace.initChoroplethMapbox","content":"Trace.initChoroplethMapbox \ninitChoroplethMapbox \n\ninitializes a trace of type \u0022choroplethmapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initDensityMapbox","title":"Trace.initDensityMapbox","content":"Trace.initDensityMapbox \ninitDensityMapbox \n\ninitializes a trace of type \u0022densitymapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatterPolar","title":"Trace.initScatterPolar","content":"Trace.initScatterPolar \ninitScatterPolar \n\ninitializes a trace of type \u0022scatterpolar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatterPolarGL","title":"Trace.initScatterPolarGL","content":"Trace.initScatterPolarGL \ninitScatterPolarGL \n\ninitializes a trace of type \u0022scatterpolargl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initBarPolar","title":"Trace.initBarPolar","content":"Trace.initBarPolar \ninitBarPolar \n\ninitializes a trace of type \u0022barpolar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatterTernary","title":"Trace.initScatterTernary","content":"Trace.initScatterTernary \ninitScatterTernary \n\ninitializes a trace of type \u0022scatterternary\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initSunburst","title":"Trace.initSunburst","content":"Trace.initSunburst \ninitSunburst \n\ninitializes a trace of type \u0022sunburst\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initTreemap","title":"Trace.initTreemap","content":"Trace.initTreemap \ninitTreemap \n\ninitializes a trace of type \u0022treemap\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initSankey","title":"Trace.initSankey","content":"Trace.initSankey \ninitSankey \n\ninitializes a trace of type \u0022sankey\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initSplom","title":"Trace.initSplom","content":"Trace.initSplom \ninitSplom \n\ninitializes a trace of type \u0022SPLOM\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initParallelCoord","title":"Trace.initParallelCoord","content":"Trace.initParallelCoord \ninitParallelCoord \n\ninitializes a trace of type \u0022parcoords\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initParallelCategories","title":"Trace.initParallelCategories","content":"Trace.initParallelCategories \ninitParallelCategories \n\ninitializes a trace of type \u0022parcats\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initCarpet","title":"Trace.initCarpet","content":"Trace.initCarpet \ninitCarpet \n\ninitializes a trace of type \u0022carpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initScatterCarpet","title":"Trace.initScatterCarpet","content":"Trace.initScatterCarpet \ninitScatterCarpet \n\ninitializes a trace of type \u0022scattercarpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initContourCarpet","title":"Trace.initContourCarpet","content":"Trace.initContourCarpet \ninitContourCarpet \n\ninitializes a trace of type \u0022contourcarpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemodule.html#initWindRose","title":"Trace.initWindRose","content":"Trace.initWindRose \ninitWindRose \n\n Init trace for wind rose chart \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html","title":"Trace3d","content":"Trace3d \n \nTrace3d.Trace3dStyle \nTrace3dStyle \nTrace3d.initScatter3d \ninitScatter3d \nTrace3d.initSurface \ninitSurface \nTrace3d.initMesh3d \ninitMesh3d \nTrace3d.initCone \ninitCone \nTrace3d.initStreamTube \ninitStreamTube \nTrace3d.initVolume \ninitVolume \nTrace3d.initIsoSurface \ninitIsoSurface"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html#initScatter3d","title":"Trace3d.initScatter3d","content":"Trace3d.initScatter3d \ninitScatter3d \n\ninitializes a trace of type \u0022scatter3d\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html#initSurface","title":"Trace3d.initSurface","content":"Trace3d.initSurface \ninitSurface \n\ninitializes a trace of type \u0022surface\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html#initMesh3d","title":"Trace3d.initMesh3d","content":"Trace3d.initMesh3d \ninitMesh3d \n\ninitializes a trace of type \u0022mesh3d\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html#initCone","title":"Trace3d.initCone","content":"Trace3d.initCone \ninitCone \n\ninitializes a trace of type \u0022cone\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html#initStreamTube","title":"Trace3d.initStreamTube","content":"Trace3d.initStreamTube \ninitStreamTube \n\ninitializes a trace of type \u0022streamtube\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html#initVolume","title":"Trace3d.initVolume","content":"Trace3d.initVolume \ninitVolume \n\ninitializes a trace of type \u0022volume\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule.html#initIsoSurface","title":"Trace3d.initIsoSurface","content":"Trace3d.initIsoSurface \ninitIsoSurface \n\ninitializes a trace of type \u0022isosurface\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule-trace3dstyle.html","title":"Trace3dStyle","content":"Trace3dStyle \n\n Functions provide the styling of the Chart objects\n \nTrace3dStyle.( .ctor ) \n( .ctor ) \nTrace3dStyle.Mesh3d \nMesh3d \nTrace3dStyle.Scatter3d \nScatter3d \nTrace3dStyle.Surface \nSurface \nTrace3dStyle.setScene \nsetScene"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule-trace3dstyle.html#( .ctor )","title":"Trace3dStyle.( .ctor )","content":"Trace3dStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule-trace3dstyle.html#Mesh3d","title":"Trace3dStyle.Mesh3d","content":"Trace3dStyle.Mesh3d \nMesh3d \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule-trace3dstyle.html#Scatter3d","title":"Trace3dStyle.Scatter3d","content":"Trace3dStyle.Scatter3d \nScatter3d \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule-trace3dstyle.html#Surface","title":"Trace3dStyle.Surface","content":"Trace3dStyle.Surface \nSurface \n\n Applies the styles of 3d-surface to TraceObjects \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dmodule-trace3dstyle.html#setScene","title":"Trace3dStyle.setScene","content":"Trace3dStyle.setScene \nsetScene \n"},{"uri":"https://plotly.net/reference/plotly-net-annotation.html","title":"Annotation","content":"Annotation \n\n Text annotations inside a plot \n \nAnnotation.( .ctor ) \n( .ctor ) \nAnnotation.init \ninit \nAnnotation.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-annotation.html#( .ctor )","title":"Annotation.( .ctor )","content":"Annotation.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-annotation.html#init","title":"Annotation.init","content":"Annotation.init \ninit \n\n Init Annotation type\n"},{"uri":"https://plotly.net/reference/plotly-net-annotation.html#style","title":"Annotation.style","content":"Annotation.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html","title":"AnnotationEditOptions","content":"AnnotationEditOptions \n \nAnnotationEditOptions.toString \ntoString \nAnnotationEditOptions.AnnotationPosition \nAnnotationPosition \nAnnotationEditOptions.AnnotationTail \nAnnotationTail \nAnnotationEditOptions.AnnotationText \nAnnotationText \nAnnotationEditOptions.AxisTitleText \nAxisTitleText \nAnnotationEditOptions.ColorbarPosition \nColorbarPosition \nAnnotationEditOptions.ColorbarTitleText \nColorbarTitleText \nAnnotationEditOptions.LegendPosition \nLegendPosition \nAnnotationEditOptions.LegendText \nLegendText \nAnnotationEditOptions.ShapePosition \nShapePosition"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#toString","title":"AnnotationEditOptions.toString","content":"AnnotationEditOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#AnnotationPosition","title":"AnnotationEditOptions.AnnotationPosition","content":"AnnotationEditOptions.AnnotationPosition \nAnnotationPosition \n\nDetermines if the main anchor of the annotation is editable.The main anchor corresponds to the\u0027,\ntext (if no arrow) or the arrow (which drags the whole thing leaving the arrow length \u0026 direction unchanged).\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#AnnotationTail","title":"AnnotationEditOptions.AnnotationTail","content":"AnnotationEditOptions.AnnotationTail \nAnnotationTail \n\nHas only an effect for annotations with arrows. Enables changing the length and direction of the arrow.\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#AnnotationText","title":"AnnotationEditOptions.AnnotationText","content":"AnnotationEditOptions.AnnotationText \nAnnotationText \n\nEnables editing annotation text.\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#AxisTitleText","title":"AnnotationEditOptions.AxisTitleText","content":"AnnotationEditOptions.AxisTitleText \nAxisTitleText \n\nEnables editing axis title text.\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#ColorbarPosition","title":"AnnotationEditOptions.ColorbarPosition","content":"AnnotationEditOptions.ColorbarPosition \nColorbarPosition \n\nEnables moving colorbars.\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#ColorbarTitleText","title":"AnnotationEditOptions.ColorbarTitleText","content":"AnnotationEditOptions.ColorbarTitleText \nColorbarTitleText \n\nEnables editing colorbar title text.\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#LegendPosition","title":"AnnotationEditOptions.LegendPosition","content":"AnnotationEditOptions.LegendPosition \nLegendPosition \n\nEnables moving the legend.\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#LegendText","title":"AnnotationEditOptions.LegendText","content":"AnnotationEditOptions.LegendText \nLegendText \n\nEnables editing the trace name fields from the legend\n"},{"uri":"https://plotly.net/reference/plotly-net-annotationeditoptions.html#ShapePosition","title":"AnnotationEditOptions.ShapePosition","content":"AnnotationEditOptions.ShapePosition \nShapePosition \n\nEnables moving shapes.\n"},{"uri":"https://plotly.net/reference/plotly-net-bins.html","title":"Bins","content":"Bins \n\n Bin type inherits from dynamic object\n \nBins.( .ctor ) \n( .ctor ) \nBins.init \ninit \nBins.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-bins.html#( .ctor )","title":"Bins.( .ctor )","content":"Bins.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-bins.html#init","title":"Bins.init","content":"Bins.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-bins.html#style","title":"Bins.style","content":"Bins.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-box.html","title":"Box","content":"Box \n\n Box type inherits from dynamic object (parent violin)\n \nBox.( .ctor ) \n( .ctor ) \nBox.init \ninit \nBox.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-box.html#( .ctor )","title":"Box.( .ctor )","content":"Box.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-box.html#init","title":"Box.init","content":"Box.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-box.html#style","title":"Box.style","content":"Box.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-candle.html","title":"Candle","content":"Candle \n \nCandle.Create \nCreate \nCandle.High \nHigh \nCandle.Low \nLow \nCandle.Close \nClose \nCandle.Open \nOpen"},{"uri":"https://plotly.net/reference/plotly-net-candle.html#Create","title":"Candle.Create","content":"Candle.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-candle.html#High","title":"Candle.High","content":"Candle.High \nHigh \n"},{"uri":"https://plotly.net/reference/plotly-net-candle.html#Low","title":"Candle.Low","content":"Candle.Low \nLow \n"},{"uri":"https://plotly.net/reference/plotly-net-candle.html#Close","title":"Candle.Close","content":"Candle.Close \nClose \n"},{"uri":"https://plotly.net/reference/plotly-net-candle.html#Open","title":"Candle.Open","content":"Candle.Open \nOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-cellcolor.html","title":"CellColor","content":"CellColor \n\n CellColor type inherits from dynamic object\n \nCellColor.( .ctor ) \n( .ctor ) \nCellColor.init \ninit \nCellColor.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-cellcolor.html#( .ctor )","title":"CellColor.( .ctor )","content":"CellColor.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-cellcolor.html#init","title":"CellColor.init","content":"CellColor.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-cellcolor.html#style","title":"CellColor.style","content":"CellColor.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html","title":"Chart","content":"Chart \n\n Provides a set of static methods for creating charts.\n \nChart.Area \nArea \nChart.Area \nArea \nChart.Bar \nBar \nChart.Bar \nBar \nChart.BoxPlot \nBoxPlot \nChart.BoxPlot \nBoxPlot \nChart.Bubble \nBubble \nChart.Bubble \nBubble \nChart.Candlestick \nCandlestick \nChart.Candlestick \nCandlestick \nChart.ChoroplethMap \nChoroplethMap \nChart.Column \nColumn \nChart.Column \nColumn \nChart.Contour \nContour \nChart.Doughnut \nDoughnut \nChart.Doughnut \nDoughnut \nChart.Funnel \nFunnel \nChart.Heatmap \nHeatmap \nChart.Histogram \nHistogram \nChart.Histogram2d \nHistogram2d \nChart.Histogram2dContour \nHistogram2dContour \nChart.Line \nLine \nChart.Line \nLine \nChart.LineGeo \nLineGeo \nChart.LineGeo \nLineGeo \nChart.LineGeo \nLineGeo \nChart.Mesh3d \nMesh3d \nChart.OHLC \nOHLC \nChart.OHLC \nOHLC \nChart.ParallelCategories \nParallelCategories \nChart.ParallelCategories \nParallelCategories \nChart.ParallelCoord \nParallelCoord \nChart.ParallelCoord \nParallelCoord \nChart.Pie \nPie \nChart.Pie \nPie \nChart.Point \nPoint \nChart.Point \nPoint \nChart.PointGeo \nPointGeo \nChart.PointGeo \nPointGeo \nChart.PointGeo \nPointGeo \nChart.Polar \nPolar \nChart.Polar \nPolar \nChart.Range \nRange \nChart.Range \nRange \nChart.Range \nRange \nChart.Range \nRange \nChart.Scatter \nScatter \nChart.Scatter \nScatter \nChart.Scatter3d \nScatter3d \nChart.Scatter3d \nScatter3d \nChart.ScatterGeo \nScatterGeo \nChart.ScatterGeo \nScatterGeo \nChart.ScatterGeo \nScatterGeo \nChart.Spline \nSpline \nChart.Spline \nSpline \nChart.SplineArea \nSplineArea \nChart.SplineArea \nSplineArea \nChart.Splom \nSplom \nChart.Splom \nSplom \nChart.StackedArea \nStackedArea \nChart.StackedArea \nStackedArea \nChart.StackedBar \nStackedBar \nChart.StackedBar \nStackedBar \nChart.StackedColumn \nStackedColumn \nChart.StackedColumn \nStackedColumn \nChart.Sunburst \nSunburst \nChart.Surface \nSurface \nChart.Table \nTable \nChart.Treemap \nTreemap \nChart.Violin \nViolin \nChart.Violin \nViolin \nChart.Waterfall \nWaterfall \nChart.Waterfall \nWaterfall \nChart.WindRose \nWindRose"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Area","title":"Chart.Area","content":"Chart.Area \nArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Area","title":"Chart.Area","content":"Chart.Area \nArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Bar","title":"Chart.Bar","content":"Chart.Bar \nBar \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Bar","title":"Chart.Bar","content":"Chart.Bar \nBar \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#BoxPlot","title":"Chart.BoxPlot","content":"Chart.BoxPlot \nBoxPlot \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.       \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#BoxPlot","title":"Chart.BoxPlot","content":"Chart.BoxPlot \nBoxPlot \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.            \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Bubble","title":"Chart.Bubble","content":"Chart.Bubble \nBubble \nCreates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes."},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Bubble","title":"Chart.Bubble","content":"Chart.Bubble \nBubble \nCreates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes."},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Candlestick","title":"Chart.Candlestick","content":"Chart.Candlestick \nCandlestick \n\n Creates an OHLC (open-high-low-close) chart. OHLC charts are typically used to illustrate movements in the price of a financial instrument over time.\n\n stockTimeSeries : tuple list of time * stock (OHLC) data\n\n ?Increasing     : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing     : Sets the Line style of the Decreasing part of the chart\n\n ?Line           : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?Tickwidth      : Sets the width of the open/close tick marks relative to the \u0022x\u0022 minimal interval.\n\n ?XCalendar      : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Candlestick","title":"Chart.Candlestick","content":"Chart.Candlestick \nCandlestick \n\n Creates a candlestick chart. A candlestick cart is a style of financial chart used to describe price movements of a \n security, derivative, or currency. Each \u0022candlestick\u0022 typically shows one day, thus a one-month chart may show the 20 \n trading days as 20 candlesticks. Candlestick charts can also be built using intervals shorter or longer than one day.\n\n \u0060\u0060open\u0060\u0060        : Sets the open values.\n\n high            : Sets the high values.\n\n low             : Sets the low values.\n\n close           : Sets the close values.\n\n x               : Sets the x coordinates. If absent, linear coordinate will be generated.\n\n ?Increasing     : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing     : Sets the Line style of the Decreasing part of the chart\n\n ?Line           : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?WhiskerWidth   :  Sets the width of the whiskers relative to the box\u0027 width. For example, with 1, the whiskers are as wide as the box(es).\n\n ?XCalendar      : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ChoroplethMap","title":"Chart.ChoroplethMap","content":"Chart.ChoroplethMap \nChoroplethMap \n\n Computes the choropleth map plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Column","title":"Chart.Column","content":"Chart.Column \nColumn \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Column","title":"Chart.Column","content":"Chart.Column \nColumn \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Contour","title":"Chart.Contour","content":"Chart.Contour \nContour \n\n Shows a graphical representation of data where the individual values contained in a matrix are represented as colors.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Doughnut","title":"Chart.Doughnut","content":"Chart.Doughnut \nDoughnut \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data as a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Doughnut","title":"Chart.Doughnut","content":"Chart.Doughnut \nDoughnut \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data as a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Funnel","title":"Chart.Funnel","content":"Chart.Funnel \nFunnel \n\n Creates a Funnel chart.\n Funnel charts Visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a \u0022drop-off\u0022 representation wherein each item appears in each stage it traversed. See also the \u0022funnelarea\u0022 trace type for a different approach to visualizing funnel data.\n\n Parameters:\n \n x              : Sets the x coordinates.\n\n y              : Sets the y coordinates.\n\n Name           : Sets the trace name. The trace name appear as the legend item and on hover\n\n Showlegend     : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n Opacity        : Sets the Opacity of the trace\n\n Labels         : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition   : Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont       : Sets the text font of this trace\n\n Color          : Sets Marker Color\n\n Line           : Line type\n\n x0             : Alternate to \u0060x\u0060. Builds a linear space of x coordinates. Use with \u0060dx\u0060 where \u0060x0\u0060 is the starting coordinate and \u0060dx\u0060 the step.\n\n dX             : Sets the x coordinate step. See \u0060x0\u0060 for more info.\n\n y0             : Alternate to \u0060y\u0060. Builds a linear space of y coordinates. Use with \u0060dy\u0060 where \u0060y0\u0060 is the starting coordinate and \u0060dy\u0060 the step.\n\n dY             : Sets the y coordinate step. See \u0060y0\u0060 for more info.\n\n Width          : Sets the bar width (in position axis units).\n \n Offset         : Shifts the position where the bar is drawn (in position axis units). In \u0022group\u0022 barmode, traces that set \u0022offset\u0022 will be excluded and drawn in \u0022overlay\u0022 mode instead.\n \n Orientation    : Sets the orientation of the funnels. With \u0022v\u0022 (\u0022h\u0022), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only \u0022y\u0022 array is presented or orientation is set to \u0022v\u0022. Also regarding graphs including only \u0027horizontal\u0027 funnels, \u0022autorange\u0022 on the \u0022y-axis\u0022 are set to \u0022reversed\u0022.\n \n Alignmentgroup : Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\n \n Offsetgroup    : Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\n \n Cliponaxis     : Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set \u0060xaxis.layer\u0060 and \u0060yaxis.layer\u0060 to \u0022below traces\u0022.\n \n Connector      : Connector type\n\n Insidetextfont : Sets the font used for \u0060text\u0060 lying inside the bar.\n\n Outsidetextfont: Sets the font used for \u0060text\u0060 lying outside the bar.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Heatmap","title":"Chart.Heatmap","content":"Chart.Heatmap \nHeatmap \n\n Shows a graphical representation of a 3-dimensional surface by plotting constant z slices, called contours, on a 2-dimensional format.\n That is, given a value for z, lines are drawn for connecting the (x,y) coordinates where that z value occurs.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Histogram","title":"Chart.Histogram","content":"Chart.Histogram \nHistogram \n\n Computes a histogram with auto-determined the bin size.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Histogram2d","title":"Chart.Histogram2d","content":"Chart.Histogram2d \nHistogram2d \n\n Computes the bi-dimensional histogram of two data samples and auto-determines the bin size.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Histogram2dContour","title":"Chart.Histogram2dContour","content":"Chart.Histogram2dContour \nHistogram2dContour \n\n Computes the bi-dimensional histogram of two data samples and auto-determines the bin size.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Line","title":"Chart.Line","content":"Chart.Line \nLine \nCreates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X."},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Line","title":"Chart.Line","content":"Chart.Line \nLine \nCreates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X."},{"uri":"https://plotly.net/reference/plotly-net-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart, where data is visualized as coordinates connected via lines on a geographic map.\n\n Parameters:\n\n locations   : Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See \u0060locationmode\u0060 for more info.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowMarkers : Determines wether or not markers will be rendered for each datum.\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (lon,lat) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart, where data is visualized as coordinates connected via lines on a geographic map.\n\n Parameters:\n \n lonlat      : Sets the (longitude,latitude) coordinates (in degrees North, degrees South).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowMarkers : Determines wether or not markers will be rendered for each datum.\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (lon,lat) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart, where data is visualized as coordinates connected via lines on a geographic map.\n\n Parameters:\n \n longitudes  : Sets the longitude coordinates (in degrees East).\n\n latitudes   : Sets the latitude coordinates (in degrees North).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowMarkers : Determines wether or not markers will be rendered for each datum.\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (lon,lat) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Mesh3d","title":"Chart.Mesh3d","content":"Chart.Mesh3d \nMesh3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#OHLC","title":"Chart.OHLC","content":"Chart.OHLC \nOHLC \n\n Creates an OHLC (open-high-low-close) chart. OHLC charts are typically used to illustrate movements in the price of a financial instrument over time.\n\n stockTimeSeries : tuple list of time * stock (OHLC) data\n\n ?Increasing     : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing     : Sets the Line style of the Decreasing part of the chart\n\n ?Line           : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?Tickwidth      : Sets the width of the open/close tick marks relative to the \u0022x\u0022 minimal interval.\n\n ?XCalendar      : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#OHLC","title":"Chart.OHLC","content":"Chart.OHLC \nOHLC \n\n Creates an OHLC (open-high-low-close) chart. OHLC charts are typically used to illustrate movements in the price of a financial instrument over time.\n\n \u0060\u0060open\u0060\u0060    : Sets the open values.\n\n high        : Sets the high values.\n\n low         : Sets the low values.\n\n close       : Sets the close values.\n\n x           : Sets the x coordinates. If absent, linear coordinate will be generated.\n\n ?Increasing : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing : Sets the Line style of the Decreasing part of the chart\n\n ?Line       : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?Tickwidth  : Sets the width of the open/close tick marks relative to the \u0022x\u0022 minimal interval.\n\n ?XCalendar  : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ParallelCategories","title":"Chart.ParallelCategories","content":"Chart.ParallelCategories \nParallelCategories \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ParallelCategories","title":"Chart.ParallelCategories","content":"Chart.ParallelCategories \nParallelCategories \n\nParallel categories diagram for multidimensional categorical data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ParallelCoord","title":"Chart.ParallelCoord","content":"Chart.ParallelCoord \nParallelCoord \n\n Computes the parallel coordinates plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ParallelCoord","title":"Chart.ParallelCoord","content":"Chart.ParallelCoord \nParallelCoord \n\n Computes the parallel coordinates plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Pie","title":"Chart.Pie","content":"Chart.Pie \nPie \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Pie","title":"Chart.Pie","content":"Chart.Pie \nPie \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Point","title":"Chart.Point","content":"Chart.Point \nPoint \nCreates a Point chart, which uses Points in a 2D space to visualize data. "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Point","title":"Chart.Point","content":"Chart.Point \nPoint \nCreates a Point chart, which uses Points in a 2D space to visualize data. "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart, where data is visualized as points on a geographic map.\n\n Parameters:\n\n locations   : Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See \u0060locationmode\u0060 for more info.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart, where data is visualized as points on a geographic map.\n\n Parameters:\n \n lonlat      : Sets the (longitude,latitude) coordinates (in degrees North, degrees South).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart, where data is visualized as points on a geographic map.\n\n Parameters:\n \n longitudes  : Sets the longitude coordinates (in degrees East).\n\n latitudes   : Sets the latitude coordinates (in degrees North).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Polar","title":"Chart.Polar","content":"Chart.Polar \nPolar \n\n Uses points, line or both depending on the mode to represent data points in a polar chart\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Polar","title":"Chart.Polar","content":"Chart.Polar \nPolar \n\n Uses points, line or both depending on the mode to represent data points in a polar chart\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting two Y values per data point, with each Y value being drawn as a line \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting two Y values per data point, with each Y value being drawn as a line \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting two Y values per data point, with each Y value being drawn as a line \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting two Y values per data point, with each Y value being drawn as a line \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Scatter","title":"Chart.Scatter","content":"Chart.Scatter \nScatter \nCreates a Scatter chart. Scatter charts are the basis of Point, Line, and Bubble Charts in Plotly, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Scatter","title":"Chart.Scatter","content":"Chart.Scatter \nScatter \nCreates a Scatter chart. Scatter charts are the basis of Point, Line, and Bubble Charts in Plotly, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Scatter3d","title":"Chart.Scatter3d","content":"Chart.Scatter3d \nScatter3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Scatter3d","title":"Chart.Scatter3d","content":"Chart.Scatter3d \nScatter3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized on a geographic map.\n ScatterGeo charts are the basis of GeoPoint, GeoLine, and GeoBubble Charts, and can be customized as such. We also provide abstractions for those: Chart.GeoPoint, Chart.GeoLine, Chart.GeoBubble\n\n Parameters:\n\n locations   : Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See \u0060locationmode\u0060 for more info.\n\n mode        : Determines the drawing mode for this scatter trace.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized on a geographic map.\n ScatterGeo charts are the basis of GeoPoint, GeoLine, and GeoBubble Charts, and can be customized as such. We also provide abstractions for those: Chart.GeoPoint, Chart.GeoLine, Chart.GeoBubble\n\n Parameters:\n\n lonlat      : Sets the (longitude,latitude) coordinates (in degrees North, degrees South).\n\n mode        : Determines the drawing mode for this scatter trace.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized on a geographic map.\n ScatterGeo charts are the basis of GeoPoint, GeoLine, and GeoBubble Charts, and can be customized as such. We also provide abstractions for those: Chart.GeoPoint, Chart.GeoLine, Chart.GeoBubble\n\n Parameters:\n \n longitudes  : Sets the longitude coordinates (in degrees East).\n\n latitudes   : Sets the latitude coordinates (in degrees North).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n Showlegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Spline","title":"Chart.Spline","content":"Chart.Spline \nSpline \nCreates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.\n Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X. "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Spline","title":"Chart.Spline","content":"Chart.Spline \nSpline \nCreates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.\n Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X. "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#SplineArea","title":"Chart.SplineArea","content":"Chart.SplineArea \nSplineArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#SplineArea","title":"Chart.SplineArea","content":"Chart.SplineArea \nSplineArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Splom","title":"Chart.Splom","content":"Chart.Splom \nSplom \n\n Computes the Splom plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Splom","title":"Chart.Splom","content":"Chart.Splom \nSplom \n\n Computes the parallel coordinates plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#StackedArea","title":"Chart.StackedArea","content":"Chart.StackedArea \nStackedArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#StackedArea","title":"Chart.StackedArea","content":"Chart.StackedArea \nStackedArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#StackedBar","title":"Chart.StackedBar","content":"Chart.StackedBar \nStackedBar \n\n Displays series of tcolumn chart type as stacked bars.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#StackedBar","title":"Chart.StackedBar","content":"Chart.StackedBar \nStackedBar \n\n Displays series of tcolumn chart type as stacked bars.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#StackedColumn","title":"Chart.StackedColumn","content":"Chart.StackedColumn \nStackedColumn \n\n Displays series of column chart type as stacked columns.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#StackedColumn","title":"Chart.StackedColumn","content":"Chart.StackedColumn \nStackedColumn \n\n Displays series of column chart type as stacked columns.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Sunburst","title":"Chart.Sunburst","content":"Chart.Sunburst \nSunburst \n\n Creates a sunburst chart. Visualize hierarchical data spanning outward radially from root to leaves.\n Applies the styles of sundburst plot to TraceObjects \n\n Parameters:\n\n labels: Sets the labels of each of the sectors.\n\n parents: Sets the parent sectors for each of the sectors. Empty string items \u0027\u0027 are understood to reference the root node in the hierarchy. If \u0060ids\u0060 is filled, \u0060parents\u0060 items are understood to be \u0022ids\u0022 themselves. When \u0060ids\u0060 is not set, plotly attempts to find matching items in \u0060labels\u0060, but beware they must be unique.\n\n Ids: Assigns id labels to each datum. These ids for object constancy of data points during animation.\n\n Values: Sets the values associated with each of the sectors. Use with \u0060branchvalues\u0060 to determine how the values are summed.\n\n Text: Sets text elements associated with each sector. If trace \u0060textinfo\u0060 contains a \u0022text\u0022 flag, these elements will be seen on the chart. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n Branchvalues: Determines how the items in \u0060values\u0060 are summed. When set to \u0022total\u0022, items in \u0060values\u0060 are taken to be value of all its descendants. When set to \u0022remainder\u0022, items in \u0060values\u0060 corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\n\n Level: Sets the level from which this trace hierarchy is rendered. Set \u0060level\u0060 to \u0060\u0027\u0027\u0060 to start from the root node in the hierarchy. Must be an \u0022id\u0022 if \u0060ids\u0060 is filled in, otherwise plotly attempts to find a matching item in \u0060labels\u0060.\n\n Maxdepth: Sets the number of rendered sectors from any given \u0060level\u0060. Set \u0060maxdepth\u0060 to \u0022-1\u0022 to render all the levels in the hierarchy.\n\n Colorbar: Sets the Colorbar for the chart\n\nColors: Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Surface","title":"Chart.Surface","content":"Chart.Surface \nSurface \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Table","title":"Chart.Table","content":"Chart.Table \nTable \n\n creates table out of header sequence and row sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Treemap","title":"Chart.Treemap","content":"Chart.Treemap \nTreemap \n\n Creates a treemap chart. Treemap charts visualize hierarchical data using nested rectangles. Same as Sunburst the hierarchy is defined by labels and parents attributes. Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar as well.\n\n Parameters:\n\n labels: Sets the labels of each of the sectors.\n\n parents: Sets the parent sectors for each of the sectors. Empty string items \u0027\u0027 are understood to reference the root node in the hierarchy. If \u0060ids\u0060 is filled, \u0060parents\u0060 items are understood to be \u0022ids\u0022 themselves. When \u0060ids\u0060 is not set, plotly attempts to find matching items in \u0060labels\u0060, but beware they must be unique.\n\n Ids: Assigns id labels to each datum. These ids for object constancy of data points during animation.\n\n Values: Sets the values associated with each of the sectors. Use with \u0060branchvalues\u0060 to determine how the values are summed.\n\n Text: Sets text elements associated with each sector. If trace \u0060textinfo\u0060 contains a \u0022text\u0022 flag, these elements will be seen on the chart. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n Branchvalues: Determines how the items in \u0060values\u0060 are summed. When set to \u0022total\u0022, items in \u0060values\u0060 are taken to be value of all its descendants. When set to \u0022remainder\u0022, items in \u0060values\u0060 corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\n\n Level: Sets the level from which this trace hierarchy is rendered. Set \u0060level\u0060 to \u0060\u0027\u0027\u0060 to start from the root node in the hierarchy. Must be an \u0022id\u0022 if \u0060ids\u0060 is filled in, otherwise plotly attempts to find a matching item in \u0060labels\u0060.\n\n Maxdepth: Sets the number of rendered sectors from any given \u0060level\u0060. Set \u0060maxdepth\u0060 to \u0022-1\u0022 to render all the levels in the hierarchy.\n\n Colorbar: Sets the Colorbar for the chart\n\nColors: Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Violin","title":"Chart.Violin","content":"Chart.Violin \nViolin \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.       \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Violin","title":"Chart.Violin","content":"Chart.Violin \nViolin \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.            \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Waterfall","title":"Chart.Waterfall","content":"Chart.Waterfall \nWaterfall \n\n Creates a waterfall chart. Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values\n\n Parameters:\n\n xyMeasures      : triple sequence containing x coordinates, y coordinates, and the type of measure used for each bar.\n\n Base            : Sets where the bar base is drawn (in position axis units).\n\n Width           : Sets the bar width (in position axis units).\n\n Orientation     : Sets the orientation of the bars. With \u0022v\u0022 (\u0022h\u0022), the value of the each bar spans along the vertical (horizontal).\n\n Connector       : Sets the styling of the connector lines\n\n AlignmentGroup  : Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\n\n OffsetGroup     : Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\n\n Offset          : Shifts the position where the bar is drawn (in position axis units). In \u0022group\u0022 barmode, traces that set \u0022offset\u0022 will be excluded and drawn in \u0022overlay\u0022 mode instead.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Waterfall","title":"Chart.Waterfall","content":"Chart.Waterfall \nWaterfall \n\n Creates a waterfall chart. Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values\n\n Parameters:\n\n x               : Sets the x coordinates.\n\n y               : Sets the y coordinates.\n\n Base            : Sets where the bar base is drawn (in position axis units).\n\n Width           : Sets the bar width (in position axis units).\n\n Measure         : An array containing types of values. By default the values are considered as \u0027relative\u0027. However; it is possible to use \u0027total\u0027 to compute the sums. Also \u0027absolute\u0027 could be applied to reset the computed total or to declare an initial value where needed.\n\n Orientation     : Sets the orientation of the bars. With \u0022v\u0022 (\u0022h\u0022), the value of the each bar spans along the vertical (horizontal).\n\n Connector       : Sets the styling of the connector lines\n\n AlignmentGroup  : Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\n\n OffsetGroup     : Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\n\n Offset          : Shifts the position where the bar is drawn (in position axis units). In \u0022group\u0022 barmode, traces that set \u0022offset\u0022 will be excluded and drawn in \u0022overlay\u0022 mode instead.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#WindRose","title":"Chart.WindRose","content":"Chart.WindRose \nWindRose \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html","title":"ChartDescription","content":"ChartDescription \n \nChartDescription.create \ncreate \nChartDescription.toHtml \ntoHtml \nChartDescription.Heading \nHeading \nChartDescription.Text \nText"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#create","title":"ChartDescription.create","content":"ChartDescription.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#toHtml","title":"ChartDescription.toHtml","content":"ChartDescription.toHtml \ntoHtml \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#Heading","title":"ChartDescription.Heading","content":"ChartDescription.Heading \nHeading \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#Text","title":"ChartDescription.Text","content":"ChartDescription.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html","title":"Colorbar","content":"Colorbar \n\n Colorbar type inherits from dynamic object\n \nColorbar.( .ctor ) \n( .ctor ) \nColorbar.init \ninit \nColorbar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html#( .ctor )","title":"Colorbar.( .ctor )","content":"Colorbar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html#init","title":"Colorbar.init","content":"Colorbar.init \ninit \n\n Initialized Colorbar object\n"},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html#style","title":"Colorbar.style","content":"Colorbar.style \nstyle \n\n Applies the styles to Lighting()\n"},{"uri":"https://plotly.net/reference/plotly-net-config.html","title":"Config","content":"Config \n\n Config \n \nConfig.( .ctor ) \n( .ctor ) \nConfig.init \ninit \nConfig.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-config.html#( .ctor )","title":"Config.( .ctor )","content":"Config.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-config.html#init","title":"Config.init","content":"Config.init \ninit \n\n Init Legend type\n"},{"uri":"https://plotly.net/reference/plotly-net-config.html#style","title":"Config.style","content":"Config.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-contour.html","title":"Contour","content":"Contour \n\n Contour object inherits from dynamic object\n \nContour.( .ctor ) \n( .ctor ) \nContour.init \ninit \nContour.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-contour.html#( .ctor )","title":"Contour.( .ctor )","content":"Contour.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-contour.html#init","title":"Contour.init","content":"Contour.init \ninit \n\n Initialized a Contour object\n"},{"uri":"https://plotly.net/reference/plotly-net-contour.html#style","title":"Contour.style","content":"Contour.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-contours.html","title":"Contours","content":"Contours \n\n Contours type inherits from dynamic object\n \nContours.( .ctor ) \n( .ctor ) \nContours.init \ninit \nContours.initXyz \ninitXyz \nContours.style \nstyle \nContours.styleXyz \nstyleXyz"},{"uri":"https://plotly.net/reference/plotly-net-contours.html#( .ctor )","title":"Contours.( .ctor )","content":"Contours.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-contours.html#init","title":"Contours.init","content":"Contours.init \ninit \n\n Initialized Contours object\n"},{"uri":"https://plotly.net/reference/plotly-net-contours.html#initXyz","title":"Contours.initXyz","content":"Contours.initXyz \ninitXyz \n"},{"uri":"https://plotly.net/reference/plotly-net-contours.html#style","title":"Contours.style","content":"Contours.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-contours.html#styleXyz","title":"Contours.styleXyz","content":"Contours.styleXyz \nstyleXyz \n"},{"uri":"https://plotly.net/reference/plotly-net-cumulative.html","title":"Cumulative","content":"Cumulative \n\n Cumulative type inherits from dynamic object\n \nCumulative.( .ctor ) \n( .ctor ) \nCumulative.init \ninit \nCumulative.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-cumulative.html#( .ctor )","title":"Cumulative.( .ctor )","content":"Cumulative.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-cumulative.html#init","title":"Cumulative.init","content":"Cumulative.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-cumulative.html#style","title":"Cumulative.style","content":"Cumulative.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-dimensions.html","title":"Dimensions","content":"Dimensions \n\n Dimensions type inherits from dynamic object\n \nDimensions.( .ctor ) \n( .ctor ) \nDimensions.init \ninit \nDimensions.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-dimensions.html#( .ctor )","title":"Dimensions.( .ctor )","content":"Dimensions.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-dimensions.html#init","title":"Dimensions.init","content":"Dimensions.init \ninit \n\n Initialized Dimensions object\n"},{"uri":"https://plotly.net/reference/plotly-net-dimensions.html#style","title":"Dimensions.style","content":"Dimensions.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html","title":"DisplayOptions","content":"DisplayOptions \n \nDisplayOptions.( .ctor ) \n( .ctor ) \nDisplayOptions.getReplacements \ngetReplacements \nDisplayOptions.init \ninit \nDisplayOptions.replaceHtmlPlaceholders \nreplaceHtmlPlaceholders \nDisplayOptions.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#( .ctor )","title":"DisplayOptions.( .ctor )","content":"DisplayOptions.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#getReplacements","title":"DisplayOptions.getReplacements","content":"DisplayOptions.getReplacements \ngetReplacements \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#init","title":"DisplayOptions.init","content":"DisplayOptions.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#replaceHtmlPlaceholders","title":"DisplayOptions.replaceHtmlPlaceholders","content":"DisplayOptions.replaceHtmlPlaceholders \nreplaceHtmlPlaceholders \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#style","title":"DisplayOptions.style","content":"DisplayOptions.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-domain.html","title":"Domain","content":"Domain \n\n Dimensions type inherits from dynamic object\n \nDomain.( .ctor ) \n( .ctor ) \nDomain.init \ninit \nDomain.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-domain.html#( .ctor )","title":"Domain.( .ctor )","content":"Domain.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-domain.html#init","title":"Domain.init","content":"Domain.init \ninit \n\n Initialized Dimensions object\n"},{"uri":"https://plotly.net/reference/plotly-net-domain.html#style","title":"Domain.style","content":"Domain.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html","title":"DynamicObj","content":"DynamicObj \n \nDynamicObj.( .ctor ) \n( .ctor ) \nDynamicObj.GetProperties \nGetProperties \nDynamicObj.Remove \nRemove \nDynamicObj.SetValue \nSetValue \nDynamicObj.TryGetTypedValue \nTryGetTypedValue \nDynamicObj.TryGetValue \nTryGetValue \nDynamicObj.GetValue \nGetValue \nDynamicObj.Remove \nRemove \nDynamicObj.( ? ) \n( ? ) \nDynamicObj.( ?\u003C- ) \n( ?\u003C- )"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#( .ctor )","title":"DynamicObj.( .ctor )","content":"DynamicObj.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#GetProperties","title":"DynamicObj.GetProperties","content":"DynamicObj.GetProperties \nGetProperties \n\n Returns and the properties of\n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#Remove","title":"DynamicObj.Remove","content":"DynamicObj.Remove \nRemove \n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#SetValue","title":"DynamicObj.SetValue","content":"DynamicObj.SetValue \nSetValue \n\n Sets property value, creating a new property if none exists\n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#TryGetTypedValue","title":"DynamicObj.TryGetTypedValue","content":"DynamicObj.TryGetTypedValue \nTryGetTypedValue \n\n Gets property value\n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#TryGetValue","title":"DynamicObj.TryGetValue","content":"DynamicObj.TryGetValue \nTryGetValue \n\n Gets property value\n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#GetValue","title":"DynamicObj.GetValue","content":"DynamicObj.GetValue \nGetValue \n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#Remove","title":"DynamicObj.Remove","content":"DynamicObj.Remove \nRemove \n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#( ? )","title":"DynamicObj.( ? )","content":"DynamicObj.( ? ) \n( ? ) \n"},{"uri":"https://plotly.net/reference/plotly-net-dynamicobj.html#( ?\u003C- )","title":"DynamicObj.( ?\u003C- )","content":"DynamicObj.( ?\u003C- ) \n( ?\u003C- ) \n"},{"uri":"https://plotly.net/reference/plotly-net-error.html","title":"Error","content":"Error \n\n Error type inherits from dynamic object\n \nError.( .ctor ) \n( .ctor ) \nError.init \ninit \nError.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-error.html#( .ctor )","title":"Error.( .ctor )","content":"Error.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-error.html#init","title":"Error.init","content":"Error.init \ninit \nInit Error type"},{"uri":"https://plotly.net/reference/plotly-net-error.html#style","title":"Error.style","content":"Error.style \nstyle \nCreates a function that applies the given style parameters to an Error object"},{"uri":"https://plotly.net/reference/plotly-net-font.html","title":"Font","content":"Font \n\n Font type inherits from dynamic object\n \nFont.( .ctor ) \n( .ctor ) \nFont.init \ninit \nFont.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-font.html#( .ctor )","title":"Font.( .ctor )","content":"Font.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-font.html#init","title":"Font.init","content":"Font.init \ninit \n\n Init Font()\n"},{"uri":"https://plotly.net/reference/plotly-net-font.html#style","title":"Font.style","content":"Font.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-frame.html","title":"Frame","content":"Frame \n \nFrame.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-frame.html#( .ctor )","title":"Frame.( .ctor )","content":"Frame.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-funnelconnector.html","title":"FunnelConnector","content":"FunnelConnector \n\n Styles for connector lines in Funnel Charts.\n\n Parameters:\n\n Line          : Sets the Line style for this WaterfallConnector\n\n Visible       : Wether or not connectors are visible\n\n ConnectorMode : Sets the shape of connector lines.\n \nFunnelConnector.( .ctor ) \n( .ctor ) \nFunnelConnector.init \ninit \nFunnelConnector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-funnelconnector.html#( .ctor )","title":"FunnelConnector.( .ctor )","content":"FunnelConnector.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-funnelconnector.html#init","title":"FunnelConnector.init","content":"FunnelConnector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-funnelconnector.html#style","title":"FunnelConnector.style","content":"FunnelConnector.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-geo.html","title":"Geo","content":"Geo \nDetermines the style of the map shown in geo traces \nGeo.( .ctor ) \n( .ctor ) \nGeo.init \ninit \nGeo.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-geo.html#( .ctor )","title":"Geo.( .ctor )","content":"Geo.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-geo.html#init","title":"Geo.init","content":"Geo.init \ninit \nInitialize a Geo object that determines the style of the map shown in geo traces"},{"uri":"https://plotly.net/reference/plotly-net-geo.html#style","title":"Geo.style","content":"Geo.style \nstyle \nCreate a function that applies the given style parameters to a Geo object."},{"uri":"https://plotly.net/reference/plotly-net-geoprojection.html","title":"GeoProjection","content":"GeoProjection \nDetermines the map projection in geo traces. \nGeoProjection.( .ctor ) \n( .ctor ) \nGeoProjection.init \ninit \nGeoProjection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-geoprojection.html#( .ctor )","title":"GeoProjection.( .ctor )","content":"GeoProjection.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-geoprojection.html#init","title":"GeoProjection.init","content":"GeoProjection.init \ninit \nInitialize a GeoProjection object that determines the map projection in geo traces."},{"uri":"https://plotly.net/reference/plotly-net-geoprojection.html#style","title":"GeoProjection.style","content":"GeoProjection.style \nstyle \nCreate a function that applies the given style parameters to a GeoProjection object."},{"uri":"https://plotly.net/reference/plotly-net-geoprojectionrotation.html","title":"GeoProjectionRotation","content":"GeoProjectionRotation \nDetermines Map rotation in GeoProjections \nGeoProjectionRotation.( .ctor ) \n( .ctor ) \nGeoProjectionRotation.init \ninit \nGeoProjectionRotation.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-geoprojectionrotation.html#( .ctor )","title":"GeoProjectionRotation.( .ctor )","content":"GeoProjectionRotation.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-geoprojectionrotation.html#init","title":"GeoProjectionRotation.init","content":"GeoProjectionRotation.init \ninit \nInitialize a GeoProjectionRotation object that determines Map rotation in GeoProjections"},{"uri":"https://plotly.net/reference/plotly-net-geoprojectionrotation.html#style","title":"GeoProjectionRotation.style","content":"GeoProjectionRotation.style \nstyle \nCreate a function that applies the given style parameters to a GeoProjectionRotation object"},{"uri":"https://plotly.net/reference/plotly-net-hoverlabel.html","title":"Hoverlabel","content":"Hoverlabel \n\n Hoverlabel type inherits from dynamic object\n \nHoverlabel.( .ctor ) \n( .ctor ) \nHoverlabel.init \ninit \nHoverlabel.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-hoverlabel.html#( .ctor )","title":"Hoverlabel.( .ctor )","content":"Hoverlabel.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-hoverlabel.html#init","title":"Hoverlabel.init","content":"Hoverlabel.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-hoverlabel.html#style","title":"Hoverlabel.style","content":"Hoverlabel.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html","title":"Layout","content":"Layout \n\n Layout \n \nLayout.( .ctor ) \n( .ctor ) \nLayout.AddLinearAxis \nAddLinearAxis \nLayout.AddMap \nAddMap \nLayout.AddScene \nAddScene \nLayout.GetLayoutGrid \nGetLayoutGrid \nLayout.SetLayoutGrid \nSetLayoutGrid \nLayout.UpdateLinearAxisById \nUpdateLinearAxisById \nLayout.UpdateMapById \nUpdateMapById \nLayout.init \ninit \nLayout.setLegend \nsetLegend \nLayout.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#( .ctor )","title":"Layout.( .ctor )","content":"Layout.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#AddLinearAxis","title":"Layout.AddLinearAxis","content":"Layout.AddLinearAxis \nAddLinearAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#AddMap","title":"Layout.AddMap","content":"Layout.AddMap \nAddMap \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#AddScene","title":"Layout.AddScene","content":"Layout.AddScene \nAddScene \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#GetLayoutGrid","title":"Layout.GetLayoutGrid","content":"Layout.GetLayoutGrid \nGetLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#SetLayoutGrid","title":"Layout.SetLayoutGrid","content":"Layout.SetLayoutGrid \nSetLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#UpdateLinearAxisById","title":"Layout.UpdateLinearAxisById","content":"Layout.UpdateLinearAxisById \nUpdateLinearAxisById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#UpdateMapById","title":"Layout.UpdateMapById","content":"Layout.UpdateMapById \nUpdateMapById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#init","title":"Layout.init","content":"Layout.init \ninit \n\n Init Layout type\n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setLegend","title":"Layout.setLegend","content":"Layout.setLegend \nsetLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#style","title":"Layout.style","content":"Layout.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutgrid.html","title":"LayoutGrid","content":"LayoutGrid \n\n A plot grid that can contain subplots with shared axes.\n \nLayoutGrid.( .ctor ) \n( .ctor ) \nLayoutGrid.init \ninit \nLayoutGrid.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutgrid.html#( .ctor )","title":"LayoutGrid.( .ctor )","content":"LayoutGrid.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutgrid.html#init","title":"LayoutGrid.init","content":"LayoutGrid.init \ninit \n\n Initializes LayoutGrid object\n\n\nSubPlots    : Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like \u0022xy\u0022 or \u0022x3y2\u0022, or \u0022\u0022 to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support \u0060domain\u0060 can place themselves in this grid separately using the \u0060gridcell\u0060 attribute.\n\nXAxes       : Used with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an y axis id like \u0022y\u0022, \u0022y2\u0022, etc., or \u0022\u0022 to not put a y axis in that row. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060xaxes\u0060 is present, will generate consecutive IDs.\n\nYAxes       : Used with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an x axis id like \u0022x\u0022, \u0022x2\u0022, etc., or \u0022\u0022 to not put an x axis in that column. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060yaxes\u0060 is present, will generate consecutive IDs.\n\nRows        : The number of rows in the grid. If you provide a 2D \u0060subplots\u0060 array or a \u0060yaxes\u0060 array, its length is used as the default. But it\u0027s also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.\n\nColumns     : The number of columns in the grid. If you provide a 2D \u0060subplots\u0060 array, the length of its longest row is used as the default. If you give an \u0060xaxes\u0060 array, its length is used as the default. But it\u0027s also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.\n\nRowOrder    : Is the first row the top or the bottom? Note that columns are always enumerated from left to right.\n\nPattern     : If no \u0060subplots\u0060, \u0060xaxes\u0060, or \u0060yaxes\u0060 are given but we do have \u0060rows\u0060 and \u0060columns\u0060, we can generate defaults using consecutive axis IDs, in two ways: \u0022coupled\u0022 gives one x axis per column and one y axis per row. \u0022independent\u0022 uses a new xy pair for each cell, left-to-right across each row then iterating rows according to \u0060roworder\u0060.\n\nXGap        : Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.\n\nYGap        : Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.\n\nDomain      : Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.\n\nXSide       : Sets where the x axis labels and titles go. \u0022bottom\u0022 means the very bottom of the grid. \u0022bottom plot\u0022 is the lowest plot that each x axis is used in. \u0022top\u0022 and \u0022top plot\u0022 are similar.\n\nYSide       : Sets where the y axis labels and titles go. \u0022left\u0022 means the very left edge of the grid. \u0022left plot\u0022 is the leftmost plot that each y axis is used in. \u0022right\u0022 and \u0022right plot\u0022 are similar.\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutgrid.html#style","title":"LayoutGrid.style","content":"LayoutGrid.style \nstyle \n\nSubPlots    : Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like \u0022xy\u0022 or \u0022x3y2\u0022, or \u0022\u0022 to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support \u0060domain\u0060 can place themselves in this grid separately using the \u0060gridcell\u0060 attribute.\n\nXAxes       : Used with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an y axis id like \u0022y\u0022, \u0022y2\u0022, etc., or \u0022\u0022 to not put a y axis in that row. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060xaxes\u0060 is present, will generate consecutive IDs.\n\nYAxes       : Used with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an x axis id like \u0022x\u0022, \u0022x2\u0022, etc., or \u0022\u0022 to not put an x axis in that column. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060yaxes\u0060 is present, will generate consecutive IDs.\n\nRows        : The number of rows in the grid. If you provide a 2D \u0060subplots\u0060 array or a \u0060yaxes\u0060 array, its length is used as the default. But it\u0027s also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.\n\nColumns     : The number of columns in the grid. If you provide a 2D \u0060subplots\u0060 array, the length of its longest row is used as the default. If you give an \u0060xaxes\u0060 array, its length is used as the default. But it\u0027s also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.\n\nRowOrder    : Is the first row the top or the bottom? Note that columns are always enumerated from left to right.\n\nPattern     : If no \u0060subplots\u0060, \u0060xaxes\u0060, or \u0060yaxes\u0060 are given but we do have \u0060rows\u0060 and \u0060columns\u0060, we can generate defaults using consecutive axis IDs, in two ways: \u0022coupled\u0022 gives one x axis per column and one y axis per row. \u0022independent\u0022 uses a new xy pair for each cell, left-to-right across each row then iterating rows according to \u0060roworder\u0060.\n\nXGap        : Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.\n\nYGap        : Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.\n\nDomain      : Sets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.\n\nXSide       : Sets where the x axis labels and titles go. \u0022bottom\u0022 means the very bottom of the grid. \u0022bottom plot\u0022 is the lowest plot that each x axis is used in. \u0022top\u0022 and \u0022top plot\u0022 are similar.\n\nYSide       : Sets where the y axis labels and titles go. \u0022left\u0022 means the very left edge of the grid. \u0022left plot\u0022 is the leftmost plot that each y axis is used in. \u0022right\u0022 and \u0022right plot\u0022 are similar.\n"},{"uri":"https://plotly.net/reference/plotly-net-legend.html","title":"Legend","content":"Legend \n\n Legend \n \nLegend.( .ctor ) \n( .ctor ) \nLegend.init \ninit \nLegend.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-legend.html#( .ctor )","title":"Legend.( .ctor )","content":"Legend.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-legend.html#init","title":"Legend.init","content":"Legend.init \ninit \n\n Init Legend type\n"},{"uri":"https://plotly.net/reference/plotly-net-legend.html#style","title":"Legend.style","content":"Legend.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-line.html","title":"Line","content":"Line \n\n Line type inherits from dynamic object\n \nLine.( .ctor ) \n( .ctor ) \nLine.init \ninit \nLine.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-line.html#( .ctor )","title":"Line.( .ctor )","content":"Line.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-line.html#init","title":"Line.init","content":"Line.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-line.html#style","title":"Line.style","content":"Line.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html","title":"Link","content":"Link \n \nLink.Create \nCreate \nLink.Source \nSource \nLink.Target \nTarget \nLink.Value \nValue \nLink.Label \nLabel \nLink.Color \nColor \nLink.LineColor \nLineColor \nLink.LineWidth \nLineWidth"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Create","title":"Link.Create","content":"Link.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Source","title":"Link.Source","content":"Link.Source \nSource \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Target","title":"Link.Target","content":"Link.Target \nTarget \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Value","title":"Link.Value","content":"Link.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Label","title":"Link.Label","content":"Link.Label \nLabel \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Color","title":"Link.Color","content":"Link.Color \nColor \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#LineColor","title":"Link.LineColor","content":"Link.LineColor \nLineColor \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#LineWidth","title":"Link.LineWidth","content":"Link.LineWidth \nLineWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-margin.html","title":"Margin","content":"Margin \n\n Margin \n \nMargin.( .ctor ) \n( .ctor ) \nMargin.init \ninit \nMargin.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-margin.html#( .ctor )","title":"Margin.( .ctor )","content":"Margin.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-margin.html#init","title":"Margin.init","content":"Margin.init \ninit \n\n Init Margin type\n"},{"uri":"https://plotly.net/reference/plotly-net-margin.html#style","title":"Margin.style","content":"Margin.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-marker.html","title":"Marker","content":"Marker \n\n Marker type inherits from dynamic object\n \nMarker.( .ctor ) \n( .ctor ) \nMarker.init \ninit \nMarker.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-marker.html#( .ctor )","title":"Marker.( .ctor )","content":"Marker.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-marker.html#init","title":"Marker.init","content":"Marker.init \ninit \n\n Initialized Marker object\n"},{"uri":"https://plotly.net/reference/plotly-net-marker.html#style","title":"Marker.style","content":"Marker.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-meanline.html","title":"Meanline","content":"Meanline \n\n Meanline type inherits from dynamic object (parent violin)\n \nMeanline.( .ctor ) \n( .ctor ) \nMeanline.init \ninit \nMeanline.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-meanline.html#( .ctor )","title":"Meanline.( .ctor )","content":"Meanline.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-meanline.html#init","title":"Meanline.init","content":"Meanline.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-meanline.html#style","title":"Meanline.style","content":"Meanline.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html","title":"Node","content":"Node \n \nNode.Create \nCreate \nNode.Label \nLabel \nNode.Groups \nGroups \nNode.XRank \nXRank \nNode.YRank \nYRank \nNode.Color \nColor \nNode.LineColor \nLineColor \nNode.LineWidth \nLineWidth"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Create","title":"Node.Create","content":"Node.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Label","title":"Node.Label","content":"Node.Label \nLabel \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Groups","title":"Node.Groups","content":"Node.Groups \nGroups \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#XRank","title":"Node.XRank","content":"Node.XRank \nXRank \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#YRank","title":"Node.YRank","content":"Node.YRank \nYRank \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Color","title":"Node.Color","content":"Node.Color \nColor \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#LineColor","title":"Node.LineColor","content":"Node.LineColor \nLineColor \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#LineWidth","title":"Node.LineWidth","content":"Node.LineWidth \nLineWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-pathbar.html","title":"Pathbar","content":"Pathbar \n \nPathbar.( .ctor ) \n( .ctor ) \nPathbar.init \ninit \nPathbar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-pathbar.html#( .ctor )","title":"Pathbar.( .ctor )","content":"Pathbar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-pathbar.html#init","title":"Pathbar.init","content":"Pathbar.init \ninit \n\nInitializes pathbar object (used in Chart.Treemap)\n\nParameters:\n\nVisible  : Determines if the path bar is drawn i.e. outside the trace \u0060domain\u0060 and with one pixel gap.\n         \nSide     : Determines on which side of the the treemap the \u0060pathbar\u0060 should be presented.\n         \nEdgeShape: Determines which shape is used for edges between \u0060pathbar\u0060 labels.\n         \nThickness: Sets the thickness of \u0060pathbar\u0060 (in px). If not specified the \u0060pathbar.textfont.size\u0060 is used with 3 pixles extra padding on each side.\n         \nTextfont : Sets the font used inside \u0060pathbar\u0060.\n"},{"uri":"https://plotly.net/reference/plotly-net-pathbar.html#style","title":"Pathbar.style","content":"Pathbar.style \nstyle \n\nApplies the given styles to the given pathbar object \n\nParameters:\n\nVisible  : Determines if the path bar is drawn i.e. outside the trace \u0060domain\u0060 and with one pixel gap.\n         \nSide     : Determines on which side of the the treemap the \u0060pathbar\u0060 should be presented.\n         \nEdgeShape: Determines which shape is used for edges between \u0060pathbar\u0060 labels.\n         \nThickness: Sets the thickness of \u0060pathbar\u0060 (in px). If not specified the \u0060pathbar.textfont.size\u0060 is used with 3 pixles extra padding on each side.\n         \nTextfont : Sets the font used inside \u0060pathbar\u0060.\n"},{"uri":"https://plotly.net/reference/plotly-net-rangeslider.html","title":"RangeSlider","content":"RangeSlider \n \nRangeSlider.( .ctor ) \n( .ctor ) \nRangeSlider.init \ninit \nRangeSlider.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-rangeslider.html#( .ctor )","title":"RangeSlider.( .ctor )","content":"RangeSlider.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-rangeslider.html#init","title":"RangeSlider.init","content":"RangeSlider.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-rangeslider.html#style","title":"RangeSlider.style","content":"RangeSlider.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-scene.html","title":"Scene","content":"Scene \n\n Scene \n \nScene.( .ctor ) \n( .ctor ) \nScene.init \ninit \nScene.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-scene.html#( .ctor )","title":"Scene.( .ctor )","content":"Scene.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-scene.html#init","title":"Scene.init","content":"Scene.init \ninit \n\n Initialized Scene object\n"},{"uri":"https://plotly.net/reference/plotly-net-scene.html#style","title":"Scene.style","content":"Scene.style \nstyle \n\n Applies the styles to Scene()\n"},{"uri":"https://plotly.net/reference/plotly-net-selected.html","title":"Selected","content":"Selected \n\n Selected type inherits from dynamic object\n \nSelected.( .ctor ) \n( .ctor ) \nSelected.init \ninit \nSelected.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-selected.html#( .ctor )","title":"Selected.( .ctor )","content":"Selected.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-selected.html#init","title":"Selected.init","content":"Selected.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-selected.html#style","title":"Selected.style","content":"Selected.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-shape.html","title":"Shape","content":"Shape \n\n Shape type inherits from dynamic object\n \nShape.( .ctor ) \n( .ctor ) \nShape.init \ninit \nShape.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-shape.html#( .ctor )","title":"Shape.( .ctor )","content":"Shape.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-shape.html#init","title":"Shape.init","content":"Shape.init \ninit \n\n Init Shape type\n"},{"uri":"https://plotly.net/reference/plotly-net-shape.html#style","title":"Shape.style","content":"Shape.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-stockdata.html","title":"StockData","content":"StockData \n \nStockData.Create \nCreate \nStockData.create \ncreate \nStockData.Open \nOpen \nStockData.High \nHigh \nStockData.Low \nLow \nStockData.Close \nClose"},{"uri":"https://plotly.net/reference/plotly-net-stockdata.html#Create","title":"StockData.Create","content":"StockData.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-stockdata.html#create","title":"StockData.create","content":"StockData.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-stockdata.html#Open","title":"StockData.Open","content":"StockData.Open \nOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-stockdata.html#High","title":"StockData.High","content":"StockData.High \nHigh \n"},{"uri":"https://plotly.net/reference/plotly-net-stockdata.html#Low","title":"StockData.Low","content":"StockData.Low \nLow \n"},{"uri":"https://plotly.net/reference/plotly-net-stockdata.html#Close","title":"StockData.Close","content":"StockData.Close \nClose \n"},{"uri":"https://plotly.net/reference/plotly-net-tablecells.html","title":"TableCells","content":"TableCells \n\n Cells type inherits from dynamic object\n \nTableCells.( .ctor ) \n( .ctor ) \nTableCells.init \ninit \nTableCells.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-tablecells.html#( .ctor )","title":"TableCells.( .ctor )","content":"TableCells.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tablecells.html#init","title":"TableCells.init","content":"TableCells.init \ninit \n\n Initialized Cells object\n"},{"uri":"https://plotly.net/reference/plotly-net-tablecells.html#style","title":"TableCells.style","content":"TableCells.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-tableheader.html","title":"TableHeader","content":"TableHeader \n\n Header type inherits from dynamic object\n \nTableHeader.( .ctor ) \n( .ctor ) \nTableHeader.init \ninit \nTableHeader.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-tableheader.html#( .ctor )","title":"TableHeader.( .ctor )","content":"TableHeader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tableheader.html#init","title":"TableHeader.init","content":"TableHeader.init \ninit \n\n Initialized Header object\n"},{"uri":"https://plotly.net/reference/plotly-net-tableheader.html#style","title":"TableHeader.style","content":"TableHeader.style \nstyle \n\n Applies the styles to TableHeader()\n"},{"uri":"https://plotly.net/reference/plotly-net-template.html","title":"Template","content":"Template \n\n Margin \n \nTemplate.( .ctor ) \n( .ctor ) \nTemplate.init \ninit \nTemplate.mapLayoutTemplate \nmapLayoutTemplate \nTemplate.mapTraceTemplates \nmapTraceTemplates \nTemplate.style \nstyle \nTemplate.withColorWay \nwithColorWay"},{"uri":"https://plotly.net/reference/plotly-net-template.html#( .ctor )","title":"Template.( .ctor )","content":"Template.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#init","title":"Template.init","content":"Template.init \ninit \n\n Init Margin type\n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#mapLayoutTemplate","title":"Template.mapLayoutTemplate","content":"Template.mapLayoutTemplate \nmapLayoutTemplate \n\n Applies the styles to Margin()\n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#mapTraceTemplates","title":"Template.mapTraceTemplates","content":"Template.mapTraceTemplates \nmapTraceTemplates \n\n Applies the styles to Margin()\n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#style","title":"Template.style","content":"Template.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#withColorWay","title":"Template.withColorWay","content":"Template.withColorWay \nwithColorWay \n"},{"uri":"https://plotly.net/reference/plotly-net-toimagebuttonoptions.html","title":"ToImageButtonOptions","content":"ToImageButtonOptions \n \nToImageButtonOptions.( .ctor ) \n( .ctor ) \nToImageButtonOptions.init \ninit \nToImageButtonOptions.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-toimagebuttonoptions.html#( .ctor )","title":"ToImageButtonOptions.( .ctor )","content":"ToImageButtonOptions.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-toimagebuttonoptions.html#init","title":"ToImageButtonOptions.init","content":"ToImageButtonOptions.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-toimagebuttonoptions.html#style","title":"ToImageButtonOptions.style","content":"ToImageButtonOptions.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-trace.html","title":"Trace","content":"Trace \n\n Trace type inherits from dynamic object\n \nTrace.( .ctor ) \n( .ctor ) \nTrace.type \ntype"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#( .ctor )","title":"Trace.( .ctor )","content":"Trace.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#type","title":"Trace.type","content":"Trace.type \ntype \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html","title":"Trace3d","content":"Trace3d \n\n Trace type inherits from dynamic object\n \nTrace3d.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#( .ctor )","title":"Trace3d.( .ctor )","content":"Trace3d.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-treemaptiling.html","title":"TreemapTiling","content":"TreemapTiling \n \nTreemapTiling.( .ctor ) \n( .ctor ) \nTreemapTiling.init \ninit \nTreemapTiling.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-treemaptiling.html#( .ctor )","title":"TreemapTiling.( .ctor )","content":"TreemapTiling.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-treemaptiling.html#init","title":"TreemapTiling.init","content":"TreemapTiling.init \ninit \n\nInitializes tiling object (used in Chart.Treemap)\n\nParameters:\n\nPacking      : Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling\n         \nSquarifyRatio: When using \u0022squarify\u0022 \u0060packing\u0060 algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using \u0022squarify\u0022, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.\n         \nFlip         : Determines if the positions obtained from solver are flipped on each axis.\n         \nPad          : Sets the inner padding (in px).\n"},{"uri":"https://plotly.net/reference/plotly-net-treemaptiling.html#style","title":"TreemapTiling.style","content":"TreemapTiling.style \nstyle \n\nApplies the given styles to the given tiling object \n\nParameters:\n\nPacking      : Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling\n         \nSquarifyRatio: When using \u0022squarify\u0022 \u0060packing\u0060 algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using \u0022squarify\u0022, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.\n         \nFlip         : Determines if the positions obtained from solver are flipped on each axis.\n         \nPad          : Sets the inner padding (in px).\n"},{"uri":"https://plotly.net/reference/plotly-net-unselected.html","title":"UnSelected","content":"UnSelected \n\n Selected type inherits from dynamic object\n \nUnSelected.( .ctor ) \n( .ctor ) \nUnSelected.init \ninit \nUnSelected.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-unselected.html#( .ctor )","title":"UnSelected.( .ctor )","content":"UnSelected.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-unselected.html#init","title":"UnSelected.init","content":"UnSelected.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-unselected.html#style","title":"UnSelected.style","content":"UnSelected.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-waterfallconnector.html","title":"WaterfallConnector","content":"WaterfallConnector \n\n Styles for connector lines in Waterfall Charts.\n\n Parameters:\n\n Line          : Sets the Line style for this WaterfallConnector\n\n Visible       : Wether or not connectors are visible\n\n ConnectorMode : Sets the shape of connector lines.\n \nWaterfallConnector.( .ctor ) \n( .ctor ) \nWaterfallConnector.init \ninit \nWaterfallConnector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-waterfallconnector.html#( .ctor )","title":"WaterfallConnector.( .ctor )","content":"WaterfallConnector.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-waterfallconnector.html#init","title":"WaterfallConnector.init","content":"WaterfallConnector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-waterfallconnector.html#style","title":"WaterfallConnector.style","content":"WaterfallConnector.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatterkernelextension.html","title":"FormatterKernelExtension","content":"FormatterKernelExtension \n \nFormatterKernelExtension.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatterkernelextension.html#( .ctor )","title":"FormatterKernelExtension.( .ctor )","content":"FormatterKernelExtension.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/3_0_3d-scatter-plots.html","title":"3D Scatter charts","content":"(**\n---\ntitle: 3D Scatter charts\ncategory: 3D Charts\ncategoryindex: 4\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Scatter charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create three-dimensional scatter charts in F#.\n\nA Scatter3d chart report shows a three-dimensional spinnable view of your data\n*)\n\nopen Plotly.NET \n  \nlet x = [19; 26; 55;]\nlet y = [19; 26; 55;]\nlet z = [19; 26; 55;]\n\nlet scatter3d = \n    Chart.Scatter3d(x,y,z,StyleParam.Mode.Markers)\n    |\u003E Chart.withX_AxisStyle(\u0022my x-axis\u0022)\n    |\u003E Chart.withY_AxisStyle(\u0022my y-axis\u0022)\n    |\u003E Chart.withZ_AxisStyle(\u0022my z-axis\u0022)\n    |\u003E Chart.withSize(800.,800.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nscatter3d\n#endif // IPYNB\n\n(***hide***)\nscatter3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n\n"},{"uri":"https://plotly.net/2_7_heatmaps.html","title":"Heatmaps","content":"(**\n---\ntitle: Heatmaps\ncategory: Simple Charts\ncategoryindex: 3\nindex: 8\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Heatmaps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create heatmap charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n \nlet matrix =\n    [[1.;1.5;0.7;2.7];\n    [2.;0.5;1.2;1.4];\n    [0.1;2.6;2.4;3.0];]\n\nlet rownames = [\u0022p3\u0022;\u0022p2\u0022;\u0022p1\u0022]\nlet colnames = [\u0022Tp0\u0022;\u0022Tp30\u0022;\u0022Tp60\u0022;\u0022Tp160\u0022]\n\nlet colorscaleValue = \n    StyleParam.Colorscale.Custom [(0.0,\u0022#3D9970\u0022);(1.0,\u0022#001f3f\u0022)]\n\n// Generating the Heatmap \nlet heat1 =\n    Chart.Heatmap(\n        matrix,colnames,rownames,\n        Colorscale=colorscaleValue,\n        Showscale=true\n    )\n    |\u003E Chart.withSize(700.,500.)\n    |\u003E Chart.withMarginSize(Left=200.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat1\n#endif // IPYNB\n\n(***hide***)\nheat1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nA heatmap chart can be created using the \u0060Chart.HeatMap\u0060 functions.\nWhen creating heatmap charts, it is usually desirable to provide the values in matrix form, rownames and colnames.\n*)\n\n(**\n## Styling Colorbars\n\nAll charts that contain colorbars can be styled by the \u0060Chart.withColorBarStyle\u0060 function.\nHere is an example that adds a title to the colorbar:\n*)\n\nlet heat2 =\n    heat1\n    |\u003E Chart.withColorBarStyle(\n        \u0022Im the Colorbar\u0022,\n        TitleSide = StyleParam.Side.Right,\n        TitleFont = Font.init(Size=20.)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat2\n#endif // IPYNB\n\n(***hide***)\nheat2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/4_5_splom.html","title":"Scatterplot matrix","content":"(**\n---\ntitle: Scatterplot matrix\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Scatterplot matrix \n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to plot a scatterplot matrix (splom) in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\nlet data = \n    [\n        \u0022A\u0022,[|1.;4.;3.4;0.7;|]\n        \u0022B\u0022,[|3.;1.5;1.7;2.3;|]\n        \u0022C\u0022,[|2.;4.;3.1;5.|]\n        \u0022D\u0022,[|4.;2.;2.;4.;|]\n    ]\n\n(**\nUsing a scatterplot matrix of several different variables can help to determine whether there are any\nrelationships among the variables in the dataset.\n\n**Attention**: this function is not very well tested and does not use the \u0060Chart.Grid\u0060 functionality. \nUntil that is fixed, consider creating splom plot programatically using \u0060Chart.Grid\u0060 for more control.\n*)\n\nlet splom1 =\n    Chart.Splom(data,Color=\u0022blue\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nsplom1\n#endif // IPYNB\n\n(***hide***)\nsplom1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n\n\n"},{"uri":"https://plotly.net/5_0_choropleth-map.html","title":"Choropleth maps","content":"(**\n---\ntitle: Choropleth maps\ncategory: Map Charts\ncategoryindex: 6\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Choropleth maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create choropleth map in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\n// Pure alcohol consumption among adults (age 15\u002B) in 2010\nlet locations,z = \n   [(\u0022Belarus\u0022,17.5); (\u0022Moldova\u0022,16.8);(\u0022Lithuania\u0022,15.4);(\u0022Russia\u0022,15.1);\n    (\u0022Romania\u0022,14.4);(\u0022Ukraine\u0022,13.9);(\u0022Andorra\u0022,13.8);(\u0022Hungary\u0022,13.3);\n    (\u0022Czech Republic\u0022,13.);(\u0022Slovakia\u0022,13.);(\u0022Portugal\u0022,12.9);(\u0022Serbia\u0022,12.6);\n    (\u0022Grenada\u0022,12.5);(\u0022Poland\u0022,12.5);(\u0022Latvia\u0022,12.3);(\u0022Finland\u0022,12.3);\n    (\u0022South Korea\u0022,12.3);(\u0022France\u0022,12.2);(\u0022Australia\u0022,12.2);(\u0022Croatia\u0022,12.2);\n    (\u0022Ireland\u0022,11.9);(\u0022Luxembourg\u0022,11.9);(\u0022Germany\u0022,11.8);(\u0022Slovenia\u0022,11.6);\n    (\u0022United Kingdom\u0022,11.6);(\u0022Denmark\u0022,11.4);(\u0022Bulgaria\u0022,11.4);(\u0022Spain\u0022,11.2);\n    (\u0022Belgium\u0022,11.);(\u0022South Africa\u0022,11.);(\u0022New Zealand\u0022,10.9);(\u0022Gabon\u0022,10.9);\n    (\u0022Namibia\u0022,10.8);(\u0022Switzerland\u0022,10.7);(\u0022Saint Lucia\u0022,10.4);(\u0022Austria\u0022,10.3);\n    (\u0022Estonia\u0022,10.3);(\u0022Greece\u0022,10.3);(\u0022Kazakhstan\u0022,10.3);(\u0022Canada\u0022,10.2);\n    (\u0022Nigeria\u0022,10.1);(\u0022Netherlands\u0022,9.9);(\u0022Uganda\u0022,9.8);(\u0022Rwanda\u0022,9.8);\n    (\u0022Chile\u0022,9.6);(\u0022Argentina\u0022,9.3);(\u0022Burundi\u0022,9.3);(\u0022United States\u0022,9.2);\n    (\u0022Cyprus\u0022,9.2);(\u0022Sweden\u0022,9.2);(\u0022Venezuela\u0022,8.9);(\u0022Paraguay\u0022,8.8);(\u0022Brazil\u0022,8.7);\n    (\u0022Sierra Leone\u0022,8.7);(\u0022Montenegro\u0022,8.7);(\u0022Belize\u0022,8.5);(\u0022Cameroon\u0022,8.4);\n    (\u0022Botswana\u0022,8.4);(\u0022Saint Kitts and Nevis\u0022,8.2);(\u0022Guyana\u0022,8.1);(\u0022Peru\u0022,8.1);\n    (\u0022Panama\u0022,8.);(\u0022Niue\u0022,8.);(\u0022Palau\u0022,7.9);(\u0022Norway\u0022,7.7);(\u0022Tanzania\u0022,7.7);\n    (\u0022Georgia\u0022,7.7);(\u0022Uruguay\u0022,7.6);(\u0022Angola\u0022,7.5);(\u0022Laos\u0022,7.3);(\u0022Japan\u0022,7.2);\n    (\u0022Mexico\u0022,7.2);(\u0022Ecuador\u0022,7.2);(\u0022Dominica\u0022,7.1);(\u0022Iceland\u0022,7.1);\n    (\u0022Thailand\u0022,7.1);(\u0022Bosnia and Herzegovina\u0022,7.1);(\u0022Sao Tome and Principe\u0022,7.1);\n    (\u0022Malta\u0022,7.);(\u0022Albania\u0022,7.);(\u0022Bahamas\u0022,6.9);(\u0022Dominican Republic\u0022,6.9);\n    (\u0022Mongolia\u0022,6.9);(\u0022Cape Verde\u0022,6.9);(\u0022Barbados\u0022,6.8);(\u0022Burkina Faso\u0022,6.8);\n    (\u0022Italy\u0022,6.7);(\u0022Trinidad and Tobago\u0022,6.7);(\u0022China\u0022,6.7);(\u0022Macedonia\u0022,6.7);\n    (\u0022Saint Vincent and the Grenadines\u0022,6.6);(\u0022Equatorial Guinea\u0022,6.6);\n    (\u0022Suriname\u0022,6.6);(\u0022Vietnam\u0022,6.6);(\u0022Lesotho\u0022,6.5);(\u0022Haiti\u0022,6.4);\n    (\u0022Cook Islands\u0022,6.4);(\u0022Colombia\u0022,6.2);(\u0022Ivory Coast\u0022,6.);(\u0022Bolivia\u0022,5.9);\n    (\u0022Swaziland\u0022,5.7);(\u0022Zimbabwe\u0022,5.7);(\u0022Seychelles\u0022,5.6);(\u0022Cambodia\u0022,5.5);\n    (\u0022Puerto Rico\u0022,5.4);(\u0022Netherlands Antilles\u0022,5.4);(\u0022Philippines\u0022,5.4);\n    (\u0022Costa Rica\u0022,5.4);(\u0022Armenia\u0022,5.3);(\u0022Cuba\u0022,5.2);(\u0022Nicaragua\u0022,5.);\n    (\u0022Jamaica\u0022,4.9);(\u0022Ghana\u0022,4.8);(\u0022Liberia\u0022,4.7);(\u0022Uzbekistan\u0022,4.6);\n    (\u0022Chad\u0022,4.4);(\u0022United Arab Emirates\u0022,4.3);(\u0022Kyrgyzstan\u0022,4.3);(\u0022India\u0022,4.3);\n    (\u0022Turkmenistan\u0022,4.3);(\u0022Kenya\u0022,4.3);(\u0022Ethiopia\u0022,4.2);(\u0022Honduras\u0022,4.);\n    (\u0022Guinea-Bissau\u0022,4.);(\u0022Zambia\u0022,4.);(\u0022Republic of the Congo\u0022,3.9);(\u0022Guatemala\u0022,3.8);\n    (\u0022Central African Republic\u0022,3.8);(\u0022North Korea\u0022,3.7);(\u0022Sri Lanka\u0022,3.7);\n    (\u0022Mauritius\u0022,3.6);(\u0022Samoa\u0022,3.6);(\u0022Democratic Republic of the Congo\u0022,3.6);\n    (\u0022Nauru\u0022,3.5);(\u0022Gambia\u0022,3.4);(\u0022Federated States of Micronesia\u0022,3.3);\n    (\u0022El Salvador\u0022,3.2);(\u0022Fiji\u0022,3.);(\u0022Papua New Guinea\u0022,3.);(\u0022Kiribati\u0022,3.);\n    (\u0022Tajikistan\u0022,2.8);(\u0022Israel\u0022,2.8);(\u0022Sudan\u0022,2.7);(\u0022Malawi\u0022,2.5);(\u0022Lebanon\u0022,2.4);\n    (\u0022Azerbaijan\u0022,2.3);(\u0022Mozambique\u0022,2.3);(\u0022Togo\u0022,2.3);(\u0022Nepal\u0022,2.2);(\u0022Brunei\u0022,2.1);\n    (\u0022Benin\u0022,2.1);(\u0022Singapore\u0022,2.);(\u0022Turkey\u0022,2.);(\u0022Madagascar\u0022,1.8);(\u0022Solomon Islands\u0022,1.7);\n    (\u0022Tonga\u0022,1.6);(\u0022Tunisia\u0022,1.5);(\u0022Tuvalu\u0022,1.5);(\u0022Qatar\u0022,1.5);(\u0022Vanuatu\u0022,1.4);\n    (\u0022Djibouti\u0022,1.3);(\u0022Malaysia\u0022,1.3);(\u0022Syria\u0022,1.2);(\u0022Maldives\u0022,1.2);(\u0022Mali\u0022,1.1);\n    (\u0022Eritrea\u0022,1.1);(\u0022Algeria\u0022,1.);(\u0022Iran\u0022,1.);(\u0022Oman\u0022,0.9);(\u0022Brunei\u0022,0.9);\n    (\u0022Morocco\u0022,0.9);(\u0022Jordan\u0022,0.7);(\u0022Bhutan\u0022,0.7);(\u0022Guinea\u0022,0.7);(\u0022Burma\u0022,0.7);\n    (\u0022Afghanistan\u0022,0.7);(\u0022Senegal\u0022,0.6);(\u0022Indonesia\u0022,0.6);(\u0022Timor-Leste\u0022,0.6);\n    (\u0022Iraq\u0022,0.5);(\u0022Somalia\u0022,0.5);(\u0022Egypt\u0022,0.4);(\u0022Niger\u0022,0.3);(\u0022Yemen\u0022,0.3);\n    (\u0022Comoros\u0022,0.2);(\u0022Saudi Arabia\u0022,0.2);(\u0022Bangladesh\u0022,0.2);(\u0022Kuwait\u0022,0.1);\n    (\u0022Libya\u0022,0.1);(\u0022Mauritania\u0022,0.1);(\u0022Pakistan\u0022,0.1);]\n    |\u003E List.unzip\n\n(**\nChoropleth Maps display divided geographical areas or regions that are coloured, shaded or patterned in relation to \na data variable. This provides a way to visualise values over a geographical area, which can show variation or \npatterns across the displayed location.\n*)\n\nlet choroplethMap1 =\n    Chart.ChoroplethMap(\n        locations,z,\n        Locationmode=StyleParam.LocationFormat.CountryNames\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMap1\n#endif // IPYNB\n\n(***hide***)\nchoroplethMap1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Map styling\n\nyou can access various map styles via \u0060Chart.withMapStyle\u0060, such as the projection type, lake/ocean color, and so on.\n*)\nlet choroplethMap2 =\n    Chart.ChoroplethMap(\n        locations,z,\n        Locationmode=StyleParam.LocationFormat.CountryNames\n    )\n    |\u003E Chart.withMapStyle(\n        Projection=GeoProjection.init(projectionType=StyleParam.GeoProjectionType.Mollweide),\n        ShowLakes=true,\n        ShowOcean=true,\n        OceanColor=\u0022lightblue\u0022,\n        ShowRivers=true)\n    |\u003E Chart.withColorBarStyle (\u0022Alcohol consumption[l/y]\u0022,Length=0.5)\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMap2\n#endif // IPYNB\n\n(***hide***)\nchoroplethMap2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/4_4_2d-histograms.html","title":"2D Histograms","content":"(**\n---\ntitle: 2D Histograms\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 2D Histograms\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create a bi-dimensional histogram of two data samples in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n\n//---------------------- generate random normally distributed data ---------------------- \nlet normal (rnd:System.Random) mu tau =\n    let mutable v1 = 2.0 * rnd.NextDouble() - 1.0\n    let mutable v2 = 2.0 * rnd.NextDouble() - 1.0\n    let mutable r = v1 * v1 \u002B v2 * v2\n    while (r \u003E= 1.0 || r = 0.0) do\n        v1 \u003C- 2.0 * rnd.NextDouble() - 1.0\n        v2 \u003C- 2.0 * rnd.NextDouble() - 1.0\n        r \u003C- v1 * v1 \u002B v2 * v2\n    let fac = sqrt(-2.0*(log r)/r)\n    (tau * v1 * fac \u002B mu)\n\nlet rnd = System.Random()\nlet n = 2000\nlet a = -1.\nlet b = 1.2\nlet step i = a \u002B  ((b - a) / float (n - 1)) * float i\n\n//---------------------- generate data distributed in x and y direction ---------------------- \nlet x = Array.init n (fun i -\u003E ((step i)**3.) \u002B (0.3 * (normal (rnd) 0. 2.) ))\nlet y = Array.init n (fun i -\u003E ((step i)**6.) \u002B (0.3 * (normal (rnd) 0. 2.) ))\n\n(**\nA Histogram2d chart can be created using the \u0060Chart.Histogram2d\u0060 or \u0060Chart.Histogram2dContour\u0060 functions.\n*)\n\nlet histogramContour =\n    [\n        Chart.Histogram2dContour (x,y,Line=Line.init(Width=0.))\n        Chart.Point(x,y,Opacity=0.3)\n    ]\n    |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nhistogramContour\n#endif // IPYNB\n\n(***hide***)\nhistogramContour |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\nlet histogram2d = \n    Chart.Histogram2d (x,y)\n\n(*** condition: ipynb ***)\n#if IPYNB\nhistogram2d\n#endif // IPYNB\n\n(***hide***)\nhistogram2d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/1_2_multiple-charts.html","title":"Multicharts and subplots","content":"(**\n---\ntitle: Multicharts and subplots\ncategory: Chart Layout\ncategoryindex: 2\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Multicharts and subplots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create charts with multiple subplots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n\n(**\n\n## Combining charts\n\n\u0060Chart.Combine\u0060 takes a sequence of charts, and attempts to combine their layouts to \nproduce a composite chart with one layout containing all traces of the input:\n\n*)\n\nlet combinedChart = \n    [\n        Chart.Line(x,y,Name=\u0022first\u0022)\n        Chart.Line(y,x,Name=\u0022second\u0022)\n    ]\n    |\u003E Chart.Combine\n\n#if IPYNB\ncombinedChart\n#endif // end cell with chart value in a notebook context\n(***hide***)\ncombinedChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\n## Chart subplot grids\n\n### Chart.Grid\n\n\u0060Chart.Grid\u0060 takes a 2D input sequence of charts and creates a subplot grid \nwith the dimensions (outerlength,(max (innerLengths))\n\n*)\n\n//simple 3x3 subplot grid\nlet grid = \n    Chart.Grid(\n        [\n            [Chart.Line(x,y); Chart.Line(x,y); Chart.Line(x,y)]\n            [Chart.Point(x,y); Chart.Point(x,y); Chart.Point(x,y)]\n            [Chart.Spline(x,y); Chart.Spline(x,y); Chart.Spline(x,y)]\n        ]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid\n#endif // IPYNB\n\n(***hide***)\ngrid |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\nuse \u0060sharedAxis=true\u0060 to use one shared x axis per column and one shared y axis per row. \n(Try zooming in the single subplots below)\n*)\n\nlet grid2 =\n    Chart.Grid(\n        [\n            [Chart.Line(x,y); Chart.Line(x,y); Chart.Line(x,y)]\n            [Chart.Point(x,y); Chart.Point(x,y); Chart.Point(x,y)]\n            [Chart.Spline(x,y); Chart.Spline(x,y); Chart.Spline(x,y)]\n        ],\n        sharedAxes=true\n    )\n    |\u003E Chart.withLayoutGridStyle(\n        XSide = StyleParam.LayoutGridXSide.Bottom\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid2\n#endif // IPYNB\n\n(***hide***)\ngrid2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(** \n### Chart.SingleStack\n\nThe \u0060Chart.SingleStack\u0060 function is a special version of Chart.Grid that creates only one column from a 1D input chart sequence.\nIt uses a shared x axis per default. You can also use the Chart.withLayoutGridStyle to further style subplot grids:\n\n*)\n\nlet singleStack =\n    [\n        Chart.Point(x,y) \n        |\u003E Chart.withY_AxisStyle(\u0022This title must\u0022)\n\n        Chart.Line(x,y) \n        |\u003E Chart.withY_AxisStyle(\u0022be set on the\u0022,Zeroline=false)\n        \n        Chart.Spline(x,y) \n        |\u003E Chart.withY_AxisStyle(\u0022respective subplots\u0022,Zeroline=false)\n    ]\n    |\u003E Chart.SingleStack\n    //move xAxis to bottom and increase spacing between plots by using the withLayoutGridStyle function\n    |\u003E Chart.withLayoutGridStyle(XSide=StyleParam.LayoutGridXSide.Bottom,YGap= 0.1)\n    |\u003E Chart.withTitle(\u0022Hi i am the new SingleStackChart\u0022)\n    |\u003E Chart.withX_AxisStyle(\u0022im the shared xAxis\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nsingleStack\n#endif // IPYNB\n\n(***hide***)\nsingleStack |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/1_1_errorbars.html","title":"Error bars","content":"(**\n---\ntitle: Error bars\ncategory: Chart Layout\ncategoryindex: 2\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Error bars\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to add error bars to plots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y\u0027 = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet xError = [|0.2;0.3;0.2;0.1;0.2;0.4;0.2;0.08;0.2;0.1;|]\nlet yError = [|0.3;0.2;0.1;0.4;0.2;0.4;0.1;0.18;0.02;0.2;|]\n(**\nTo add error bars to a chart, use the \u0060Chart.with*ErrorStyle\u0060 functions for either X, Y, or Z.\n*)\n\nlet pointsWithErrorBars =\n    Chart.Point(x,y\u0027,Name=\u0022points with errors\u0022)    \n    |\u003E Chart.withXErrorStyle (Array=xError,Symmetric=true)\n    |\u003E Chart.withYErrorStyle (Array=yError, Arrayminus = xError) // for negative error, use positive values in the \u0060Arrayminus\u0060 argument \n\n(*** condition: ipynb ***)\n#if IPYNB\npointsWithErrorBars\n#endif // IPYNB\n\n(***hide***)\npointsWithErrorBars |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/0_0_basics.html","title":"Basics","content":"(**\n---\ntitle: Basics \ncategory: General\ncategoryindex: 1\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\nopen Plotly.NET\n\n(**\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Plotly.NET basics\n\n_This section is WIP._\n\n### Table of contents\n\n- [GenericChart](#GenericChart)\n- [Working with GenericCharts](#Working-with-GenericCharts)\n    - [Dynamic object style](#Dynamic-object-style)\n\n## GenericChart\n\n\nPlotly.NET is a .NET wrapper for creation of [plotly charts]() written in F#. This means that, under the hood, all functionality creates JSON objects that can be rendered by plotly.\n\nThe central type that gets created by all Chart constructors is \u0060GenericChart\u0060, which itself represents either a single chart or a multi chart (as a Discriminate Union type). It looks like this:\n\n*)\n\n(***do-not-eval***)\ntype GenericChart =\n    | Chart of Trace * Layout * Config * DisplayOptions\n    | MultiChart of Trace list * Layout * Config * DisplayOptions\n\n(**\nAs you can see, a \u0060GenericChart\u0060 consists of four top level objects - \u0060Trace\u0060 (multiple of those in the case of a MultiChart) , \u0060Layout\u0060, \u0060Config\u0060, and \u0060DisplayOptions\u0060.\n\n- \u0060Trace\u0060 is in principle the representation of a dataset on a chart, including for example the data itself, color and shape of the visualization, etc.\n- \u0060Layout\u0060 is everything of the chart that is not dataset specifivc - e.g. the shape and style of axes, the chart title, etc.\n- \u0060Config\u0060 is an object that configures high level properties of the chart like making all chart elements editable or the tool bar on top\n- \u0060DisplayOptions\u0060 is an object that contains meta information about how the html document that contains the chart.\n\n## Working with GenericCharts\n\n### Dynamic object style\n\nPlotly.NET has multiple abstraction layers to work with \u0060GenericChart\u0060s. The prime directive for all functions provided by this library is the construction of valid plotly JSON objects.\nFor this purpose, \u0060Trace\u0060, \u0060Layout\u0060, and \u0060Config\u0060 (and many other internal objects) are inheriting from [\u0060DynamicObj\u0060](https://github.com/plotly/Plotly.NET/blob/dev/src/Plotly.NET/DynamicObj.fs),\nan extension of \u0060DynamicObject\u0060 which makes it possible to set arbitraryly named and typed properties of these objects via the \u0060?\u0060 operator.\n\nSo if you want to set any kind of property on one of these objects you can do it in a very declarative way like this:\n*)\n\nlet myTrace = Trace(\u0022scatter\u0022) // create a scatter trace\nmyTrace?x \u003C- [0;1;2] // set the x property (the x dimension of the data)\nmyTrace?y \u003C- [0;1;2] // set the y property (the y dimension of the data)\n\nGenericChart.ofTraceObject myTrace // create a generic chart (layout and config are empty objects)\n|\u003E Chart.Show\n\n(**\nlets have a look at the trace object that will be created. The relevant section of the html generated with Chart.Show is the following:\n\n\u0060\u0060\u0060javascript\nvar data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[0,1,2],\u0022y\u0022:[0,1,2]}];\n\u0060\u0060\u0060\n\n*)"},{"uri":"https://plotly.net/8_0_parallel-categories.html","title":"Parallel categories","content":"(**\n---\ntitle: Parallel categories\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Parallel categories\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create parallel categories plot in F#.\n\nThe parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of multi-dimensional categorical data sets. Each variable in the data set is represented by a column of rectangles, where each rectangle corresponds to a discrete value taken on by that variable. The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.\n\nCombinations of category rectangles across dimensions are connected by ribbons, where the height of the ribbon corresponds to the relative frequency of occurrence of the combination of categories in the data set.\n*)\nopen Plotly.NET\n\nlet dims =\n    [\n        Dimensions.init([\u0022Cat1\u0022;\u0022Cat1\u0022;\u0022Cat1\u0022;\u0022Cat1\u0022;\u0022Cat2\u0022;\u0022Cat2\u0022;\u0022Cat3\u0022],Label=\u0022A\u0022)\n        Dimensions.init([0;1;0;1;0;0;0],Label=\u0022B\u0022,TickText=[\u0022YES\u0022;\u0022NO\u0022])\n    ]\n\nlet parcats =\n    Chart.ParallelCategories(\n        dims,\n        Color=[0.;1.;0.;1.;0.;0.;0.],\n        Colorscale = StyleParam.Colorscale.Blackbody\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcats\n#endif // IPYNB\n\n(***hide***)\nparcats |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/2_0_line-scatter-plots.html","title":"Line and scatter plots","content":"(**\n---\ntitle: Line and scatter plots\ncategory: Simple Charts\ncategoryindex: 3\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Line and scatter plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create line and point charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n(**\n\nA line or a point chart can be created using the \u0060Chart.Line\u0060 and \u0060Chart.Point\u0060 functions. \n\n## Chart.Line with LineStyle\n\nThe following example generates a line Plot containing X and Y values and applies a line style to it.\n*)\n\nlet line1 =\n    Chart.Line(\n        x,y,\n        Name=\u0022line\u0022,\n        ShowMarkers=true,\n        MarkerSymbol=StyleParam.Symbol.Square)    \n    |\u003E Chart.withLineStyle(Width=2.,Dash=StyleParam.DrawingStyle.Dot)\n\n(*** condition: ipynb ***)\n#if IPYNB\nline1\n#endif // IPYNB\n\n(***hide***)\nline1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n\n## Pipelining into Chart.Line\nThe following example calls the \u0060Chart.Line\u0060 method with a list of X and Y values as tuples. The snippet generates\nvalues of a simple function, f(x)=x^2. The values of the function are generated for X ranging from 1 to 100. The chart generated is \nshown below.\n*)\n\nlet line2 =\n    // Drawing graph of a \u0027square\u0027 function \n    [ for x in 1.0 .. 100.0 -\u003E (x, x ** 2.0) ]\n    |\u003E Chart.Line\n\n(*** condition: ipynb ***)\n#if IPYNB\nline2\n#endif // IPYNB\n\n(***hide***)\nline2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Spline charts\n\nSpline charts interpolate the curves between single points of \nthe chart to generate a smoother version of the line chart.\n*)\n\nlet spline1 = Chart.Spline(x,y,Name=\u0022spline\u0022)    \n\n(*** condition: ipynb ***)\n#if IPYNB\nspline1\n#endif // IPYNB\n\n(***hide***)\nspline1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet spline2 = \n    Chart.Spline(\n        x,y,\n        Name=\u0022spline\u0022,\n        Smoothing = 0.4\n    )      \n    \n(*** condition: ipynb ***)\n#if IPYNB\nspline2\n#endif // IPYNB\n\n(***hide***)\nspline2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Point chart with text label\n\nThe following example calls the \u0060Chart.Point\u0060 function to generate a scatter Plot containing X and Y values.\nAddtionally, text labels are added . \n\nIf \u0060TextPosition\u0060 is set the labels are drawn otherwise only shown when hovering over the points.\n*)\n\n\nlet labels  = [\u0022a\u0022;\u0022b\u0022;\u0022c\u0022;\u0022d\u0022;\u0022e\u0022;\u0022f\u0022;\u0022g\u0022;\u0022h\u0022;\u0022i\u0022;\u0022j\u0022;]\n\nlet pointsWithLabels =\n    Chart.Point(\n        x,y,\n        Name=\u0022points\u0022,\n        Labels=labels,\n        TextPosition=StyleParam.TextPosition.TopRight\n    )    \n\n(*** condition: ipynb ***)\n#if IPYNB\npointsWithLabels\n#endif // IPYNB\n\n(***hide***)\npointsWithLabels |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/2_3_range-plots.html","title":"Range plots","content":"(**\n---\ntitle: Range plots\ncategory: Simple Charts\ncategoryindex: 3\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Range plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Range plot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\nlet rnd = System.Random()\n\nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\nlet yUpper = y |\u003E List.map (fun v -\u003E v \u002B rnd.NextDouble())\nlet yLower = y |\u003E List.map (fun v -\u003E v - rnd.NextDouble())\n\n(**\nA range plot is commonly used to indicate some property of data that lies in a certain range around a central value,\nfor example the range of all predictions from different models, scattering around a central tendency.\n*)\n\nlet range1 =\n    Chart.Range(\n        x,y,yUpper,yLower,\n        StyleParam.Mode.Lines_Markers,\n        Color=\u0022grey\u0022,\n        RangeColor=\u0022lightblue\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nrange1\n#endif // IPYNB\n\n(***hide***)\nrange1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n"},{"uri":"https://plotly.net/1_0_axis-styling.html","title":"Axis styling","content":"(**\n---\ntitle: Axis styling\ncategory: Chart Layout\ncategoryindex: 2\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Axis styling\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to style chart axes in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n  \nlet x = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet y\u0027 = y |\u003E List.map (fun y -\u003E y * 2.) |\u003E List.rev\n(**\n## Single axis styling\n\nTo style a specific axis of a plot, use the respective \u0060Chart.with*_AxisStyle\u0060 function:\n\n*)\n\nlet plot1 =\n    Chart.Point(x,y)\n    |\u003E Chart.withX_AxisStyle (\u0022X axis title\u0022, MinMax = (-1.,10.))\n    |\u003E Chart.withY_AxisStyle (\u0022Y axis title\u0022, MinMax = (-1.,10.))\n\n(*** condition: ipynb ***)\n#if IPYNB\nplot1\n#endif // IPYNB\n\n(***hide***)\nplot1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nfor even more fine-grained control, initialize a new axis and replace the old one of the plot with \u0060\u0060\u0060\u0060.\nThe following example creates two mirrored axes with inside ticks, one of them with a log scale:\n*)\n\nlet mirroredXAxis =\n    Axis.LinearAxis.init(\n        Title =\u0022Log axis\u0022,\n        Showline = true,\n        Mirror = StyleParam.Mirror.AllTicks,\n        Showgrid = false,\n        Ticks = StyleParam.TickOptions.Inside\n    )\n\nlet mirroredLogYAxis = \n    Axis.LinearAxis.init(\n        Title =\u0022Log axis\u0022,\n        AxisType = StyleParam.AxisType.Log,\n        Showline = true,\n        Mirror = StyleParam.Mirror.AllTicks,\n        Showgrid = false,\n        Ticks = StyleParam.TickOptions.Inside\n    )\n\nlet plot2 =\n    Chart.Point(x,y)\n    |\u003E Chart.withX_Axis mirroredXAxis\n    |\u003E Chart.withY_Axis mirroredLogYAxis\n\n(*** condition: ipynb ***)\n#if IPYNB\nplot2\n#endif // IPYNB\n\n(***hide***)\nplot2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\n## Multiple axes\n\nAssign different axis anchors to subplots to map them to different axes.\n\n### Multiple axes on different sides of the chart\n\nThe following example first creates a multichart containing two plots with different axis anchors.\nSubsequently, multiple axes with the respective anchors are added to the plot. \nNote that the same can be done as above, defining axes beforehand.\n\n*)\n\nlet anchoredAt1 =\n    Chart.Line (x,y,Name=\u0022anchor 1\u0022)\n        |\u003E Chart.withAxisAnchor(Y=1)\n\nlet anchoredAt2 =\n     Chart.Line (x,y\u0027,Name=\u0022anchor 2\u0022)\n        |\u003E Chart.withAxisAnchor(Y=2)\n\nlet twoXAxes1 = \n    [\n       anchoredAt1\n       anchoredAt2\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withY_AxisStyle(\n        \u0022axis 1\u0022,\n        Side=StyleParam.Side.Left,\n        Id=1\n    )\n    |\u003E Chart.withY_AxisStyle(\n        \u0022axis2\u0022,\n        Side=StyleParam.Side.Right,\n        Id=2,\n        Overlaying=StyleParam.AxisAnchorId.Y 1\n    )\n        \n(*** condition: ipynb ***)\n#if IPYNB\ntwoXAxes1\n#endif // IPYNB\n\n(***hide***)\ntwoXAxes1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Multiple axes on the same side of the chart\n\nAnalogous to above, but move the whole plot to the right by adjusting its domain, and then add a second axis to the left:\n\n*)\n\nlet twoXAxes2 =\n    [\n        anchoredAt1\n        anchoredAt2\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withY_AxisStyle(\n            \u0022first y-axis\u0022,\n            Showline=true\n            )\n    |\u003E Chart.withX_AxisStyle(\n        \u0022x-axis\u0022,\n        Domain=(0.3, 1.0) // moves the first axis and the whole plot to the right\n    ) \n    |\u003E Chart.withY_AxisStyle(\n        \u0022second y-axis\u0022,\n        Side=StyleParam.Side.Left,\n        Id=2,\n        Overlaying=StyleParam.AxisAnchorId.Y 1,\n        Position=0.10, // position the axis beteen the leftmost edge and the firt axis at 0.3\n        Anchor=StyleParam.AxisAnchorId.Free,\n        Showline=true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntwoXAxes2\n#endif // IPYNB\n\n(***hide***)\ntwoXAxes2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/2_5_pie-doughnut-charts.html","title":"Pie and doughnut Charts","content":"(**\n---\ntitle: Pie and doughnut Charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Pie and doughnut Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create pie and doughnut charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\nopen Plotly.NET \n  \nlet values = [19; 26; 55;]\nlet labels = [\u0022Residential\u0022; \u0022Non-Residential\u0022; \u0022Utility\u0022]\n\n(**\n\nA pie, doughnut, or sunburst chart can be created using the \u0060Chart.Pie\u0060, \u0060Chart.Doughnut\u0060, and \u0060Chart.Sunburst\u0060 functions.\nWhen creating pie charts, it is usually desirable to provide both labels and values.\n\n*)\n\nlet pie1 =\n    Chart.Pie(values,labels)\n\n(*** condition: ipynb ***)\n#if IPYNB\npie1\n#endif // IPYNB\n\n(***hide***)\npie1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet doughnut1 =\n    Chart.Doughnut(\n        values,\n        labels,\n        Hole=0.3,\n        Textinfo=labels\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ndoughnut1\n#endif // IPYNB\n\n(***hide***)\ndoughnut1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet sunburst1 =\n    Chart.Sunburst(\n        [\u0022A\u0022;\u0022B\u0022;\u0022C\u0022;\u0022D\u0022;\u0022E\u0022],\n        [\u0022\u0022;\u0022\u0022;\u0022B\u0022;\u0022B\u0022;\u0022\u0022],\n        Values=[5.;0.;3.;2.;3.],\n        Text=[\u0022At\u0022;\u0022Bt\u0022;\u0022Ct\u0022;\u0022Dt\u0022;\u0022Et\u0022]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nsunburst1\n#endif // IPYNB\n\n(***hide***)\nsunburst1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/4_2_violin-plots.html","title":"Violin plots","content":"(**\n---\ntitle: Violin plots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Violin plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create violin plot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet x = [\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022]\n\n(**\nA violin plot is a method of plotting numeric data. It is similar to box plot with a rotated kernel density plot \non each side. The violin plot is similar to box plots, except that they also show the probability density of the \ndata at different values.\n*)\n\nlet violin1 =\n    Chart.Violin (\n        x,y,\n        Points=StyleParam.Jitterpoints.All\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin1\n#endif // IPYNB\n\n(***hide***)\nviolin1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nBy swapping x and y plus using \u0060StyleParam.Orientation.Horizontal\u0060 we can flip the chart horizontaly.\n*)\nlet violin2 =\n    Chart.Violin(\n        y,x,\n        Jitter=0.1,\n        Points=StyleParam.Jitterpoints.All,\n        Orientation=StyleParam.Orientation.Horizontal,\n        Meanline=Meanline.init(Visible=true)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin2\n#endif // IPYNB\n\n(***hide***)\nviolin2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nYou can also produce a violin plot using the \u0060Chart.Combine\u0060 syntax.\n*)\n\nlet y\u0027 =  [2.; 1.5; 5.; 1.5; 2.; 2.5; 2.1; 2.5; 1.5; 1.;2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\nlet violin3 =\n    [\n        Chart.Violin (\u0022y\u0022 ,y,Name=\u0022bin1\u0022,Jitter=0.1,Points=StyleParam.Jitterpoints.All);\n        Chart.Violin (\u0022y\u0027\u0022,y\u0027,Name=\u0022bin2\u0022,Jitter=0.1,Points=StyleParam.Jitterpoints.All);\n    ]\n    |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin3\n#endif // IPYNB\n\n(***hide***)\nviolin3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n"},{"uri":"https://plotly.net/2_6_table.html","title":"Tables","content":"(**\n---\ntitle: Tables\ncategory: Simple Charts\ncategoryindex: 3\nindex: 7\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Tables\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nThis example shows how to create tables in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \nopen Plotly.NET.StyleParam\n  \nlet header = [\u0022\u003Cb\u003ERowIndex\u003C/b\u003E\u0022;\u0022A\u0022;\u0022simple\u0022;\u0022table\u0022]\nlet rows = \n    [\n     [\u00220\u0022;\u0022I\u0022     ;\u0022am\u0022     ;\u0022a\u0022]        \n     [\u00221\u0022;\u0022little\u0022;\u0022example\u0022;\u0022!\u0022]       \n    ]\n\n\nlet table1 = Chart.Table(header, rows)\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable1\n#endif // IPYNB\n\n(***hide***)\ntable1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nA little bit of styling:\n*)\n\nlet table2 =\n    Chart.Table(\n        header,\n        rows,\n        //sets global header alignment\n        AlignHeader = [HorizontalAlign.Center],\n        //sets alignment for each column separately \n        //(The last alignment is applied to all potential following columns)\n        AlignCells  = [HorizontalAlign.Left;HorizontalAlign.Center;HorizontalAlign.Right],\n        //sets global header color\n        ColorHeader = \u0022#45546a\u0022,    \n        //sets specific color to each header column\n        //ColorHeader=[\u0022#45546a\u0022;\u0022#deebf7\u0022;\u0022#45546a\u0022;\u0022#deebf7\u0022],    \n        //sets global cell color\n        //ColorRows = \u0022#deebf7\u0022,\n        //sets cell column colors\n        ColorCells  = [\u0022#deebf7\u0022;\u0022lightgrey\u0022;\u0022#deebf7\u0022;\u0022lightgrey\u0022],\n        //sets cell row colors\n        //ColorCells=[[\u0022#deebf7\u0022;\u0022lightgrey\u0022]],\n        //sets font of header\n        FontHeader  = Font.init(FontFamily.Courier_New, Size=12., Color=\u0022white\u0022),      \n        //sets the height of the header\n        HeightHeader= 30.,\n        //sets lines of header\n        LineHeader  = Line.init(2.,\u0022black\u0022),                     \n        ColumnWidth = [70;50;100;70],      \n        //defines order of columns\n        ColumnOrder = [1;2;3;4]                                  \n        )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable2\n#endif // IPYNB\n\n(***hide***)\ntable2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nValue dependent cell coloring:\n*)\n\nlet header2 = [\u0022Identifier\u0022;\u0022T0\u0022;\u0022T1\u0022;\u0022T2\u0022;\u0022T3\u0022]\nlet rowvalues = \n    [\n     [10001.;0.2;2.0;4.0;5.0]\n     [10002.;2.1;2.0;1.8;2.1]\n     [10003.;4.5;3.0;2.0;2.5]\n     [10004.;0.0;0.1;0.3;0.2]\n     [10005.;1.0;1.6;1.8;2.2]\n     [10006.;1.0;0.8;1.5;0.7]\n     [10007.;2.0;2.0;2.1;1.9]\n    ]\n    |\u003E Seq.sortBy (fun x -\u003E x.[1])\n\n//map color from value to hex representation\nlet mapColor min max value = \n    let proportion = \n        (255. * (value - min) / (max - min))\n        |\u003E int\n    Colors.fromRgb 255 (255 - proportion) proportion\n    |\u003E Colors.toWebColor\n    \n//Assign a color to every cell seperately. Matrix must be transposed for correct orientation.\nlet cellcolor = \n     rowvalues\n     |\u003E Seq.map (fun row -\u003E\n        row \n        |\u003E Seq.mapi (fun index value -\u003E \n            if index = 0 then \u0022white\u0022\n            else mapColor 0. 5. value\n            )\n        )\n    |\u003E Seq.transpose\n\nlet table3 = Chart.Table(header2,rowvalues,ColorCells=cellcolor)\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable3\n#endif // IPYNB\n\n(***hide***)\ntable3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\nSequence representation:\n\n*)\n\nlet sequence =\n        [\n        \u0022ATGAGACGTCGAGACTGATAGACGTCGATAGACGTCGATAGACCG\u0022\n        \u0022ATAGACTCGTGATAGACGTCGATAGACGTCGATAGAGTATAGACC\u0022\n        \u0022GTGATAGACGTCGAGAAGACGTCGATAGACGTCGATAGACGTCGA\u0022\n        \u0022TAGAGATAGACGTCGATAGACCGTATAGAAGACGTCGATAGATAG\u0022\n        \u0022ACGTCGATAGACCGTAGACGTCGATAGACGTCGATAGACCGT\u0022\n        ]\n        |\u003E String.concat \u0022\u0022\n\nlet elementsPerRow = 60\n\nlet headers = \n    [0..elementsPerRow] \n    |\u003E Seq.map (fun x -\u003E \n        if x%10=0 \u0026\u0026 x \u003C\u003E 0 then \u0022|\u0022 \n        else \u0022\u0022\n        )\n\nlet cells = \n    sequence\n    |\u003E Seq.chunkBySize elementsPerRow\n    |\u003E Seq.mapi (fun i x -\u003E Seq.append [string (i * elementsPerRow)] (Seq.map string x))\n\nlet cellcolors =\n    cells\n    |\u003E Seq.map (fun row -\u003E \n        row \n        |\u003E Seq.map (fun element -\u003E \n            match element with\n            //colors taken from DRuMS \n            //(http://biomodel.uah.es/en/model4/dna/atgc.htm)\n            | \u0022A\u0022 -\u003E \u0022#5050FF\u0022 \n            | \u0022T\u0022 -\u003E \u0022#E6E600\u0022\n            | \u0022G\u0022 -\u003E \u0022#00C000\u0022\n            | \u0022C\u0022 -\u003E \u0022#E00000\u0022\n            | \u0022U\u0022 -\u003E \u0022#B48100\u0022\n            | _   -\u003E \u0022white\u0022\n            )\n        )\n    |\u003E Seq.transpose\n    |\u003E Seq.map (fun x -\u003E Seq.append x (seq [\u0022white\u0022]))\n\nlet font = Font.init(FontFamily.Consolas,Size=14.)\nlet line = Line.init(0.,\u0022white\u0022)\nlet chartwidth = 50. \u002B 10. * float elementsPerRow\n\nlet table4 =\n    Chart.Table(\n        headers,\n        cells,\n        LineCells   = line,\n        LineHeader  = line,\n        HeightCells = 20.,\n        FontHeader  = font,\n        FontCells   = font,\n        ColumnWidth = [50;10],\n        AlignCells  = [HorizontalAlign.Right;HorizontalAlign.Center],\n        ColorCells  = cellcolors\n        )\n    |\u003E Chart.withSize(chartwidth,nan)\n    |\u003E Chart.withTitle \u0022Sequence A\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable4\n#endif // IPYNB\n\n(***hide***)\ntable4 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n"},{"uri":"https://plotly.net/1_3_shapes.html","title":"Shapes","content":"(**\n---\ntitle: Shapes\ncategory: Chart Layout\ncategoryindex: 2\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Shapes\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Shapes and add them to the Charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y\u0027 = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n(**\nuse the \u0060Shape.init\u0060 function to generate a shape, and either the \u0060Chart.withShape\u0060 or the \u0060Chart.withShapes\u0060 function to add\nmultiple shapes at once.\n\n**Attention**: Adding a shape after you added a previous one currently removes the old one. This is a bug and will be fixed\n*)\n\nlet s1 = Shape.init (StyleParam.ShapeType.Rectangle,2.,4.,3.,4.,Opacity=0.3,Fillcolor=\u0022#d3d3d3\u0022)\nlet s2 = Shape.init (StyleParam.ShapeType.Rectangle,5.,7.,3.,4.,Opacity=0.3,Fillcolor=\u0022#d3d3d3\u0022)\n\nlet shapes =\n    Chart.Line(x,y\u0027,Name=\u0022line\u0022)    \n    |\u003E Chart.withShapes([s1;s2])\n//|\u003E Chart.withShape(Options.Shape(StyleOption.ShapeType.Rectangle,2.,4.,3.,4.,Opacity=0.3,Fillcolor=\u0022#d3d3d3\u0022))\n\n(*** condition: ipynb ***)\n#if IPYNB\nshapes\n#endif // IPYNB\n\n(***hide***)\nshapes |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/7_0_polar-charts.html","title":"Polar charts","content":"(**\n---\ntitle: Polar charts\ncategory: Polar Charts\ncategoryindex: 8\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Polar charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create polar charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet r  = [ 1; 2; 3; 4; 5; 6; 7;]\nlet r2 = [ 5; 6; 7; 1; 2; 3; 4;]\nlet r3 = [ 3; 1; 5; 2; 8; 7; 5;]\n\nlet t  = [0; 45; 90; 135; 200; 320; 184;]\n\n(**\nA polar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart \nof three or more quantitative variables represented on axes starting from the same point.\nThe relative position and angle of the axes is typically uninformative.\n*)\n\nlet polar1 =\n        [\n            Chart.Polar(r,t,StyleParam.Mode.Markers,Name=\u00221\u0022)\n            Chart.Polar(r2,t,StyleParam.Mode.Markers,Name=\u00222\u0022)\n            Chart.Polar(r3,t,StyleParam.Mode.Markers,Name=\u00223\u0022)\n        ]\n        |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\npolar1\n#endif // IPYNB\n\n(***hide***)\npolar1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/3_2_3d-surface-plots.html","title":"3D surface plots","content":"(**\n---\ntitle: 3D surface plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D surface plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D surface plots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen System\nopen Plotly.NET \n\n//---------------------- Generate linearly spaced vector ----------------------\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n\n//---------------------- Create example data ----------------------\nlet size = 100\nlet x = linspace(-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace(-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = - (5. * x / (x**2. \u002B y**2. \u002B 1.) )\n\nlet z = \n    Array.init size (fun i -\u003E \n        Array.init size (fun j -\u003E f x.[j] y.[i] )\n                    )\n\nlet rnd = System.Random()\nlet a = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet b = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet c = Array.init 50 (fun _ -\u003E rnd.NextDouble())\n\nlet surface = \n    z\n    |\u003E Chart.Surface\n\n(*** condition: ipynb ***)\n#if IPYNB\nsurface\n#endif // IPYNB\n\n(***hide***)\nsurface |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n// Create simple example data were x y and z is given (z is a xy-Matrix)\nlet x\u0027 = [0.;2.5]\nlet y\u0027 = [0.;2.5]\nlet z\u0027 = [\n    [1.;1.;]; // row wise (length x)\n    [1.;2.;];\n    ] // column (length y)\n\nlet surface2 = \n    Chart.Surface(z\u0027,x\u0027,y\u0027,Opacity=0.5,Contours=Contours.initXyz(Show=true))\n\n(*** condition: ipynb ***)\n#if IPYNB\nsurface2\n#endif // IPYNB\n\n(***hide***)\nsurface2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n"},{"uri":"https://plotly.net/6_0_candlestick.html","title":"Candlestick Charts","content":"(**\n---\ntitle: Candlestick Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Candlestick Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create candlestick charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n\nlet candles =\n    [|(\u00222020-01-17T13:40:00\u0022, 0.68888, 0.68888, 0.68879, 0.6888);\n      (\u00222020-01-17T13:41:00\u0022, 0.68883, 0.68884, 0.68875, 0.68877);\n      (\u00222020-01-17T13:42:00\u0022, 0.68878, 0.68889, 0.68878, 0.68886);\n      (\u00222020-01-17T13:43:00\u0022, 0.68886, 0.68886, 0.68876, 0.68879);\n      (\u00222020-01-17T13:44:00\u0022, 0.68879, 0.68879, 0.68873, 0.68874);\n      (\u00222020-01-17T13:45:00\u0022, 0.68875, 0.68877, 0.68867, 0.68868);\n      (\u00222020-01-17T13:46:00\u0022, 0.68869, 0.68887, 0.68869, 0.68883);\n      (\u00222020-01-17T13:47:00\u0022, 0.68883, 0.68899, 0.68883, 0.68899);\n      (\u00222020-01-17T13:48:00\u0022, 0.68898, 0.689, 0.68885, 0.68889);\n      (\u00222020-01-17T13:49:00\u0022, 0.68889, 0.68893, 0.68881, 0.68893);\n      (\u00222020-01-17T13:50:00\u0022, 0.68891, 0.68896, 0.68886, 0.68891);\n    |]\n    |\u003E Array.map (fun (d,o,h,l,c)-\u003ESystem.DateTime.Parse d, StockData.Create(o,h,l,c))\n(**\nA candlestick chart is useful for plotting stock prices over time. A candle\nis a group of high, open, close and low values over a period of time, e.g. 1 minute, 5 minute, hour, day, etc..\nThe x-axis is usually dateime values and y is a sequence of candle structures.\n*)\n\nlet candles1 = Chart.Candlestick candles\n\n(*** condition: ipynb ***)\n#if IPYNB\ncandles1\n#endif // IPYNB\n\n(***hide***)\ncandles1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nIf you want to hide the rangeslider, use \u0060withX_AxisRangeSlider\u0060 and hide it:\n*)\nlet rangeslider = RangeSlider.init(Visible=false)\n\nlet candles2 = \n    Chart.Candlestick candles\n    |\u003E Chart.withX_AxisRangeSlider rangeslider\n\n(*** condition: ipynb ***)\n#if IPYNB\ncandles2\n#endif // IPYNB\n\n(***hide***)\ncandles2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/2_1_bar-and-column-charts.html","title":"Bar and column charts","content":"(**\n---\ntitle: Bar and column charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Bar and column charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create bar and a column charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n  \nlet values = [20; 14; 23;]\nlet keys   = [\u0022Product A\u0022; \u0022Product B\u0022; \u0022Product C\u0022;]\n\n(**\nA bar chart or bar graph is a chart that presents grouped data with rectangular bars with \nlengths proportional to the values that they represent. The bars can be plotted vertically\nor horizontally. A vertical bar chart is called a column bar chart.\n\n### Column Charts\n*)\n\nlet column = Chart.Column(keys,values)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncolumn\n#endif // IPYNB\n\n(***hide***)\ncolumn |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Bar Charts\n*)\n\nlet bar =\n    Chart.Bar(keys,values)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbar\n#endif // IPYNB\n\n(***hide***)\nbar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n\n## Stacked bar chart or column charts\nThe following example shows how to create a stacked bar chart by combining bar charts created by combining multiple \u0060Chart.StackedBar\u0060 charts: \n\n### Stacked bar Charts\n*)\n\nlet stackedBar =\n    [\n        Chart.StackedBar(keys,values,Name=\u0022old\u0022);\n        Chart.StackedBar(keys,[8; 21; 13;],Name=\u0022new\u0022)\n    ]\n    |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedBar\n#endif // IPYNB\n\n(***hide***)\nstackedBar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(*\n### Stacked bar Charts\n*)\n\nlet stackedColumn =\n    [\n        Chart.StackedColumn(keys,values,Name=\u0022old\u0022);\n        Chart.StackedColumn(keys,[8; 21; 13;],Name=\u0022new\u0022)\n    ]\n    |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedColumn\n#endif // IPYNB\n\n(***hide***)\nstackedColumn |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/4_0_histograms.html","title":"Histograms","content":"(**\n---\ntitle: Histograms\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Histograms\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create a one-dimensional histogram of a data samples in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\n\nopen Plotly.NET \n\nlet rnd = System.Random()\nlet x = [for i=0 to 500 do yield rnd.NextDouble() ]\n\n(**\nA histogram consisting of rectangles whose area is proportional to the frequency of a variable and whose width is equal to the class interval.\nThe histogram chart represents the distribution of numerical data and can be created using the \u0060Chart.Histogram\u0060 function:.\n*)\n\nlet histo1 =\n    x\n    |\u003E Chart.Histogram\n    |\u003E Chart.withSize(500.,500.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nhisto1\n#endif // IPYNB\n\n(***hide***)\nhisto1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/index.html","title":"Plotly.NET\n","content":"(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n# Plotly.NET\n \n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nPlotly.NET provides functions for generating and rendering plotly.js charts in **.NET** programming languages \uD83D\uDCC8\uD83D\uDE80. \n\n### Table of contents \n\n- [Installation](#Installation)\n    - [For applications and libraries](#For-applications-and-libraries)\n    - [For scripting](#For-scripting)\n    - [For dotnet interactive notebooks](#For-dotnet-interactive-notebooks)\n- [Overview](#Overview)\n    - [Basics](#Basics)\n        - [Initializing a chart](#Initializing-a-chart)\n        - [Styling a chart](#Styling-a-chart)\n        - [Displaying a chart](#Displaying-a-chart)\n    - [Comparison: Usage in F# and C#](#Comparison-Usage-in-F-and-C)\n        - [Functional pipeline style in F#](#Functional-pipeline-style-in-F)\n        - [Fluent interface style in C#](#Fluent-interface-style-in-C)\n        - [Declarative style in F# using the underlying \u0060DynamicObj\u0060](#Declarative-style-in-F-using-the-underlying)\n        - [Declarative style in C# using the underlying \u0060DynamicObj\u0060](#Declarative-style-in-C-using-the-underlying)\n- [Contributing and copyright](#Contributing-and-copyright)\n\n# Installation\n\nPlotly.NET will be available as 2.0.0 version of its predecessor FSharp.Plotly. The feature roadmap can be seen [here](https://github.com/plotly/Plotly.NET/issues/43). Contributions are very welcome!\n\nOld packages up until version 1.2.2 can be accessed via the old package name *FSharp.Plotly* [here](https://www.nuget.org/packages/FSharp.Plotly/)\n\n### For applications and libraries\n\nA preview version of Plotly.NET 2.0.0 is available on nuget to plug into your favorite package manager.\n\nYou can find all available package versions on the [nuget page](https://www.nuget.org/packages/Plotly.NET/).\n\n - dotnet CLI\n\n    \u0060\u0060\u0060shell\n    dotnet add package Plotly.NET --version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n - paket CLI\n\n    \u0060\u0060\u0060shell\n    paket add Plotly.NET --version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n - package manager\n\n    \u0060\u0060\u0060shell\n    Install-Package Plotly.NET -Version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n    Or add the package reference directly to your \u0060.*proj\u0060 file:\n\n    \u0060\u0060\u0060\n    \u003CPackageReference Include=\u0022Plotly.NET\u0022 Version=\u0022{{fsdocs-package-version}}\u0022 /\u003E\n    \u0060\u0060\u0060\n\n### For scripting\n\nYou can include the package via an inline package reference:\n\n\u0060\u0060\u0060\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n\u0060\u0060\u0060\n\n### For dotnet interactive notebooks\n\nYou can use the same inline package reference as in script, but as an additional goodie, \nthe interactive extensions for dotnet interactive have you covered for seamless chart rendering:\n\n\u0060\u0060\u0060\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n\u0060\u0060\u0060\n\n_Note_: \n\ndue to the currently fast development cycles of Dotnet Interactive, there might be increments in their versioning that renders the current version of Plotly.NET.Interactive incompatible (example [here](https://github.com/plotly/Plotly.NET/issues/67)).\n\nIf the interactive extension does not work, please file an issue and we will try to get it running again as soon as possible.\n\nA possible fix for this is the inclusion of Dotnet.Interactive preview package sources. To use these, add the following lines before referencning Plotly.NET.Interactive:\n\n\u0060\u0060\u0060fsharp\n#i \u0022nuget:https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json\u0022\n#i \u0022nuget:https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\u0022\n\u0060\u0060\u0060\n\n# Overview\n\n## Basics\n\nThe general design philosophy of Plotly.NET implements the following visualization flow:\n\n- **initialize** a \u0060GenericChart\u0060 object from the data you want to visualize by using the respective \u0060Chart.*\u0060 function, optionally setting some specific style parameters\n- further **style** the chart with fine-grained control, e.g. by setting axis titles, tick intervals, etc.\n- **display** (in the browser or as cell result in a notebook) or save the chart \n\n### Initializing a chart\n\nThe \u0060Chart\u0060 module contains a lot of functions named after the type of chart they will create, e.g. \n\u0060Chart.Point\u0060 will create a point chart, \u0060Chart.Scatter3d\u0060 wil create a 3D scatter chart, and so on.\n\nThe respective functions all contain specific arguments, but they all have in common that the first \nmandatory arguments are the data to visualize. \n\nExample: The first two arguments of the \u0060Chart.Point\u0060 function are the x and y data. You can therefore initialize a point chart like this:\n\n*)\nopen Plotly.NET\nlet xData = [0. .. 10.]\nlet yData = [0. .. 10.]\nlet myFirstChart = Chart.Point(xData,yData)\n\n(**\n\n### Styling a chart\n\nStyling functions are generally the \u0060Chart.with*\u0060 naming convention. The following styling example does:\n\n - set the chart title via \u0060Chart.withTitle\u0060\n - set the x axis title and removes the gridline from the axis via \u0060Chart.withX_AxisStyle\u0060\n - set the y axis title and removes the gridline from the axis via \u0060Chart.withY_AxisStyle\u0060\n\n*)\n\nlet myFirstStyledChart =\n    Chart.Point(xData,yData)\n    |\u003E Chart.withTitle \u0022Hello world!\u0022\n    |\u003E Chart.withX_AxisStyle (\u0022xAxis\u0022, Showgrid=false)\n    |\u003E Chart.withY_AxisStyle (\u0022yAxis\u0022, Showgrid=false)\n\n(**\n**Attention:** Styling functions mutate \uD83D\uDE08 the input chart, therefore possibly affecting bindings to intermediary results. \nWe recommend creating a single chart for each workflow to prevent unexpected results\n\n### Displaying a chart in the browser\n\nThe \u0060Chart.Show\u0060 function will open a browser window and render the input chart there. When working in a notebook context, after\n[referencing Plotly.NET.Interactive](#For-dotnet-interactive-notebooks), the function is not necessary, just end the cell with the value of the chart.\n\n*)\n\n(***do-not-eval***)\nmyFirstChart\n|\u003E Chart.Show\n\n(**Should render this chart in your brower:*)\n\n(***hide***)\nmyFirstChart |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(***do-not-eval***)\nmyFirstStyledChart\n|\u003E Chart.Show\n\n(**And here is what happened after applying the styles from above:*)\n\n(***hide***)\nmyFirstStyledChart |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n\n(**\n### Displaying a chart in a notbook cell output\n\nIn a notebook context you usually have (at leat when running on a jupyter server like binder) no access to the browser on the machine where plotly runs on.\nThat\u0027s why you can render charts directly in the cell output. Just end the cell with the chart value:\n*)\n\nlet xData\u0027 = [0. .. 10.]\nlet yData\u0027 = [0. .. 10.]\nChart.Point(xData\u0027,yData\u0027)\n\n(**Here is the styled chart:*)\n\nChart.Point(xData,yData)\n|\u003E Chart.withTitle \u0022Hello world!\u0022\n|\u003E Chart.withX_AxisStyle (\u0022xAxis\u0022, Showgrid=false)\n|\u003E Chart.withY_AxisStyle (\u0022yAxis\u0022, Showgrid=false)\n\n\n(**\n## Comparison: Usage in F# and C#\n\nOne of the main design points of Plotly.NET it is to provide support for multiple flavors of chart generation. Here are 2 examples in different styles and languages that create an equivalent chart:\n \n### Functional pipeline style in F#:\n*)\n\n[(1,5);(2,10)]\n|\u003E Chart.Point\n|\u003E Chart.withTraceName(\u0022Hello from F#\u0022,Showlegend=true)\n|\u003E Chart.withY_AxisStyle(\u0022xAxis\u0022,Showgrid= false, Showline=true)\n|\u003E Chart.withX_AxisStyle(\u0022yAxis\u0022,Showgrid= false, Showline=true)\n\n(**\n### Fluent interface style in C#:\n\n\u0060\u0060\u0060\nstatic void Main(string[] args)\n{\n    double[] x = new double[] { 1, 2 };\n    double[] y = new double[] { 5, 10 };\n    GenericChart.GenericChart chart = Chart.Point(x: x, y: y);\n    chart\n        .WithTraceName(\u0022Hello from C#\u0022, true)\n        .WithX_AxisStyle(title: \u0022xAxis\u0022, Showgrid: false, Showline: true)\n        .WithY_AxisStyle(title: \u0022yAxis\u0022, Showgrid: false, Showline: true)\n        .Show();\n}\n\u0060\u0060\u0060\n\n### Declarative style in F# using the underlying \u0060DynamicObj\u0060:\n*)\n\nlet xAxis = \n    let tmp = Axis.LinearAxis()\n    tmp?title \u003C- \u0022xAxis\u0022\n    tmp?showgrid \u003C- false\n    tmp?showline \u003C- true    \n    tmp\n\nlet yAxis =\n    let tmp = Axis.LinearAxis()\n    tmp?title \u003C- \u0022yAxis\u0022\n    tmp?showgrid \u003C- false\n    tmp?showline \u003C- true    \n    tmp\n\nlet layout =\n    let tmp = Layout()\n    tmp?xaxis \u003C- xAxis\n    tmp?yaxis \u003C- yAxis\n    tmp?showlegend \u003C- true\n    tmp\n\nlet trace = \n    let tmp = Trace(\u0022scatter\u0022)\n    tmp?x \u003C- [1;2]\n    tmp?y \u003C- [5;10]\n    tmp?mode \u003C- \u0022markers\u0022\n    tmp?name \u003C- \u0022Hello from F#\u0022\n    tmp\n\nGenericChart.ofTraceObject(trace)\n|\u003E GenericChart.setLayout layout\n\n(**\n### Declarative style in C# using the underlying \u0060DynamicObj\u0060:\n\n\u0060\u0060\u0060\nstatic void Main(string[] args)\n{\n    double[] x = new double[] { 1, 2 };\n    double[] y = new double[] { 5, 10 };\n\n    Axis.LinearAxis xAxis = new Axis.LinearAxis();\n    xAxis.SetValue(\u0022title\u0022, \u0022xAxis\u0022);\n    xAxis.SetValue(\u0022showgrid\u0022, false);\n    xAxis.SetValue(\u0022showline\u0022, true);\n\n    Axis.LinearAxis yAxis = new Axis.LinearAxis();\n    yAxis.SetValue(\u0022title\u0022, \u0022yAxis\u0022);\n    yAxis.SetValue(\u0022showgrid\u0022, false);\n    yAxis.SetValue(\u0022showline\u0022, true);\n\n    Layout layout = new Layout();\n    layout.SetValue(\u0022xaxis\u0022, xAxis);\n    layout.SetValue(\u0022yaxis\u0022, yAxis);\n    layout.SetValue(\u0022showlegend\u0022, true);\n\n    Trace trace = new Trace(\u0022scatter\u0022);\n    trace.SetValue(\u0022x\u0022, x);\n    trace.SetValue(\u0022y\u0022, y);\n    trace.SetValue(\u0022mode\u0022, \u0022markers\u0022);\n    trace.SetValue(\u0022name\u0022, \u0022Hello from C#\u0022);\n\n    GenericChart\n        .ofTraceObject(trace)\n        .WithLayout(layout)\n        .Show();\n}\n\u0060\u0060\u0060\n\n# Contributing and copyright\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding a new public API, please also \nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\nThe library is available under Public Domain license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/plotly/Plotly.NET/tree/master/docs/content\n  [gh]: https://github.com/plotly/Plotly.NET\n  [issues]: https://github.com/plotly/Plotly.NET/issues\n  [readme]: https://github.com/plotly/Plotly.NET/blob/master/README.md\n  [license]: https://github.com/plotly/Plotly.NET/blob/master/LICENSE.txt\n*)"},{"uri":"https://plotly.net/2_2_area-plots.html","title":"Area charts","content":"(**\n---\ntitle: Area charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Area charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create area charts, area charts with splines, and stackes area charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y  = [5.; 2.5; 5.; 7.5; 5.; 2.5; 7.5; 4.5; 5.5; 5.]\n\n(**\nAn area chart or area graph displays graphically quantitive data. It is based on the line chart.\nThe area between axis and line are commonly emphasized with colors, textures and hatchings.\n\n### Simple area chart\n*)\n\nlet area1 = Chart.Area(x,y)\n\n(*** condition: ipynb ***)\n#if IPYNB\narea1\n#endif // IPYNB\n\n(***hide***)\narea1 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n### Area chart with a spline\n*)\n\nlet area2 =\n    Chart.SplineArea(x,y)\n\n(*** condition: ipynb ***)\n#if IPYNB\narea2\n#endif // IPYNB\n\n(***hide***)\narea2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n### Stacked Area chart\n*)\n\nlet stackedArea =\n    [\n        Chart.StackedArea(x,y)\n        Chart.StackedArea(x,y |\u003E Seq.rev)\n    ]\n    |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedArea\n#endif // IPYNB\n\n(***hide***)\nstackedArea |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/8_2_sankey.html","title":"Sankey Charts","content":"(**\n---\ntitle: Sankey Charts\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 3\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Sankey charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create sankey charts in F#.\n\nSankey charts are a visualization of multiple, linked graphs layed out linearly. \nThese are usually used to depict flow between nodes or stations.\nTo create Sankey, a set of nodes and links between them are required. \nThese are created using the provided Node and Link structures.\n*)\n\nopen Plotly.NET \n\n// create nodes\nlet n1 = Node.Create(\u0022a\u0022,color=\u0022Black\u0022)\nlet n2 = Node.Create(\u0022b\u0022,color=\u0022Red\u0022)\nlet n3 = Node.Create(\u0022c\u0022,color=\u0022Purple\u0022)\nlet n4 = Node.Create(\u0022d\u0022,color=\u0022Green\u0022)\nlet n5 = Node.Create(\u0022e\u0022,color=\u0022Orange\u0022)\n\n// create links between nodes\nlet link1 = Link.Create(n1,n2,value=1.0)\nlet link2 = Link.Create(n2,n3,value=2.0)\nlet link3 = Link.Create(n1,n5,value=1.3)\nlet link4 = Link.Create(n4,n5,value=1.5)\nlet link5 = Link.Create(n3,n5,value=0.5)\n\nlet sankey1 = \n    Chart.Sankey(\n        [n1;n2;n3;n4;n5],\n        [link1;link2;link3;link4;link5]\n    )\n    |\u003E Chart.withTitle \u0022Sankey Sample\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nsankey1\n#endif // IPYNB\n\n(***hide***)\nsankey1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/4_1_box-plots.html","title":"BoxPlots","content":"(**\n---\ntitle: BoxPlots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# BoxPlots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create boxplot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n\nlet y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet x = [\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022]\n\n(**\nA box plot or boxplot is a convenient way of graphically depicting groups of numerical data through their quartiles. \nBox plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper\nand lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram. \nOutliers may be plotted as individual points.\n*)\n\nlet box1 =\n    Chart.BoxPlot(x,y,Jitter=0.1,Boxpoints=StyleParam.Boxpoints.All)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox1\n#endif // IPYNB\n\n(***hide***)\nbox1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nBy swapping x and y plus using \u0060StyleParam.Orientation.Horizontal\u0060 we can flip the chart horizontaly.\n*)\nlet box2 =\n    Chart.BoxPlot(y,x,Jitter=0.1,Boxpoints=StyleParam.Boxpoints.All,Orientation=StyleParam.Orientation.Horizontal)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox2\n#endif // IPYNB\n\n(***hide***)\nbox2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nYou can also produce a boxplot using the \u0060Chart.Combine\u0060 syntax.\n*)\n\nlet y\u0027 =  [2.; 1.5; 5.; 1.5; 2.; 2.5; 2.1; 2.5; 1.5; 1.;2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\nlet box3 =\n    [\n        Chart.BoxPlot(\u0022y\u0022 ,y,Name=\u0022bin1\u0022,Jitter=0.1,Boxpoints=StyleParam.Boxpoints.All);\n        Chart.BoxPlot(\u0022y\u0027\u0022,y\u0027,Name=\u0022bin2\u0022,Jitter=0.1,Boxpoints=StyleParam.Boxpoints.All);\n    ]\n    |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox3\n#endif // IPYNB\n\n(***hide***)\nbox3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/2_4_bubble-charts.html","title":"Bubble charts","content":"(**\n---\ntitle: Bubble charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Bubble charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create bubble charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n  \nlet x = [2; 4; 6;]\nlet y = [4; 1; 6;]\nlet size = [19; 26; 55;]\n\n(**\n\nA bubble chart is a type of chart that displays three dimensions of data. Each entity with its triplet (x, y, size) \nof associated data is plotted as a disk. The first two values determine the disk\u0027s xy location and the \nthird its size.\n\n*)\n\nlet bubble1 = Chart.Bubble(x,y,size)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbubble1\n#endif // IPYNB\n\n(***hide***)\nbubble1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/3_3_3d-mesh-plots.html","title":"3D Mesh plots","content":"(**\n---\ntitle: 3D Mesh plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Mesh plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-Mesh charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen System\nopen Plotly.NET \n\n\n//---------------------- Generate linearly spaced vector ----------------------\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n    //[|min ..bw ..max|]\n\n//---------------------- Create example data ----------------------\nlet size = 100\nlet x = linspace(-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace(-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = - (5. * x / (x**2. \u002B y**2. \u002B 1.) )\n\nlet z = \n    Array.init size (fun i -\u003E \n        Array.init size (fun j -\u003E \n            f x.[j] y.[i] \n        )\n    )\n\nlet rnd = System.Random()\nlet a = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet b = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet c = Array.init 50 (fun _ -\u003E rnd.NextDouble())\n\n\nlet mesh3d =\n    Trace3d.initMesh3d \n        (fun mesh3d -\u003E\n            mesh3d?x \u003C- a\n            mesh3d?y \u003C- b\n            mesh3d?z \u003C- c\n            mesh3d?flatshading \u003C- true\n            mesh3d?contour \u003C- Contours.initXyz(Show=true)\n            mesh3d\n            )\n    |\u003E GenericChart.ofTraceObject \n    \n(*** condition: ipynb ***)\n#if IPYNB\nmesh3d\n#endif // IPYNB\n\n(***hide***)\nmesh3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/7_1_windrose-charts.html","title":"Windrose charts","content":"(**\n---\ntitle: Windrose charts\ncategory: Polar Charts\ncategoryindex: 9 \nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Wind rose charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create wind rose charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet r    = [77.5; 72.5; 70.0; 45.0; 22.5; 42.5; 40.0; 62.5]\nlet r\u0027   = [57.5; 50.0; 45.0; 35.0; 20.0; 22.5; 37.5; 55.0]\nlet r\u0027\u0027  = [40.0; 30.0; 30.0; 35.0; 7.5; 7.5; 32.5; 40.0]\nlet r\u0027\u0027\u0027 = [20.0; 7.5; 15.0; 22.5; 2.5; 2.5; 12.5; 22.5]\n\nlet t = [\u0022North\u0022; \u0022N-E\u0022; \u0022East\u0022; \u0022S-E\u0022; \u0022South\u0022; \u0022S-W\u0022; \u0022West\u0022; \u0022N-W\u0022]\n\n(**\nA wind rose is a graphic tool used by meteorologists to give a succinct view \nof how wind speed and direction are typically distributed at a particular location.\n*)\n  \nlet windrose1 =\n    [\n        Chart.WindRose (r   ,t,Name=\u002211-14 m/s\u0022)\n        Chart.WindRose (r\u0027  ,t,Name=\u00228-11 m/s\u0022)\n        Chart.WindRose (r\u0027\u0027 ,t,Name=\u00225-8 m/s\u0022)\n        Chart.WindRose (r\u0027\u0027\u0027,t,Name=\u0022\u003C 5 m/s\u0022)\n    ]\n    |\u003E Chart.Combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nwindrose1\n#endif // IPYNB\n\n(***hide***)\nwindrose1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n"},{"uri":"https://plotly.net/8_1_parallel-coords.html","title":"Parallel coordinates","content":"(**\n---\ntitle: Parallel coordinates\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(** \n# Parallel coordinates\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create parallel coordinates plot in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\nlet data = \n    [\n        \u0022A\u0022,[1.;4.;3.4;0.7;]\n        \u0022B\u0022,[3.;1.5;1.7;2.3;]\n        \u0022C\u0022,[2.;4.;3.1;5.]\n        \u0022D\u0022,[4.;2.;2.;4.;]\n    ]\n\n(**\n\nParallel coordinates are a common way of visualizing high-dimensional geometry and analyzing multivariate data.\nTo show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically \nvertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; \nthe position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\n*)\n\nlet parcoords1 =\n    Chart.ParallelCoord(data,Color=\u0022blue\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcoords1\n#endif // IPYNB\n\n(***hide***)\nparcoords1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n// Dynamic object version\nlet parcoords = \n    let v = [|\n        Dimensions.init([|1.;4.;|],  \n            StyleParam.Range.MinMax (1.,5.),StyleParam.Range.MinMax (1.,2.),Label=\u0022A\u0022);\n        Dimensions.init([|3.;1.5;|], \n            StyleParam.Range.MinMax (1.,5.),Label=\u0022B\u0022,Tickvals=[|1.5;3.;4.;5.;|]);\n        Dimensions.init([|2.;4.;|],  \n            StyleParam.Range.MinMax (1.,5.),Label=\u0022C\u0022,Tickvals=[|1.;2.;4.;5.;|],\n                TickText=[|\u0022txt 1\u0022;\u0022txt 2\u0022;\u0022txt 4\u0022;\u0022txt 5\u0022;|]);\n        Dimensions.init([|4.;2.;|],  \n            StyleParam.Range.MinMax (1.,5.),Label=\u0022D\u0022);\n    |]\n\n    let dyn = Trace(\u0022parcoords\u0022)\n\n    dyn?dimensions \u003C- v\n    dyn?line \u003C- Line.init(Color = \u0022blue\u0022)\n\n    dyn\n    |\u003E GenericChart.ofTraceObject\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcoords\n#endif // IPYNB\n\n(***hide***)\nparcoords |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/4_3_contour-plots.html","title":"Contour plots","content":"(**\n---\ntitle: Contour plots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Contour plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create contour plot in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen System\nopen Plotly.NET \n\n// Generate linearly spaced vector\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    [|min ..bw ..max|]\n\n// Create example data\nlet size = 100\nlet x = linspace(-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace(-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = - (5. * x / (x**2. \u002B y**2. \u002B 1.) )\n\nlet z = \n    Array.init size (fun i -\u003E \n        Array.init size (fun j -\u003E \n            f x.[j] y.[i] \n        )\n    )\n\n(**\nA contour plot is a graphical technique for representing a 3-dimensional surface by plotting\nconstant z slices, called contours, on a 2-dimensional format. That is, given a value for z,\nlines are drawn for connecting the (x,y) coordinates where that z value occurs.\nThe contour plot is an alternative to a 3-D surface plot.\n\nThe contour plot is an alternative to a 3-D surface plot.\n\n*)\n\nlet contour1 =\n    z\n    |\u003E Chart.Contour\n    |\u003E Chart.withSize(600.,600.)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncontour1\n#endif // IPYNB\n\n(***hide***)\ncontour1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/3_1_3d-line-plots.html","title":"3D line charts","content":"(**\n---\ntitle: 3D line charts\ncategory: 3D Charts\ncategoryindex: 4\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D line charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create three-dimensional scatter charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \nopen System\n \nlet c = [0. .. 0.5 .. 15.]\n\nlet x,y,z =  \n    c\n    |\u003E List.map (fun i -\u003E\n        let i\u0027 = float i \n        let r = 10. * Math.Cos (i\u0027 / 10.)\n        (r*Math.Cos i\u0027,r*Math.Sin i\u0027,i\u0027)\n    )\n    |\u003E List.unzip3\n\n(**\nA Scatter3 chart shows a three-dimensional spinnable view of your data.\nWhen using \u0060Lines_Markers\u0060 as the mode of the chart, you additionally render a line between the points:\n*)\n\nlet scatter3dLine = \n    Chart.Scatter3d(x,y,z,StyleParam.Mode.Lines_Markers)\n    |\u003E Chart.withX_AxisStyle(\u0022x-axis\u0022)\n    |\u003E Chart.withY_AxisStyle(\u0022y-axis\u0022)\n    |\u003E Chart.withZ_AxisStyle(\u0022z-axis\u0022)\n    |\u003E Chart.withSize(800.,800.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nscatter3dLine\n#endif // IPYNB\n\n(***hide***)\nscatter3dLine |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/1_4_display-options.html","title":"Display Options","content":"(**\n---\ntitle: Display Options\ncategory: Chart Layout\ncategoryindex: 2\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Display Options\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to alter the display options that control the html document that contains plotly charts\n\nYou can control the html document that gets created via \u0060Chart.Show\u0060 with various functions that change a chart\u0027s \u0060DisplayOptions\u0060.\n\nNaturally, these full html documents can not be embedded in this documentation page, so images have to suffice in this case.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n\n(**\n## Chart description\n\nTo create a chart description to put below the chart, use \u0060ChartDescription.create\u0060 to create the description, and \u0060Chart.WithDescription\u0060 \nto add the description to the chart\u0027s display options:\n*)\n\nlet description1 =\n    ChartDescription.create \u0022Hello\u0022 \u0022F#\u0022\n\n(***do-not-eval***)\nlet desc1 =\n    Chart.Point(x,y,Name=\u0022desc1\u0022)    \n    |\u003E Chart.WithDescription(description1)\n    |\u003E Chart.Show\n\n(**\n\n![]({{root}}img/desc1.png)\n\nThe \u0060ChartDescription\u0060 type is a bit barebones for now, but you can contain any valid html in both \u0060Heading\u0060 and \u0060Text\u0060 fields:\n*)\n\nlet description2 =\n    ChartDescription.create \u0022\u003Ch1\u003EI am heading\u003C/h1\u003E\u0022 \u0022\u003Col\u003E\u003Cli\u003EHi\u003C/li\u003E\u003Cli\u003Ethere\u003C/li\u003E\u003C/ol\u003E\u0022\n\n(***do-not-eval***)\nlet desc2 =\n    Chart.Point(x,y,Name=\u0022desc1\u0022)    \n    |\u003E Chart.WithDescription(description2)\n    |\u003E Chart.Show\n\n(**\n\n![]({{root}}img/desc2.png)\n\n## Adding additional head tags\n\nYou can add any number of additional html tags to the documents \u0060\u003Chead\u003E\u0060 tag using \u0060Chart.WithAdditionalHeadTags\u0060.\n\nFor example, you can load external css libraries to style the chart description:\n\n*)\n\n//html for description containing bulma classes such as \u0022hero\u0022\nlet bulmaHero = \u0022\u0022\u0022\u003Csection class=\u0022hero is-primary is-bold\u0022\u003E\n  \u003Cdiv class=\u0022hero-body\u0022\u003E\n    \u003Cp class=\u0022title\u0022\u003E\n      Hero title\n    \u003C/p\u003E\n    \u003Cp class=\u0022subtitle\u0022\u003E\n      Hero subtitle\n    \u003C/p\u003E\n  \u003C/div\u003E\n\u003C/section\u003E\n\u0022\u0022\u0022\n\n// chart description containing bulma classes\nlet description3 =\n    ChartDescription.create \n        \u0022\u0022\u0022\u003Ch1 class=\u0022title\u0022\u003EI am heading\u003C/h1\u003E\u0022\u0022\u0022 \n       bulmaHero\n\n(***do-not-eval***)\nlet desc3 =\n    Chart.Point(x,y,Name=\u0022desc3\u0022)    \n    |\u003E Chart.WithDescription description3\n    // Add reference to the bulma css framework\n    |\u003E Chart.WithAdditionalHeadTags [\u0022\u0022\u0022\u003Clink rel=\u0022stylesheet\u0022 href=\u0022https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css\u0022\u003E\u0022\u0022\u0022]\n    |\u003E Chart.Show\n\n(**\n\n![]({{root}}img/desc3.png)\n\n## Using MathTeX\n\nBy popular request, \u0060Chart.WithMathTex\u0060 is a prebuilt function to enable MathTeX for your generated plotly chart documents:\n\n*)\n\n(***do-not-eval***)\n[\n    Chart.Point([(1.,2.)],@\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022)\n    Chart.Point([(2.,4.)],@\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022)\n]\n|\u003E Chart.Combine\n|\u003E Chart.withTitle @\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022\n// include mathtex tags in \u003Chead\u003E. pass true to append these scripts, false to ONLY include MathTeX.\n|\u003E Chart.WithMathTex(true)\n|\u003E Chart.Show\n\n(**\n\n![]({{root}}img/desc4.png)\n\n*)"}]